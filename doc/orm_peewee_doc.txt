TITLE: Defining Peewee Models in Python
DESCRIPTION: This snippet demonstrates how to define database models using Peewee. It sets up a base model connected to an SQLite database and defines `User` and `Tweet` models with various field types and relationships.
SOURCE: https://github.com/coleifer/peewee/blob/master/README.rst#_snippet_0

LANGUAGE: python
CODE:
```
from peewee import *
import datetime

db = SqliteDatabase('my_database.db')

class BaseModel(Model):
    class Meta:
        database = db

class User(BaseModel):
    username = CharField(unique=True)

class Tweet(BaseModel):
    user = ForeignKeyField(User, backref='tweets')
    message = TextField()
    created_date = DateTimeField(default=datetime.datetime.now)
    is_published = BooleanField(default=True)
```

----------------------------------------

TITLE: Creating a Database Instance (Python)
DESCRIPTION: Create an instance of a Database. The `db` object will be used to manage the connections to the Sqlite database. This example uses `SqliteDatabase`, but other database engines are available.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_1

LANGUAGE: python
CODE:
```
db = SqliteDatabase('my_app.db')
```

----------------------------------------

TITLE: Initializing Standard Peewee Databases - Python
DESCRIPTION: Demonstrates how to initialize standard Peewee database connections for SQLite, MySQL, and Postgres, including basic connection parameters and SQLite pragmas.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_0

LANGUAGE: python
CODE:
```
from peewee import *

# SQLite database using WAL journal mode and 64MB cache.
sqlite_db = SqliteDatabase('/path/to/app.db', pragmas={
    'journal_mode': 'wal',
    'cache_size': -1024 * 64})

# Connect to a MySQL database on network.
mysql_db = MySQLDatabase('my_app', user='app', password='db_password',
                             host='10.1.0.8', port=3306)

# Connect to a Postgres database.
pg_db = PostgresqlDatabase('my_app', user='postgres', password='secret',
                               host='10.1.0.9', port=5432)
```

----------------------------------------

TITLE: Connecting to Database and Creating Tables (Peewee, Python)
DESCRIPTION: Demonstrates the standard procedure in Peewee for establishing a database connection and creating the necessary tables for defined models. The `create_tables` method handles the generation and execution of `CREATE TABLE` SQL statements.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_32

LANGUAGE: python
CODE:
```
# Connect to our database.
db.connect()

# Create the tables.
db.create_tables([User, Tweet])
```

----------------------------------------

TITLE: Creating Peewee Model Instances (Python)
DESCRIPTION: Demonstrates how to create new instances of a Peewee `Model` and save them to the database using the `create()` class method. This is typically used for inserting new records.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_8

LANGUAGE: python
CODE:
```
herb_mittens = Pet.create(owner=herb, name='Mittens', animal_type='cat')
herb_mittens_jr = Pet.create(owner=herb, name='Mittens Jr', animal_type='cat')
```

----------------------------------------

TITLE: Initializing Postgresql Database and Associating with Models - Python
DESCRIPTION: Shows how to create a standard `PostgresqlDatabase` instance and link it to Peewee models by setting the `database` attribute in a base model's `Meta` class.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_4

LANGUAGE: python
CODE:
```
psql_db = PostgresqlDatabase('my_database', user='postgres')

    class BaseModel(Model):
        """A base model that will use our Postgresql database"""
        class Meta:
            database = psql_db

    class User(BaseModel):
        username = CharField()
```

----------------------------------------

TITLE: Performing Various Queries with Peewee
DESCRIPTION: This comprehensive snippet showcases several common Peewee query patterns, including selecting single objects, filtering by lists, using joins, counting records with conditions, pagination, ordering by aggregates, and performing atomic updates.
SOURCE: https://github.com/coleifer/peewee/blob/master/README.rst#_snippet_3

LANGUAGE: python
CODE:
```
# A simple query selecting a user.
User.get(User.username == 'charlie')

# Get tweets created by one of several users.
usernames = ['charlie', 'huey', 'mickey']
users = User.select().where(User.username.in_(usernames))
tweets = Tweet.select().where(Tweet.user.in_(users))

# We could accomplish the same using a JOIN:
tweets = (Tweet
              .select()
              .join(User)
              .where(User.username.in_(usernames)))

# How many tweets were published today?
tweets_today = (Tweet
                    .select()
                    .where(
                        (Tweet.created_date >= datetime.date.today()) &
                        (Tweet.is_published == True))
                    .count())

# Paginate the user table and show me page 3 (users 41-60).
User.select().order_by(User.username).paginate(3, 20)

# Order users by the number of tweets they've created:
tweet_ct = fn.Count(Tweet.id)
users = (User
             .select(User, tweet_ct.alias('ct'))
             .join(Tweet, JOIN.LEFT_OUTER)
             .group_by(User)
             .order_by(tweet_ct.desc()))

# Do an atomic update (for illustrative purposes only, imagine a simple
# table for tracking a "count" associated with each URL). We don't want to
# naively get the save in two separate steps since this is prone to race
# conditions.
Counter.update(count=Counter.count + 1).where(Counter.url == request.url)
```

----------------------------------------

TITLE: Preventing SQL Injection with Peewee Parameters
DESCRIPTION: Illustrates the correct and incorrect ways to pass user-defined data to raw SQL queries or `SQL` objects in Peewee to prevent SQL injection. It emphasizes passing user data as parameters rather than embedding it directly in the SQL string.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_21

LANGUAGE: python
CODE:
```
# Bad! DO NOT DO THIS!
query = MyModel.raw('SELECT * FROM my_table WHERE data = %s' % (user_data,))

# Good. `user_data` will be treated as a parameter to the query.
query = MyModel.raw('SELECT * FROM my_table WHERE data = %s', user_data)

# Bad! DO NOT DO THIS!
query = MyModel.select().where(SQL('Some SQL expression %s' % user_data))

# Good. `user_data` will be treated as a parameter.
query = MyModel.select().where(SQL('Some SQL expression %s', user_data))
```

----------------------------------------

TITLE: Creating a Record Programmatically with Model.save (Peewee, Python)
DESCRIPTION: Shows how to instantiate a model object, set its attributes, and then persist it to the database using the `Model.save` method. The method returns the number of rows modified, and the primary key is populated on the instance after saving.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_1

LANGUAGE: pycon
CODE:
```
>>> user = User(username='Charlie')
>>> user.save()  # save() returns the number of rows modified.
1
>>> user.id
1
>>> huey = User()
>>> huey.username = 'Huey'
>>> huey.save()
1
>>> huey.id
2
```

----------------------------------------

TITLE: Retrieving Specific Columns from a Table (SQL and Peewee)
DESCRIPTION: Illustrates how to select only specific columns ('name' and 'membercost') from the 'facilities' table. The SQL uses `SELECT name, membercost`, and the Peewee equivalent passes the desired model fields to the `select()` method. Includes an example of iterating over the results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_3

LANGUAGE: sql
CODE:
```
SELECT name, membercost FROM facilities;
```

LANGUAGE: python
CODE:
```
query = Facility.select(Facility.name, Facility.membercost)

# To iterate:
for facility in query:
    print(facility.name)
```

----------------------------------------

TITLE: Getting Object by Primary Key with get_by_id - Peewee Python
DESCRIPTION: Shows the shorthand class method `get_by_id` for retrieving a model instance directly by its primary key value. This method raises a `DoesNotExist` exception if the object with the given primary key is not found.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_114

LANGUAGE: python
CODE:
```
user = User.get_by_id(1)  # Returns user with id = 1.
```

----------------------------------------

TITLE: Defining Peewee Person Model - Python
DESCRIPTION: Imports necessary Peewee components, initializes an SQLite database connection, and defines the Person model with name and birthday fields, linking it to the database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_0

LANGUAGE: python
CODE:
```
from peewee import *

db = SqliteDatabase('people.db')

class Person(Model):
    name = CharField()
    birthday = DateField()

    class Meta:
        database = db # This model uses the "people.db" database.
```

----------------------------------------

TITLE: Defining Database Connection and Models (Python)
DESCRIPTION: This code block shows the typical way to define your database connection and model classes using Peewee, including a base model, a User model, and a Tweet model with various field types and a foreign key relationship.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_0

LANGUAGE: python
CODE:
```
import datetime
from peewee import *

db = SqliteDatabase('my_app.db')

class BaseModel(Model):
    class Meta:
        database = db

class User(BaseModel):
    username = CharField(unique=True)

class Tweet(BaseModel):
    user = ForeignKeyField(User, backref='tweets')
    message = TextField()
    created_date = DateTimeField(default=datetime.datetime.now)
    is_published = BooleanField(default=True)
```

----------------------------------------

TITLE: Define Peewee Database Models (Python)
DESCRIPTION: Defines the Peewee database connection and the User, Relationship, and Message models, specifying their fields and relationships for the Twitter-like application.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_2

LANGUAGE: python
CODE:
```
# create a peewee database instance -- our models will use this database to
# persist information
database = SqliteDatabase(DATABASE)

# model definitions -- the standard "pattern" is to define a base model class
# that specifies which database to use.  then, any subclasses will automatically
# use the correct storage.
class BaseModel(Model):
    class Meta:
        database = database

# the user model specifies its fields (or columns) declaratively, like django
class User(BaseModel):
    username = CharField(unique=True)
    password = CharField()
    email = CharField()
    join_date = DateTimeField()

# this model contains two foreign keys to user -- it essentially allows us to
# model a "many-to-many" relationship between users.  by querying and joining
# on different columns we can expose who a user is "related to" and who is
# "related to" a given user
class Relationship(BaseModel):
    from_user = ForeignKeyField(User, backref='relationships')
    to_user = ForeignKeyField(User, backref='related_to')

    class Meta:
        # `indexes` is a tuple of 2-tuples, where the 2-tuples are
        # a tuple of column names to index and a boolean indicating
        # whether the index is unique or not.
        indexes = (
            # Specify a unique multi-column index on from/to-user.
            (('from_user', 'to_user'), True),
        )

# a dead simple one-to-many relationship: one user has 0..n messages, exposed by
# the foreign key. a users messages will be accessible as a special attribute,
# User.messages.
class Message(BaseModel):
    user = ForeignKeyField(User, backref='messages')
    content = TextField()
    pub_date = DateTimeField()
```

----------------------------------------

TITLE: Accessing Related Peewee Object Without Join (N+1) (Python)
DESCRIPTION: Queries `Tweet` without joining `User` and shows that accessing the related `User` object (`tweet.user.username`) inside the loop triggers a separate database query for *each* tweet, leading to the N+1 problem.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_12

LANGUAGE: python
CODE:
```
tweets = Tweet.select().order_by(Tweet.created_date.desc())
for tweet:
    # WARNING: an additional query will be issued for EACH tweet
    # to fetch the associated User data.
    print(tweet.user.username, tweet.message)
```

----------------------------------------

TITLE: Connecting to Database and Creating Tables with Peewee
DESCRIPTION: This code connects to the previously defined SQLite database instance (`db`) and creates the tables for the `User` and `Tweet` models if they do not already exist.
SOURCE: https://github.com/coleifer/peewee/blob/master/README.rst#_snippet_1

LANGUAGE: python
CODE:
```
db.connect()
db.create_tables([User, Tweet])
```

----------------------------------------

TITLE: Defining a Model with ForeignKeyField (Python)
DESCRIPTION: The `ForeignKeyField` allows representing foreign-key relationships between models. This example defines a `Message` model with a foreign key `user` linking to the `User` model, enabling intuitive access to related objects.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_5

LANGUAGE: python
CODE:
```
class Message(Model):
    user = ForeignKeyField(User, backref='messages')
    body = TextField()
    send_date = DateTimeField(default=datetime.datetime.now)
```

----------------------------------------

TITLE: Creating and Saving Peewee Model Instance - Python
DESCRIPTION: Imports the date object, creates a new Person instance in memory, and then saves it to the database using the save() method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_4

LANGUAGE: python
CODE:
```
from datetime import date
uncle_bob = Person(name='Bob', birthday=date(1960, 1, 15))
uncle_bob.save() # bob is now stored in the database
# Returns: 1
```

----------------------------------------

TITLE: Defining Peewee Pet Model with ForeignKey - Python
DESCRIPTION: Defines the Pet model, including a ForeignKeyField linking it to the Person model, and specifies the database connection.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_1

LANGUAGE: python
CODE:
```
class Pet(Model):
    owner = ForeignKeyField(Person, backref='pets')
    name = CharField()
    animal_type = CharField()

    class Meta:
        database = db # this model uses the "people.db" database
```

----------------------------------------

TITLE: Saving Model Instance in Peewee (Python)
DESCRIPTION: Shows how to save a Peewee model instance using the `save()` method. It illustrates that `save()` returns the number of rows affected (typically 1 for a new save or update) and how the `id` attribute is populated after saving a new object.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_19

LANGUAGE: pycon
CODE:
```
>>> user.save()  # save() returns the number of rows modified.
1
>>> user.id
1
>>> user.save()
>>> user.id
1
>>> huey.save()
1
>>> huey.id
2
```

----------------------------------------

TITLE: Creating Peewee Tables - Python
DESCRIPTION: Creates the database tables for the Person and Pet models if they do not already exist, including columns, indexes, and foreign key constraints.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_3

LANGUAGE: python
CODE:
```
db.create_tables([Person, Pet])
```

----------------------------------------

TITLE: Selecting Single Record (Peewee) - Python
DESCRIPTION: Illustrates various ways to retrieve a single model instance in Peewee, including using `Model.get` with conditions, `Model.get_by_id` for primary key lookups, and item access (`Model[id]`). It also shows accessing an attribute of the retrieved object and handling the `DoesNotExist` exception when no record is found.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_32

LANGUAGE: python
CODE:
```
User.get(User.id == 1)
# Expected output: <__main__.User object at ...>

User.get_by_id(1)  # Same as above.
# Expected output: <__main__.User object at ...>

User[1]  # Also same as above.
# Expected output: <__main__.User object at ...>

User.get(User.id == 1).username
# Expected output: u'Charlie'

User.get(User.username == 'Charlie')
# Expected output: <__main__.User object at ...>

User.get(User.username == 'nobody')
# Expected output: UserDoesNotExist: instance matching query does not exist:
# SQL: SELECT t1."id", t1."username" FROM "user" AS t1 WHERE t1."username" = ?
# PARAMS: ['nobody']
```

----------------------------------------

TITLE: Creating New User with Peewee and Atomic Transaction Python
DESCRIPTION: Presents a Python code snippet demonstrating how to create a new user record using Peewee's `User.create` method. It wraps the creation within a `database.atomic()` block for transaction safety and includes a `try...except IntegrityError` to handle potential unique constraint violations, such as a duplicate username.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_8

LANGUAGE: python
CODE:
```
try:
    with database.atomic():
        # Attempt to create the user. If the username is taken, due to the
        # unique constraint, the database will raise an IntegrityError.
        user = User.create(
            username=request.form['username'],
```

----------------------------------------

TITLE: Deleting a Peewee Model Instance (Python)
DESCRIPTION: Shows how to remove a specific model instance from the database using the `delete_instance()` method. The method returns the number of rows removed from the database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_9

LANGUAGE: python
CODE:
```
herb_mittens.delete_instance() # he had a great life
```

----------------------------------------

TITLE: Joining Tweets and Users with Peewee (Python)
DESCRIPTION: This example demonstrates using the `join` method on a Peewee `Select` query to join the `Tweet` model with the `User` model. It then applies a `where` clause to filter the results, selecting only tweets made by users where the `is_admin` attribute is True.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_127

LANGUAGE: python
CODE:
```
sq = Tweet.select().join(User).where(User.is_admin == True)
```

----------------------------------------

TITLE: Accessing Related Peewee Object After Join (Python)
DESCRIPTION: Queries `Tweet` and `User` models with a join and demonstrates accessing fields from the related `User` object (`tweet.user.username`) without triggering additional queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_11

LANGUAGE: python
CODE:
```
tweets = (Tweet
              .select(Tweet, User)
              .join(User)
              .order_by(Tweet.created_date.desc()))
for tweet in tweets:
    print(tweet.user.username, tweet.message)
```

----------------------------------------

TITLE: Creating Tables with Peewee Python
DESCRIPTION: Defines a Python function `create_tables` that uses Peewee's `database.create_tables` method within a database context manager to create the necessary tables for the User, Relationship, and Message models. This function encapsulates the one-time database schema initialization process.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_3

LANGUAGE: python
CODE:
```
def create_tables():
    with database:
        database.create_tables([User, Relationship, Message])
```

----------------------------------------

TITLE: Selecting and Accessing Peewee Query Results (Python)
DESCRIPTION: Demonstrates how to create a basic SELECT query using Model.select() and access the results using list comprehension, indexing, and slicing. Peewee caches results for efficient repeated access.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_37

LANGUAGE: Python
CODE:
```
query = User.select()
[user.username for user in query]

query[1]

query[1].username

query[:2]
```

----------------------------------------

TITLE: Filtering Peewee Records with `where` Clause
DESCRIPTION: Demonstrates basic filtering using the .where() clause with equality checks and date comparisons. Shows how to retrieve a single record using .get() and iterate over filtered results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_46

LANGUAGE: python
CODE:
```
>>> user = User.get(User.username == 'Charlie')
>>> for tweet in Tweet.select().where(Tweet.user == user, Tweet.is_published == True):
...     print(tweet.user.username, '->', tweet.message)
...
Charlie -> hello world
Charlie -> this is fun

>>> for tweet in Tweet.select().where(Tweet.created_date < datetime.datetime(2011, 1, 1)):
...     print(tweet.message, tweet.created_date)
...
Really old tweet 2010-01-01 00:00:00
```

----------------------------------------

TITLE: Defining and Saving a Peewee Model Instance (Python)
DESCRIPTION: Illustrates the basic usage of the Peewee `Model` class. It shows how to define a model with various field types, instantiate it with data, and save the instance to the database. Requires a database connection (`db`).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_98

LANGUAGE: python
CODE:
```
db = SqliteDatabase(':memory:')

class User(Model):
    username = TextField()
    join_date = DateTimeField(default=datetime.datetime.now)
    is_admin = BooleanField(default=False)

admin = User(username='admin', is_admin=True)
admin.save()
```

----------------------------------------

TITLE: Connecting to Peewee Database - Python
DESCRIPTION: Opens the connection to the database instance previously defined. This is good practice to check for connection errors early.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_2

LANGUAGE: python
CODE:
```
db.connect()
```

----------------------------------------

TITLE: Selecting Active Users in Peewee
DESCRIPTION: Simple example demonstrating how to select users where the active field is true using the .where() clause.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_50

LANGUAGE: python
CODE:
```
User.select().where(User.active == True)
```

----------------------------------------

TITLE: Standard Peewee Database Initialization (Python)
DESCRIPTION: Provides an example of the typical way to initialize a Peewee database by directly specifying the database file name and optional parameters like pragmas during instantiation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_26

LANGUAGE: python
CODE:
```
db = SqliteDatabase('my_app.db', pragmas={'journal_mode': 'wal'})
```

----------------------------------------

TITLE: Defining and Using ForeignKeyField in Peewee
DESCRIPTION: Demonstrates how to define a one-to-many relationship using `ForeignKeyField` in Peewee, showing both the forward access (`some_tweet.user`) and the back-reference (`charlie.tweets`). It illustrates model definition and basic querying of related objects.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_78

LANGUAGE: python
CODE:
```
class User(Model):
    name = TextField()

class Tweet(Model):
    user = ForeignKeyField(User, backref='tweets')
    content = TextField()

# "user" attribute
>>> some_tweet.user
<User: charlie>

# "tweets" backref attribute
>>> for tweet in charlie.tweets:
...     print(tweet.content)
Some tweet
Another tweet
Yet another tweet
```

----------------------------------------

TITLE: Basic Field Comparisons in Peewee (Python)
DESCRIPTION: Shows simple examples of comparing a Peewee Model field (`User.username`, `User.login_count`) against a literal value using standard Python comparison operators (`==`, `<`), which are overloaded by Peewee to build SQL expressions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_8

LANGUAGE: python
CODE:
```
# username is equal to 'charlie'
User.username == 'charlie'
```

LANGUAGE: python
CODE:
```
# user has logged in less than 5 times
User.login_count < 5
```

----------------------------------------

TITLE: Performing Simple Peewee Join Query - Python
DESCRIPTION: Demonstrates a basic join operation in Peewee to retrieve tweets by a specific user. Peewee automatically infers the join condition based on the foreign key.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_4

LANGUAGE: python
CODE:
```
query = Tweet.select().join(User).where(User.username == 'huey')
for tweet in query:
    print(tweet.content)
```

----------------------------------------

TITLE: Creating a Record with Model.create (Peewee, Python)
DESCRIPTION: Demonstrates creating a new model instance and inserting a row into the database using the `Model.create` method with keyword arguments. The primary key is automatically retrieved and stored on the instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_0

LANGUAGE: pycon
CODE:
```
>>> User.create(username='Charlie')
<__main__.User object at 0x2529350>
```

----------------------------------------

TITLE: Defining a Model Class (Python)
DESCRIPTION: Define a model class using the declarative style. This example defines a `User` model extending `BaseModel` and inheriting the database connection. It explicitly defines a `username` column with a unique constraint; Peewee automatically adds an auto-incrementing integer primary key field named `id`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_3

LANGUAGE: python
CODE:
```
class User(BaseModel):
    username = CharField(unique=True)
```

----------------------------------------

TITLE: Defining Peewee Models for Relationships - Python
DESCRIPTION: Defines the User, Tweet, and Favorite models using Peewee, establishing foreign key relationships between them. Includes a base model and an in-memory SQLite database connection.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_0

LANGUAGE: python
CODE:
```
import datetime
from peewee import *


db = SqliteDatabase(':memory:')

class BaseModel(Model):
    class Meta:
        database = db

class User(BaseModel):
    username = TextField()

class Tweet(BaseModel):
    content = TextField()
    timestamp = DateTimeField(default=datetime.datetime.now)
    user = ForeignKeyField(User, backref='tweets')

class Favorite(BaseModel):
    user = ForeignKeyField(User, backref='favorites')
    tweet = ForeignKeyField(Tweet, backref='favorites')
```

----------------------------------------

TITLE: Combining Query Clauses with Logical Operators in Peewee Python
DESCRIPTION: This snippet shows how to combine multiple query conditions using Peewee's overloaded logical operators (`&` for AND, `|` for OR, `~` for NOT). It also illustrates using the `.not_in` method with a list or a subquery to exclude records.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_1

LANGUAGE: python
CODE:
```
# Find any users who are active administrations.
User.select().where(
  (User.is_admin == True) &
  (User.is_active == True))

# Find any users who are either administrators or super-users.
User.select().where(
  (User.is_admin == True) |
  (User.is_superuser == True))

# Alternatively, use the boolean values directly. Here we query users who
# are admins and NOT superusers.
User.select().where(User.is_admin & ~User.is_superuser)

# Find any Tweets by users who are not admins (NOT IN).
admins = User.select().where(User.is_admin == True)
non_admin_tweets = Tweet.select().where(Tweet.user.not_in(admins))

# Find any users who are not my friends (strangers).
friends = User.select().where(User.username.in_(['charlie', 'huey', 'mickey']))
strangers = User.select().where(User.id.not_in(friends))
```

----------------------------------------

TITLE: Performing Atomic Counter Update in Peewee (Python)
DESCRIPTION: Shows the recommended way to perform an atomic update on a counter field using Peewee's `Model.update`. It directly increments the field value within the update statement, ensuring thread-safe updates without race conditions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_22

LANGUAGE: pycon
CODE:
```
>>> query = Stat.update(counter=Stat.counter + 1).where(Stat.url == request.url)
>>> query.execute()
```

----------------------------------------

TITLE: Updating Rows in a Table (Python)
DESCRIPTION: Provides examples of updating rows in a table: updating all rows with a specific value, and updating a specific row based on a condition using the update() method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_84

LANGUAGE: python
CODE:
```
# Update all rows.
db['users'].update(favorite_orm='peewee')

# Only update Huey's record, setting his age to 3.
db['users'].update(name='Huey', age=3, columns=['name'])
```

----------------------------------------

TITLE: Defining Many-to-Many Models with Junction Table (Peewee)
DESCRIPTION: Defines the Student, Course, and StudentCourse models to represent a many-to-many relationship between students and courses using a separate junction table. The StudentCourse model contains foreign keys linking students and courses.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_82

LANGUAGE: python
CODE:
```
class Student(Model):
    name = CharField()

class Course(Model):
    name = CharField()

class StudentCourse(Model):
    student = ForeignKeyField(Student)
    course = ForeignKeyField(Course)
```

----------------------------------------

TITLE: Basic Query Operators in Peewee Python
DESCRIPTION: This snippet demonstrates how to use basic comparison operators like equality (`==`) and method-based lookups such as `.in_`, `.between`, `.startswith`, and `.contains` to filter database records in Peewee.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_0

LANGUAGE: python
CODE:
```
# Find the user whose username is "charlie".
User.select().where(User.username == 'charlie')

# Find the users whose username is in [charlie, huey, mickey]
User.select().where(User.username.in_(['charlie', 'huey', 'mickey']))

# Find users whose salary is between 50k and 60k (inclusive).
Employee.select().where(Employee.salary.between(50000, 60000))

Employee.select().where(Employee.name.startswith('C'))

Blog.select().where(Blog.title.contains(search_string))
```

----------------------------------------

TITLE: Accessing Related Objects (Python)
DESCRIPTION: These examples demonstrate how to access attributes of a related model instance through a ForeignKeyField (e.g., `some_message.user.username`) and how to iterate over related objects using the `backref` attribute defined on the ForeignKeyField (e.g., `some_user.messages`).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_6

LANGUAGE: python
CODE:
```
>>> print(some_message.user.username)
Some User
```

LANGUAGE: python
CODE:
```
>>> for message in some_user.messages:
...     print(message.body)
some message
another message
yet another message
```

----------------------------------------

TITLE: Selecting Data with Peewee Query Builder
DESCRIPTION: Executes a basic select query on the 'Note' table, ordering results by timestamp and limiting to the first three. It then iterates through the results, which are returned as dictionaries by default, printing the content of each note.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_3

LANGUAGE: python
CODE:
```
query = Note.select().order_by(Note.timestamp).limit(3)
for note_dict in query:
    print(note_dict['content'])
```

----------------------------------------

TITLE: Using Peewee ManyToManyField API (Python)
DESCRIPTION: Provides a comprehensive example of using Peewee's ManyToManyField. It includes defining models with the field, creating the necessary tables (including the implicit through model), querying related objects via the field attribute, and adding/removing relationships using the .add(), .remove(), and .clear() methods.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_38

LANGUAGE: python
CODE:
```
from peewee import *

db = SqliteDatabase('school.db')

class BaseModel(Model):
 class Meta:
 database = db

class Student(BaseModel):
 name = CharField()

class Course(BaseModel):
 name = CharField()
 students = ManyToManyField(Student, backref='courses')

StudentCourse = Course.students.get_through_model()

db.create_tables([
 Student,
 Course,
 StudentCourse])

# Get all classes that "huey" is enrolled in:
huey = Student.get(Student.name == 'Huey')
for course in huey.courses.order_by(Course.name):
 print(course.name)

# Get all students in "English 101":
engl_101 = Course.get(Course.name == 'English 101')
for student in engl_101.students:
 print(student.name)

# When adding objects to a many-to-many relationship, we can pass
# in either a single model instance, a list of models, or even a
# query of models:
huey.courses.add(Course.select().where(Course.name.contains('English')))

engl_101.students.add(Student.get(Student.name == 'Mickey'))
engl_101.students.add([
 Student.get(Student.name == 'Charlie'),
 Student.get(Student.name == 'Zaizee')])

# The same rules apply for removing items from a many-to-many:
huey.courses.remove(Course.select().where(Course.name.startswith('CS')))

engl_101.students.remove(huey)

# Calling .clear() will remove all associated objects:
cs_150.students.clear()
```

----------------------------------------

TITLE: Querying Tweets with Author using JOIN (Peewee, Python)
DESCRIPTION: This snippet demonstrates how to fetch recent tweets along with their authors in a single query using Peewee's `select` and `join` methods. It selects both the `Tweet` and `User` models and joins them on the foreign key. Accessing `tweet.user.username` after this query does not trigger an additional query because the user data is already loaded.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_39

LANGUAGE: python
CODE:
```
query = (Tweet
             .select(Tweet, User)  # Note that we are selecting both models.
             .join(User)  # Use an INNER join because every tweet has an author.
             .order_by(Tweet.id.desc())  # Get the most recent tweets.
             .limit(10))

    for tweet in query:
        print(tweet.user.username, '-', tweet.message)
```

----------------------------------------

TITLE: Listing Related Records with Peewee Join (Avoiding N+1) (Python)
DESCRIPTION: Demonstrates how to avoid the N+1 problem when accessing related models by explicitly joining the related table in the `select` query and selecting both models. This fetches related data in a single query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_15

LANGUAGE: python
CODE:
```
query = (Pet
             .select(Pet, Person)
             .join(Person)
             .where(Pet.animal_type == 'cat'))

for pet in query:
    print(pet.name, pet.owner.name)
```

----------------------------------------

TITLE: Combining Peewee Expressions with AND and OR (Python)
DESCRIPTION: Illustrates how to combine multiple Peewee comparison expressions using the bitwise AND (`&`) and OR (`|`) operators. Parentheses are used to control operator precedence, allowing for complex conditional logic in queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_9

LANGUAGE: python
CODE:
```
# User is both and admin and has logged in today
(User.is_admin == True) & (User.last_login >= today)
```

LANGUAGE: python
CODE:
```
# User's username is either charlie or charles
(User.username == 'charlie') | (User.username == 'charles')
```

----------------------------------------

TITLE: Updating a Peewee Model Instance (Python)
DESCRIPTION: Illustrates how to modify an attribute of a model instance and persist the changes to the database using the `save()` method. This updates the corresponding record in the database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_10

LANGUAGE: python
CODE:
```
herb_fido.owner = uncle_bob
herb_fido.save()
```

----------------------------------------

TITLE: Saving a Model Instance with save - Peewee Python
DESCRIPTION: Shows the basic usage of the `save` method on a model instance to persist changes to the database. Changes made to the instance attributes are not reflected in the database until `save()` is called.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_118

LANGUAGE: python
CODE:
```
user = User()
user.username = 'some-user'  # does not touch the database
user.save()  # change is persisted to the db
```

----------------------------------------

TITLE: Updating Peewee Model Instance - Python
DESCRIPTION: Modifies an attribute of an existing Person model instance in memory and then persists the change to the database using the save() method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_6

LANGUAGE: python
CODE:
```
grandma.name = 'Grandma L.'
grandma.save()  # Update grandma's name in the database.
# Returns: 1
```

----------------------------------------

TITLE: Delete Rows with Where Clause using Peewee Python
DESCRIPTION: Demonstrates creating and executing a DELETE query using the `delete` class method with a `where` clause to remove specific rows (inactive users).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_105

LANGUAGE: python
CODE:
```
q = User.delete().where(User.active == False)
q.execute()  # Remove the rows, return number of rows removed.
```

----------------------------------------

TITLE: Listing All Peewee Records (Python)
DESCRIPTION: Demonstrates how to retrieve all records from a model by iterating directly over the result of a simple `Model.select()` query. This fetches all rows from the corresponding table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_13

LANGUAGE: python
CODE:
```
for person in Person.select():
    print(person.name)
```

----------------------------------------

TITLE: Fetch Related Data Efficiently with Prefetch (Peewee, Python)
DESCRIPTION: This snippet uses the prefetch method to efficiently retrieve a list of related records (pets) for each main record (person) in separate queries, avoiding the N+1 problem and duplication. It iterates through persons and then their associated list of pets.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_25

LANGUAGE: python
CODE:
```
query = Person.select().order_by(Person.name).prefetch(Pet)
    for person in query:
        print(person.name)
        for pet in person.pets:
            print('  *', pet.name)
```

----------------------------------------

TITLE: Inserting Single Row into Table - Peewee
DESCRIPTION: This Peewee snippet demonstrates two ways to insert a single row into the Facility table: using a dictionary mapping fields to values, or using keyword arguments. Both methods insert the 'Spa' facility data.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_26

LANGUAGE: python
CODE:
```
res = Facility.insert({
        Facility.facid: 9,
        Facility.name: 'Spa',
        Facility.membercost: 20,
        Facility.guestcost: 30,
        Facility.initialoutlay: 100000,
        Facility.monthlymaintenance: 800}).execute()

    # OR:
    res = (Facility
           .insert(facid=9, name='Spa', membercost=20, guestcost=30,
                   initialoutlay=100000, monthlymaintenance=800)
           .execute())
```

----------------------------------------

TITLE: Initializing PostgresqlDatabase in Python
DESCRIPTION: Example showing how to initialize a PostgresqlDatabase instance with connection parameters like user, host, and password.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_1

LANGUAGE: python
CODE:
```
# Postgresql database on remote host.
db = PostgresqlDatabase('my_app', user='postgres', host='10.1.0.3',
                                password='secret')
```

----------------------------------------

TITLE: Defining Model Fields (Python)
DESCRIPTION: The `Field` class describes the mapping of Model attributes to database columns. Fields are defined as class attributes. Peewee handles conversion between python data types and underlying storage. If no field is initialized with `primary_key=True`, an auto-incrementing primary key named 'id' is automatically created.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_4

LANGUAGE: python
CODE:
```
class User(Model):
    username = CharField()
    join_date = DateTimeField()
    about_me = TextField()
```

----------------------------------------

TITLE: Combining Peewee Filters with Bitwise Operators
DESCRIPTION: Demonstrates how to combine multiple conditions in the .where() clause using Python's bitwise OR (|) and AND (&) operators to build complex queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_48

LANGUAGE: python
CODE:
```
>>> Tweet.select().join(User).where(
...     (User.username == 'Charlie') |
...     (User.username == 'Peewee Herman'))
```

----------------------------------------

TITLE: Defining Model with Meta Class - Peewee Python
DESCRIPTION: Shows a standard Peewee model definition including a `Meta` class. The `Meta` class is used to configure model-specific options, such as the database connection or enabling features like `only_save_dirty`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_119

LANGUAGE: python
CODE:
```
class Person(Model):
    first_name = CharField()
    last_name = CharField()
    dob = DateField()

    class Meta:
        database = db
```

----------------------------------------

TITLE: Filtering Records with OR in WHERE Clause Peewee Python
DESCRIPTION: This example shows how to combine multiple conditions in a `where` clause using the bitwise OR operator (`|`) to select records matching any of the specified criteria.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_39

LANGUAGE: python
CODE:
```
sq = Tweet.select().join(User).where(
    (User.is_editor == True) |
    (User.is_admin == True))
```

----------------------------------------

TITLE: Full User Login Upsert Function with on_conflict and EXCLUDED in Peewee
DESCRIPTION: Defines a `User` model with email, login details, and IP log. The `login` function uses `Insert.on_conflict` with `conflict_target` on email, `preserve` for `last_login`, and `update` to increment `login_count` and prepend the new IP using `EXCLUDED.ip_log` and `fn.CONCAT`. Demonstrates calling the function multiple times to show upsert behavior. Requires `datetime` and `peewee.fn`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_29

LANGUAGE: python
CODE:
```
class User(Model):
    email = CharField(unique=True)  # Unique identifier for user.
    last_login = DateTimeField()
    login_count = IntegerField(default=0)
    ip_log = TextField(default='')


# Demonstrates the above 4 concepts.
def login(email, ip):
    rowid = (User
             .insert({User.email: email,
                      User.last_login: datetime.now(),
                      User.login_count: 1,
                      User.ip_log: ip})
             .on_conflict(
                 # If the INSERT fails due to a constraint violation on the
                 # user email, then perform an UPDATE instead.
                 conflict_target=[User.email],

                 # Set the "last_login" to the value we would have inserted
                 # (our call to datetime.now()).
                 preserve=[User.last_login],

                 # Increment the user's login count and prepend the new IP
                 # to the user's ip history.
                 update={User.login_count: User.login_count + 1,
                         User.ip_log: fn.CONCAT(EXCLUDED.ip_log, ',', User.ip_log)})
             .execute())

    return rowid

# This will insert the initial row, returning the new row id (1).
print(login('test@example.com', '127.1'))

# Because test@example.com exists, this will trigger the UPSERT. The row id
# from above is returned again (1).
print(login('test@example.com', '127.2'))

u = User.get()
print(u.login_count, u.ip_log)

# Prints "2 127.2,127.1"
```

----------------------------------------

TITLE: Filtering Peewee Records Across Joins
DESCRIPTION: Shows how to apply filters in the .where() clause that reference fields from a joined table. This example filters tweets based on the associated user's username.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_47

LANGUAGE: python
CODE:
```
>>> for tweet in Tweet.select().join(User).where(User.username == 'Charlie'):
...     print(tweet.message)
hello world
this is fun
look at this picture of my food
```

----------------------------------------

TITLE: Delete Row by ID (SQL/Peewee)
DESCRIPTION: Demonstrates deleting a specific row from the 'members' table based on its primary key (memid = 37) using raw SQL and Peewee ORM.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_32

LANGUAGE: sql
CODE:
```
DELETE FROM members WHERE memid = 37;
```

LANGUAGE: python
CODE:
```
nrows = Member.delete().where(Member.memid == 37).execute()
```

----------------------------------------

TITLE: Peewee Transaction with atomic Context Manager (Rollback on Exception)
DESCRIPTION: Demonstrates how the `Database.atomic()` context manager handles exceptions. If an unhandled exception occurs within the `with` block, the current transaction or savepoint is automatically rolled back before the exception is re-raised.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_61

LANGUAGE: python
CODE:
```
# Unhandled exceptions will cause transaction to be rolled-back:
with db.atomic() as txn:
    User.create(username='huey')
    # User has been INSERTed into the database but the transaction is not
    # yet committed because we haven't left the scope of the "with" block.

    raise ValueError('uh-oh')
    # This exception is unhandled - the transaction will be rolled-back and
    # the ValueError will be raised.
```

----------------------------------------

TITLE: Using Peewee transaction as Context Manager
DESCRIPTION: Demonstrates using `db.transaction()` as a context manager for explicit transaction control. Operations within the block are part of a transaction that is committed upon exiting the block, unless an exception occurs.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_67

LANGUAGE: python
CODE:
```
db = SqliteDatabase(':memory:')

with db.transaction() as txn:
    # Delete the user and their associated tweets.
    user.delete_instance(recursive=True)
```

----------------------------------------

TITLE: Using prefetch for Efficient Related Data Retrieval (Peewee, Python)
DESCRIPTION: Illustrates the use of peewee.prefetch to fetch a collection of parent objects (Users) and their related child objects (Tweets) efficiently. It avoids N+1 query issues by fetching related data in bulk.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_134

LANGUAGE: Python
CODE:
```
query = User.select()
for user in prefetch(query, Tweet):
    print(user.username)
    for tweet in user.tweets:  # Does not require additional query.
        print('    ', tweet.content)
```

----------------------------------------

TITLE: Deleting Data with Where Clause in Peewee (Python)
DESCRIPTION: Shows the basic syntax for deleting rows from a Peewee model. The delete() method is used, and the where clause specifies which rows to remove. The execute() method performs the deletion and returns the number of rows deleted.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_15

LANGUAGE: python
CODE:
```
# Delete all notes created before 2018, returning number deleted.
n = Note.delete().where(Note.timestamp < datetime.date(2018, 1, 1)).execute()
```

----------------------------------------

TITLE: Performing Basic Upsert with on_conflict in Peewee (Postgresql/SQLite)
DESCRIPTION: Shows how to define a `User` model and use `Insert.on_conflict` to either create a new user or update an existing one upon login. It uses `conflict_target` to specify the unique constraint (`username`), `preserve` to keep the new `last_login` value, and `update` to increment `login_count`. Requires `datetime`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_27

LANGUAGE: python
CODE:
```
class User(Model):
    username = TextField(unique=True)
    last_login = DateTimeField(null=True)
    login_count = IntegerField()

# Insert a new user.
User.create(username='huey', login_count=0)

# Simulate the user logging in. The login count and timestamp will be
# either created or updated correctly.
now = datetime.now()
rowid = (User
         .insert(username='huey', last_login=now, login_count=1)
         .on_conflict(
             conflict_target=[User.username],  # Which constraint?
             preserve=[User.last_login],  # Use the value we would have inserted.
             update={User.login_count: User.login_count + 1})
         .execute())
```

----------------------------------------

TITLE: Connecting to MySQL and Defining Models (Peewee) - Python
DESCRIPTION: This example shows how to connect to a MySQL database using Peewee's `MySQLDatabase` class. It then defines a `BaseModel` that uses this connection and a simple `User` model inheriting from the base, illustrating how to associate models with the database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_20

LANGUAGE: python
CODE:
```
mysql_db = MySQLDatabase('my_database')

class BaseModel(Model):
    """A base model that will use our MySQL database"""
    class Meta:
        database = mysql_db

class User(BaseModel):
    username = CharField()
    # etc, etc
```

----------------------------------------

TITLE: Using Peewee Database as Context Manager (Pycon)
DESCRIPTION: Demonstrates using the Peewee Database object as a context manager to automatically open and close a connection, and manage a transaction within the 'with' block.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_39

LANGUAGE: pycon
CODE:
```
>>> db.is_closed()
True
>>> with db:
...     print(db.is_closed())  # db is open inside context manager.
...
False
>>> db.is_closed()  # db is closed.
True
```

----------------------------------------

TITLE: Querying Users with Tweet Count in Peewee
DESCRIPTION: Demonstrates how to select users and annotate the query with a count of associated tweets using `fn.Count` and `alias`. It then shows how to order the results by this calculated count using `SQL` or `fn.COUNT`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_20

LANGUAGE: python
CODE:
```
# We'll query the user table and annotate it with a count of tweets for
# the given user
query = (User
             .select(User, fn.Count(Tweet.id).alias('ct'))
             .join(Tweet)
             .group_by(User))

# Now we will order by the count, which was aliased to "ct"
query = query.order_by(SQL('ct'))

# You could, of course, also write this as:
query = query.order_by(fn.COUNT(Tweet.id))
```

----------------------------------------

TITLE: Creating Peewee Model Instance (Python)
DESCRIPTION: Demonstrates how to create a single model instance using the `Model.create()` class method, which is a shorthand for instantiation and saving.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_106

LANGUAGE: python
CODE:
```
user = User.create(username='admin', password='test')
```

----------------------------------------

TITLE: Implementing Thread-Safe Database Binding in Peewee (Python)
DESCRIPTION: Shows how to configure Peewee models for thread-safe database binding in multi-threaded applications by using the `ThreadSafeDatabaseMetadata` class from `playhouse.shortcuts` within the model's `Meta` class.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_32

LANGUAGE: python
CODE:
```
from peewee import *
from playhouse.shortcuts import ThreadSafeDatabaseMetadata

class BaseModel(Model):
    class Meta:
        # Instruct peewee to use our thread-safe metadata implementation.
        model_metadata_class = ThreadSafeDatabaseMetadata
```

----------------------------------------

TITLE: Peewee: Basic OR condition in Python
DESCRIPTION: Demonstrates combining equality comparisons using the OR operator ('|') in a Peewee expression.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_10

LANGUAGE: python
CODE:
```
(User.username == 'charlie') | (User.username == 'charles')
```

----------------------------------------

TITLE: Getting a Single Object with Select and Get - Peewee Python
DESCRIPTION: Demonstrates how to use `select().where().get()` to retrieve a single object based on conditions. It shows chaining `where` clauses and handling the `DoesNotExist` exception when no matching object is found.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_113

LANGUAGE: python
CODE:
```
active = User.select().where(User.active == True)
try:
    user = active.where(
        (User.username == username) &
        (User.active == True)
    ).get()
except User.DoesNotExist:
    user = None
```

----------------------------------------

TITLE: Using Peewee atomic as Decorator
DESCRIPTION: Shows how to use `db.atomic()` as a decorator for a function. The function's execution will be wrapped in a transaction. If the function is called from within an existing `atomic` block, a savepoint will be used instead.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_65

LANGUAGE: python
CODE:
```
@db.atomic()
def create_user(username):
    # This statement will run in a transaction. If the caller is already
    # running in an `atomic` block, then a savepoint will be used instead.
    return User.create(username=username)

create_user('charlie')
```

----------------------------------------

TITLE: Accessing Related Models via Foreign Keys and Back-references (Python)
DESCRIPTION: Illustrates how accessing a foreign key attribute on a model instance returns the related model instance, while accessing a back-reference attribute returns a Peewee Select query object.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_39

LANGUAGE: Python
CODE:
```
tweet = Tweet.get()
tweet.user

user = User.get()
user.tweets
```

----------------------------------------

TITLE: Creating Multiple Peewee Model Instances - Python
DESCRIPTION: Creates and saves two new Person instances to the database using the create() class method, which combines instantiation and saving.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_5

LANGUAGE: python
CODE:
```
grandma = Person.create(name='Grandma', birthday=date(1935, 3, 1))
herb = Person.create(name='Herb', birthday=date(1950, 5, 5))
```

----------------------------------------

TITLE: Accessing Related Many-to-One Data via Join in Peewee (Python)
DESCRIPTION: This example shows how selecting columns from both the main model (`Tweet`) and a related many-to-one model (`User`) in a join allows efficient access to related attributes (`tweet.user.username`) without requiring a separate query or the `prefetch` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_132

LANGUAGE: python
CODE:
```
query = (Tweet
         .select(Tweet, User)
         .join(User))
for tweet in query:
    # Looking up tweet.user.username does not require a query since
    # the related user's columns were selected.
```

----------------------------------------

TITLE: Iterating Peewee Query Results with iterator() (Python)
DESCRIPTION: This snippet demonstrates how to use the `iterator()` method on a Peewee query. It shows how to execute a select query and iterate over the results without caching all rows in memory, which is useful for large datasets. The example specifically selects data from `StatTbl`, orders it by timestamp, returns results as tuples, and iterates through them using the `iterator` method, passing a database connection `db`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_36

LANGUAGE: python
CODE:
```
query = StatTbl.select().order_by(StatTbl.timestamp).tuples()
for row in query.iterator(db):
    process_row(row)
```

----------------------------------------

TITLE: Aggregating Data with COUNT and Group By in Peewee
DESCRIPTION: Queries for the number of notes created by each person. It uses the 'fn.COUNT' function for aggregation, joins 'Person' and 'Note' tables, groups results by the concatenated name, and orders by the note count in descending order.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_5

LANGUAGE: python
CODE:
```
name = Person.first.concat(' ').concat(Person.last)
query = (Person
             .select(name.alias('name'), fn.COUNT(Note.id).alias('count'))
             .join(Note, JOIN.LEFT_OUTER, on=(Note.person_id == Person.id))
             .group_by(name)
             .order_by(fn.COUNT(Note.id).desc()))
    for row in query:
        print(row['name'], row['count'])
```

----------------------------------------

TITLE: Bulk Insert (Model.insert_many) within Transaction (Peewee, Python)
DESCRIPTION: Combines the efficiency of `Model.insert_many` with the safety and performance benefits of wrapping the operation within a database transaction using `db.atomic()`. This is the recommended approach for large bulk inserts.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_9

LANGUAGE: python
CODE:
```
# You can, of course, wrap this in a transaction as well:
with db.atomic():
    MyModel.insert_many(data, fields=fields).execute()
```

----------------------------------------

TITLE: Managing Peewee Connection in Sanic Middleware
DESCRIPTION: Illustrates how to handle Peewee database connections in a Sanic application using request and response middleware. The `handle_request` middleware opens the connection before processing the request, and the `handle_response` middleware closes it after the response is generated.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_58

LANGUAGE: python
CODE:
```
# app.py
@app.middleware('request')
async def handle_request(request):
    db.connect()

@app.middleware('response')
async def handle_response(request, response):
    if not db.is_closed():
        db.close()
```

----------------------------------------

TITLE: Aggregate Related Data with COUNT and LEFT JOIN (Peewee, Python)
DESCRIPTION: This snippet demonstrates how to perform a left outer join and use the SQL COUNT function to aggregate related records (pets) for each main record (person). It groups the results by person and orders them by name, attaching the count as a model attribute.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_23

LANGUAGE: python
CODE:
```
query = (Person
             .select(Person, fn.COUNT(Pet.id).alias('pet_count'))
             .join(Pet, JOIN.LEFT_OUTER)  # include people without pets.
             .group_by(Person)
             .order_by(Person.name))

    for person in query:
        # "pet_count" becomes an attribute on the returned model instances.
        print(person.name, person.pet_count, 'pets')
```

----------------------------------------

TITLE: Filtering Rows with Multiple Conditions (SQL and Peewee)
DESCRIPTION: Shows how to filter rows based on multiple conditions (`membercost > 0 AND membercost < (monthlymaintenance / 50)`). The SQL uses `AND` in the `WHERE` clause, while Peewee uses the bitwise AND operator (`&`) to combine conditional expressions within the `.where()` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_5

LANGUAGE: sql
CODE:
```
SELECT facid, name, membercost, monthlymaintenance
FROM facilities
WHERE membercost > 0 AND membercost < (monthlymaintenance / 50)
```

LANGUAGE: python
CODE:
```
query = (Facility
             .select(Facility.facid, Facility.name, Facility.membercost,
                     Facility.monthlymaintenance)
             .where(
                 (Facility.membercost > 0) &
                 (Facility.membercost < (Facility.monthlymaintenance / 50))))
```

----------------------------------------

TITLE: Prefetching Users and Tweets (Peewee, Python)
DESCRIPTION: This example shows how to use the `prefetch` function in Peewee to load users and their related tweets with a limited number of queries (one for users, one for tweets). It fetches users and tweets separately based on a time condition, then `prefetch` associates the tweets with the correct users, making `user.tweets` accessible without triggering further queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_40

LANGUAGE: python
CODE:
```
week_ago = datetime.date.today() - datetime.timedelta(days=7)
    users = User.select()
    tweets = (
        Tweet
        .select()
        .where(Tweet.timestamp >= week_ago))

    # This will perform two queries.
    users_with_tweets = prefetch(users, tweets)

    for user in users_with_tweets:
        print(user.username)
        for tweet in user.tweets:
            print('  ', tweet.message)
```

----------------------------------------

TITLE: Correctly Defining Auto-Incrementing PK (Peewee, Python)
DESCRIPTION: Shows the correct way to define an auto-incrementing integer primary key in Peewee using AutoField, which implies primary_key=True automatically.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_54

LANGUAGE: python
CODE:
```
class MyModel(Model):
    id = AutoField()  # primary_key=True is implied.
```

----------------------------------------

TITLE: Accessing Peewee Database Instance and Using Atomic Transactions (Python)
DESCRIPTION: Demonstrates how to obtain the underlying Peewee database instance from the FlaskDB wrapper using the `.database` attribute and use it within a Flask route, specifically showing the use of the `atomic()` method for database transactions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_156

LANGUAGE: python
CODE:
```
# Obtain a reference to the Peewee database instance.
peewee_db = db_wrapper.database

@app.route('/transfer-funds/', methods=['POST'])
def transfer_funds():
    with peewee_db.atomic():
        # ...

    return jsonify({'transfer-id': xid})
```

----------------------------------------

TITLE: Defining and Adding Indexes to a Peewee Model (Python)
DESCRIPTION: Illustrates how to define complex indexes on a Peewee model using the `index()` classmethod, including unique indexes and indexes with WHERE clauses. It also shows how to add the defined index to the model's definition using `add_index()`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_122

LANGUAGE: python
CODE:
```
class Article(Model):
    name = TextField()
    timestamp = TimestampField()
    status = IntegerField()
    flags = BitField()

    is_sticky = flags.flag(1)
    is_favorite = flags.flag(2)

# CREATE INDEX ... ON "article" ("name", "timestamp" DESC)
idx = Article.index(Article.name, Article.timestamp.desc())

# Be sure to add the index to the model:
Article.add_index(idx)

# CREATE UNIQUE INDEX ... ON "article" ("timestamp" DESC, "flags" & 2)
# WHERE ("status" = 1)
idx = (Article
       .index(Article.timestamp.desc(),
              Article.flags.bin_and(2),
              unique=True)
       .where(Article.status == 1))

# Add index to model:
Article.add_index(idx)
```

----------------------------------------

TITLE: Configuring Peewee Query Logging (Python)
DESCRIPTION: Shows how to configure Python's standard `logging` module to capture and print SQL queries executed by Peewee. It sets the logger for the 'peewee' namespace to DEBUG level and adds a `StreamHandler` to output logs to stderr.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_72

LANGUAGE: python
CODE:
```
# Print all queries to stderr.
import logging
logger = logging.getLogger('peewee')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Creating a Model Table in Peewee (Python)
DESCRIPTION: Shows how to execute the SQL query to create the database table corresponding to a Peewee model. It is typically done within a database context manager.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_121

LANGUAGE: python
CODE:
```
with database:
    SomeModel.create_table()  # Execute the create table query.
```

----------------------------------------

TITLE: Managing Peewee Connections in Flask - Python
DESCRIPTION: Demonstrates how to use Flask's `@app.before_request` and `@app.teardown_request` decorators to automatically open a Peewee database connection at the start of each request and close it at the end, ensuring proper connection handling throughout the request lifecycle. It uses a `SqliteDatabase` as an example.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_46

LANGUAGE: python
CODE:
```
from flask import Flask
from peewee import *

database = SqliteDatabase('my_app.db')
app = Flask(__name__)

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    database.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not database.is_closed():
        database.close()
```

----------------------------------------

TITLE: Defining Many-to-Many Models in Peewee (Python)
DESCRIPTION: Defines three Peewee models (Photo, Tag, PhotoTag) to represent a many-to-many relationship between photos and tags. PhotoTag acts as the intermediary table using ForeignKeyField to link photos and tags.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_70

LANGUAGE: python
CODE:
```
class Photo(Model):
 image = CharField()

class Tag(Model):
 name = CharField()

class PhotoTag(Model):
 photo = ForeignKeyField(Photo)
 tag = ForeignKeyField(Tag)
```

----------------------------------------

TITLE: Defining Custom Field as Primary Key (Peewee, Python)
DESCRIPTION: Illustrates how to designate a specific field, like an email address, as the primary key for a Peewee model by setting primary_key=True on the field definition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_52

LANGUAGE: python
CODE:
```
class Person(Model):
    email = CharField(primary_key=True)
    name = TextField()
    dob = DateField()
```

----------------------------------------

TITLE: Bulk Updating Model Instances (Peewee, Python)
DESCRIPTION: Demonstrates how to update multiple existing model instances efficiently using `Model.bulk_update` by providing a list of modified instances and specifying the fields to be updated.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_13

LANGUAGE: python
CODE:
```
# First, create 3 users with usernames u1, u2, u3.
u1, u2, u3 = [User.create(username='u%s' % i) for i in (1, 2, 3)]

# Now we'll modify the user instances.
u1.username = 'u1-x'
u2.username = 'u2-y'
u3.username = 'u3-z'

# Update all three users with a single UPDATE query.
User.bulk_update([u1, u2, u3], fields=[User.username])
```

----------------------------------------

TITLE: Batch Inserting Data with Peewee batch_commit (Python)
DESCRIPTION: Demonstrates using the `db.batch_commit` method to iterate over data and insert rows, automatically committing transactions every `n` items. Useful for processing large datasets in batches. Requires an iterable of data and the batch size.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_6

LANGUAGE: python
CODE:
```
# Some list or iterable containing data to insert.
row_data = [{'username': 'u1'}, {'username': 'u2'}, ...]

# Insert all data, committing every 100 rows. If, for example,
# there are 789 items in the list, then there will be a total of
# 8 transactions (7x100 and 1x89).
for row in db.batch_commit(row_data, 100):
    User.create(**row)
```

----------------------------------------

TITLE: Simple Aggregation (MAX) in SQL and Peewee
DESCRIPTION: Shows how to find the maximum value of a column (specifically, the latest join date) using SQL's MAX() aggregate function and Peewee's fn.MAX() function.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_12

LANGUAGE: sql
CODE:
```
SELECT MAX(join_date) FROM members;
```

LANGUAGE: python
CODE:
```
query = Member.select(fn.MAX(Member.joindate))
# To conveniently obtain a single scalar value, use "scalar()":
# max_join_date = query.scalar()
```

----------------------------------------

TITLE: Creating Record with Foreign Key (Model Instance) (Peewee, Python)
DESCRIPTION: Illustrates creating a new record where a foreign key field is assigned directly using an existing model instance. Peewee automatically uses the primary key of the assigned model instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_2

LANGUAGE: pycon
CODE:
```
>>> tweet = Tweet.create(user=huey, message='Hello!')
```

----------------------------------------

TITLE: Using get_or_create Class Method - Peewee Python
DESCRIPTION: Demonstrates the use of the `get_or_create` class method to atomically retrieve an object if it exists or create it if it doesn't. It takes filter arguments and optional default values for creation, returning the object and a boolean indicating if it was created.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_117

LANGUAGE: python
CODE:
```
person, created = Person.get_or_create(
    first_name='John',
    last_name='Lennon',
    defaults={'birthday': datetime.date(1940, 10, 9)})
```

----------------------------------------

TITLE: Peewee Transaction with atomic Context Manager (Success)
DESCRIPTION: Shows the basic usage of the `Database.atomic()` context manager for managing transactions. Statements within the `with` block are executed within a transaction, which is automatically committed upon successful exit from the block.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_60

LANGUAGE: python
CODE:
```
# Transaction will commit automatically at the end of the "with" block:
with db.atomic() as txn:
    User.create(username='u1')
```

----------------------------------------

TITLE: Defining Peewee Models for PostgreSQL Schema
DESCRIPTION: Defines Peewee ORM models (`BaseModel`, `Member`, `Facility`, `Booking`) that map to the tables in the PostgreSQL Exercises database schema. It demonstrates the use of various field types like AutoField, CharField, IntegerField, ForeignKeyField, DateTimeField, and DecimalField, including setting table names and foreign key column names explicitly for compatibility.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_0

LANGUAGE: python
CODE:
```
from functools import partial
from peewee import *


db = PostgresqlDatabase('peewee_test')

class BaseModel(Model):
    class Meta:
        database = db

class Member(BaseModel):
    memid = AutoField()  # Auto-incrementing primary key.
    surname = CharField()
    firstname = CharField()
    address = CharField(max_length=300)
    zipcode = IntegerField()
    telephone = CharField()
    recommendedby = ForeignKeyField('self', backref='recommended',
                                    column_name='recommendedby', null=True)
    joindate = DateTimeField()

    class Meta:
        table_name = 'members'


# Conveniently declare decimal fields suitable for storing currency.
MoneyField = partial(DecimalField, decimal_places=2)


class Facility(BaseModel):
    facid = AutoField()
    name = CharField()
    membercost = MoneyField()
    guestcost = MoneyField()
    initialoutlay = MoneyField()
    monthlymaintenance = MoneyField()

    class Meta:
        table_name = 'facilities'


class Booking(BaseModel):
    bookid = AutoField()
    facility = ForeignKeyField(Facility, column_name='facid')
    member = ForeignKeyField(Member, column_name='memid')
    starttime = DateTimeField()
    slots = IntegerField()

    class Meta:
        table_name = 'bookings'
```

----------------------------------------

TITLE: Querying Users with Tweet Count in Peewee (Python)
DESCRIPTION: Constructs a Peewee query to select all users and count their associated tweets. It uses a LEFT OUTER JOIN to include users with zero tweets and groups the results by user. The tweet count is aliased as 'count'.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_69

LANGUAGE: python
CODE:
```
query = (User
 .select(User, fn.Count(Tweet.id).alias('count'))
 .join(Tweet, JOIN.LEFT_OUTER)
 .group_by(User))
```

----------------------------------------

TITLE: Peewee: Query Using Date/Time Field Properties
DESCRIPTION: Shows how to use special properties like `.year`, `.month`, and `.day` available on DateField, TimeField, and DateTimeField within a Peewee query's `where` clause. This example selects the day of events occurring in the current year and month.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_18

LANGUAGE: python
CODE:
```
# Get the current time.
now = datetime.datetime.now()

# Get days that have events for the current month.
Event.select(Event.event_date.day.alias('day')).where(
    (Event.event_date.year == now.year) &
    (Event.event_date.month == now.month))
```

----------------------------------------

TITLE: Counting Total Facilities
DESCRIPTION: Counts the total number of facilities recorded in the database. Provides examples using both standard SQL and the Peewee ORM.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_35

LANGUAGE: sql
CODE:
```
SELECT COUNT(facid) FROM facilities;
```

LANGUAGE: python
CODE:
```
query = Facility.select(fn.COUNT(Facility.facid))
count = query.scalar()

# OR:
count = Facility.select().count()
```

----------------------------------------

TITLE: Selecting with Joins and Conditions in Peewee Python
DESCRIPTION: Illustrates creating a complex select query involving a join between two tables (`Note` and `User`), filtering results with a `where` clause, and ordering the results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_23

LANGUAGE: python
CODE:
```
Note = Table('notes')
query = (Note
 .select(Note.c.content, Note.c.timestamp, User.username)
 .join(User, on=(Note.c.user_id == User.id))
 .where(Note.c.is_published == True)
 .order_by(Note.c.timestamp.desc()))
```

----------------------------------------

TITLE: Prefetching Related Tweets for Users with Peewee (Python)
DESCRIPTION: This example demonstrates using the `prefetch` method on a `User` select query to eagerly load all associated `Tweet` objects for each user. This allows iterating through users and their tweets efficiently without executing separate queries for each user's tweets.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_131

LANGUAGE: python
CODE:
```
# Fetch all Users and prefetch their associated tweets.
query = User.select().prefetch(Tweet)
for user in query:
    print(user.username)
    for tweet in user.tweets:
        print('  *', tweet.content)
```

----------------------------------------

TITLE: Filtering Peewee Records Using Between (Python)
DESCRIPTION: Shows how to filter records based on a range of values for a field using the `.between()` method in the `where()` clause. This is a concise way to check if a value falls within a specified range (inclusive).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_21

LANGUAGE: python
CODE:
```
query = (Person
             .select()
             .where(Person.birthday.between(d1940, d1960)))

for person in query:
    print(person.name, person.birthday)
```

----------------------------------------

TITLE: Initializing Peewee Pooled Database (Python)
DESCRIPTION: Shows how to initialize a pooled database connection using a class from the `playhouse.pool` module, specifying parameters like max connections and timeout.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_43

LANGUAGE: python
CODE:
```
from playhouse.pool import PooledPostgresqlExtDatabase

db = PooledPostgresqlExtDatabase(
    'my_database',
    max_connections=8,
    stale_timeout=300,
    user='postgres')

class BaseModel(Model):
    class Meta:
        database = db
```

----------------------------------------

TITLE: Peewee: Define Model with Lazy-Loaded ForeignKey
DESCRIPTION: Defines a Peewee Model with a ForeignKeyField where lazy loading is explicitly disabled using the `lazy_load=False` parameter. This prevents an extra query when accessing the foreign key attribute directly, returning the ID instead of the related object.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_14

LANGUAGE: python
CODE:
```
class Tweet(Model):
    # ... same fields, except we declare the user FK to have
    # lazy-load disabled:
    user = ForeignKeyField(User, backref='tweets', lazy_load=False)
```

----------------------------------------

TITLE: Filtering Rows with a WHERE Clause (SQL and Peewee)
DESCRIPTION: Demonstrates how to filter rows based on a simple condition (`membercost > 0`) to retrieve facilities that have a cost for members. The SQL uses a `WHERE` clause, and Peewee uses the `.where()` method with a model field comparison.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_4

LANGUAGE: sql
CODE:
```
SELECT * FROM facilities WHERE membercost > 0
```

LANGUAGE: python
CODE:
```
query = Facility.select().where(Facility.membercost > 0)
```

----------------------------------------

TITLE: Managing Peewee Connections with Tornado RequestHandler
DESCRIPTION: Creates a custom `PeeweeRequestHandler` by extending Tornado's base `RequestHandler`. It overrides the `prepare` method to connect to the database before request processing and the `on_finish` method to close the database connection after the response is sent, providing connection management within the request lifecycle.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_52

LANGUAGE: python
CODE:
```
from tornado.web import RequestHandler

db = SqliteDatabase('my_db.db')

class PeeweeRequestHandler(RequestHandler):
    def prepare(self):
        db.connect()
        return super(PeeweeRequestHandler, self).prepare()

    def on_finish(self):
        if not db.is_closed():
            db.close()
        return super(PeeweeRequestHandler, self).on_finish()
```

----------------------------------------

TITLE: Retrieving All Rows from a Table (Python)
DESCRIPTION: Shows two ways to retrieve all data from a table: using the .all() method to get a list, or iterating directly over the Table object.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_80

LANGUAGE: python
CODE:
```
# Retrieve all the users.
users = db['user'].all()

# We can iterate over all rows without calling `.all()`
for user in db['user']:
    print(user['name'])
```

----------------------------------------

TITLE: Adding Related Objects with ManyToManyField (Peewee Python)
DESCRIPTION: Demonstrates how to associate single model instances, lists of instances, or the results of a ModelSelect query with the current instance using the `add` method of a ManyToManyField.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_90

LANGUAGE: python
CODE:
```
# Huey needs to enroll in a bunch of courses, including all
# the English classes, and a couple Comp-Sci classes.
huey = Student.get(Student.name == 'Huey')

# We can add all the objects represented by a query.
english_courses = Course.select().where(
    Course.name.contains('english'))
huey.courses.add(english_courses)

# We can also add lists of individual objects.
cs101 = Course.get(Course.name == 'CS 101')
cs151 = Course.get(Course.name == 'CS 151')
huey.courses.add([cs101, cs151])
```

----------------------------------------

TITLE: Batch Creating Model Instances with bulk_create (Peewee, Python)
DESCRIPTION: Illustrates creating a list of unsaved model instances and inserting them in batches using the `Model.bulk_create` method with a specified `batch_size`, wrapped in a transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_12

LANGUAGE: python
CODE:
```
# Read list of usernames from a file, for example.
with open('user_list.txt') as fh:
    # Create a list of unsaved User instances.
    users = [User(username=line.strip()) for line in fh.readlines()]

# Wrap the operation in a transaction and batch INSERT the users
# 100 at a time.
with db.atomic():
    User.bulk_create(users, batch_size=100)
```

----------------------------------------

TITLE: Sorting Peewee Query Descending (Pycon)
DESCRIPTION: Demonstrates iterating through query results sorted in descending order by a date field using `order_by(field.desc())` in a Python console.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_56

LANGUAGE: pycon
CODE:
```
>>> for t in Tweet.select().order_by(Tweet.created_date.desc()):
...     print(t.pub_date)
...
2011-06-07 14:12:57
2011-06-07 14:08:48
2010-01-01 00:00:00
```

----------------------------------------

TITLE: Creating Data Rows in Peewee Models
DESCRIPTION: This snippet shows two ways to create new records: using the `.create()` class method and instantiating the model and calling `.save()`. It also demonstrates creating a related `Tweet` record.
SOURCE: https://github.com/coleifer/peewee/blob/master/README.rst#_snippet_2

LANGUAGE: python
CODE:
```
charlie = User.create(username='charlie')
huey = User(username='huey')
huey.save()

# No need to set `is_published` or `created_date` since they
# will just use the default values we specified.
Tweet.create(user=charlie, message='My first tweet')
```

----------------------------------------

TITLE: Performing Inner Joins and Filtering in SQL and Peewee
DESCRIPTION: Explains how to combine data from two tables based on a related column (member ID) and filter the results based on conditions in the joined table, using SQL's INNER JOIN and Peewee's .join() method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_14

LANGUAGE: sql
CODE:
```
SELECT starttime FROM bookings
INNER JOIN members ON (bookings.memid = members.memid)
WHERE surname = 'Farrell' AND firstname = 'David';
```

LANGUAGE: python
CODE:
```
query = (Booking
             .select(Booking.starttime)
             .join(Member)
             .where((Member.surname == 'Farrell') &
                    (Member.firstname == 'David')))
```

----------------------------------------

TITLE: Defining Peewee Model with Dynamic DateTime Default (Python)
DESCRIPTION: Demonstrates using a function reference as the `default` value for a field. Peewee calls the function when the object is created to get the default value, useful for dynamic values like the current timestamp.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_8

LANGUAGE: python
CODE:
```
class Message(Model):
    context = TextField()
    timestamp = DateTimeField(default=datetime.datetime.now)
```

----------------------------------------

TITLE: Close Database Connection (Peewee, Python)
DESCRIPTION: This simple snippet shows how to close the database connection using the close method on the database object. This is typically done when the application or request finishes.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_27

LANGUAGE: python
CODE:
```
db.close()
```

----------------------------------------

TITLE: Basic Update Query in Peewee Python
DESCRIPTION: This example demonstrates how to construct and execute a basic UPDATE query using Peewee. It shows updating a column value based on its current value and filtering rows using a WHERE clause.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_55

LANGUAGE: python
CODE:
```
PageView = Table('page_views')
query = (PageView
         .update({PageView.c.page_views: PageView.c.page_views + 1})
         .where(PageView.c.url == url))
query.execute(database)
```

----------------------------------------

TITLE: Implementing Many-to-Many Relationship with Junction Table in Peewee Python
DESCRIPTION: Defines the necessary Peewee models to represent a many-to-many relationship between `Student` and `Course` using an explicit intermediary junction table model, `StudentCourse`, which contains foreign keys to both related models.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_32

LANGUAGE: python
CODE:
```
class Student(Model):
 name = CharField()

class Course(Model):
 name = CharField()

class StudentCourse(Model):
 student = ForeignKeyField(Student)
 course = ForeignKeyField(Course)
```

----------------------------------------

TITLE: Bulk Inserting Users with insert_many
DESCRIPTION: Shows the recommended way to bulk insert data, including explicit primary key values, using the `Model.insert_many` API within an atomic transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_61

LANGUAGE: python
CODE:
```
data = load_user_csv()
fields = [User.id, User.username]
with db.atomic():
    User.insert_many(data, fields=fields).execute()
```

----------------------------------------

TITLE: Accessing Columns via Source.c (Python)
DESCRIPTION: Shows how to use the "magic" c attribute on a Source (like a Table) to access columns and build a select query with filtering and ordering.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_20

LANGUAGE: python
CODE:
```
User = Table('users')
query = (User
         .select(User.c.username)
         .where(User.c.active == True)
         .order_by(User.c.username))
```

----------------------------------------

TITLE: Retrieving Single Record with Peewee Select (Python)
DESCRIPTION: Explains how to fetch a single record from the database by building a `Select` query with a `where` clause and using the `.get()` method. This is useful when you expect only one result.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_11

LANGUAGE: python
CODE:
```
grandma = Person.select().where(Person.name == 'Grandma L.').get()
```

----------------------------------------

TITLE: Bulk Updating with Batch Size and Transaction (Peewee, Python)
DESCRIPTION: Provides a recommended pattern for using `Model.bulk_update` with large lists of objects, wrapping the call in a transaction and specifying a `batch_size` for better performance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_15

LANGUAGE: python
CODE:
```
with database.atomic():
    User.bulk_update(list_of_users, fields=['username'], batch_size=50)
```

----------------------------------------

TITLE: Retrieving Single Record with Peewee Model Get (Python)
DESCRIPTION: Shows a shorthand method to retrieve a single record directly from the `Model` class using the `get()` class method with a filter expression. This is a more concise way to get a single record.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_12

LANGUAGE: python
CODE:
```
grandma = Person.get(Person.name == 'Grandma L.')
```

----------------------------------------

TITLE: Using Peewee Database.atomic as Context Manager
DESCRIPTION: Demonstrates how to use the `Database.atomic()` method as a context manager to wrap database operations within a transaction. Shows how nested `atomic()` calls create savepoints.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_3

LANGUAGE: python
CODE:
```
with db.atomic() as txn:
    perform_operation()

    with db.atomic() as nested_txn:
        perform_another_operation()
```

----------------------------------------

TITLE: Defining a Base Model (Python)
DESCRIPTION: Create a base model class which specifies the database connection. It is good practice to define a base model class to avoid specifying the database for subsequent models. Model configuration is kept namespaced in a special class called `Meta`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_2

LANGUAGE: python
CODE:
```
class BaseModel(Model):
    class Meta:
        database = db
```

----------------------------------------

TITLE: Adding Many-to-Many Relationships (Peewee)
DESCRIPTION: Illustrates two ways to add relationships using ManyToManyField: assigning a query result directly (which replaces existing relationships) and using the add() method (which adds to existing relationships).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_87

LANGUAGE: pycon
CODE:
```
>>> huey.courses = Course.select().where(Course.name.contains('english'))
>>> for course in huey.courses.order_by(Course.name):
...     print(course.name)
English 101
English 151
English 201
English 221

>>> cs_101 = Course.get(Course.name == 'CS 101')
>>> cs_151 = Course.get(Course.name == 'CS 151')
>>> huey.courses.add([cs_101, cs_151])
>>> [course.name for course in huey.courses.order_by(Course.name)]
['CS 101', 'CS151', 'English 101', 'English 151', 'English 201',
 'English 221']
```

----------------------------------------

TITLE: Fastest Bulk Insert (Model.insert_many, Dicts) (Peewee, Python)
DESCRIPTION: Shows the most efficient way to insert multiple rows using `Model.insert_many` with a list of dictionaries. This method generates a single query to insert all data at once, minimizing database interaction overhead.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_7

LANGUAGE: python
CODE:
```
data_source = [
    {'field1': 'val1-1', 'field2': 'val1-2'},
    {'field1': 'val2-1', 'field2': 'val2-2'},
    # ...
]

# Fastest way to INSERT multiple rows.
MyModel.insert_many(data_source).execute()
```

----------------------------------------

TITLE: Querying First Booking After Date (SQL/Peewee)
DESCRIPTION: Retrieves the first booking date after September 1st, 2012 for each member, along with their name and ID. Results are ordered by member ID. Demonstrates joining members and bookings tables and using aggregation (MIN).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_48

LANGUAGE: sql
CODE:
```
SELECT m.surname, m.firstname, m.memid, min(b.starttime) as starttime
FROM members AS m
INNER JOIN bookings AS b ON b.memid = m.memid
WHERE starttime >= '2012-09-01'
GROUP BY m.surname, m.firstname, m.memid
ORDER BY m.memid;
```

LANGUAGE: python
CODE:
```
query = (Member
             .select(Member.surname, Member.firstname, Member.memid,
                     fn.MIN(Booking.starttime).alias('starttime'))
             .join(Booking)
             .where(Booking.starttime >= datetime.date(2012, 9, 1))
             .group_by(Member.surname, Member.firstname, Member.memid)
             .order_by(Member.memid))
```

----------------------------------------

TITLE: Querying with IS NULL and IN using Operator Overloads (Peewee, Python)
DESCRIPTION: Shows how to use the `>>` operator overload for `IS NULL` and the `<<` operator overload for `IN` when building Peewee queries. Requires a list for the `IN` operation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_2

LANGUAGE: python
CODE:
```
# Get all User objects whose last login is NULL.
User.select().where(User.last_login >> None)
```

LANGUAGE: python
CODE:
```
# Get users whose username is in the given list.
usernames = ['charlie', 'huey', 'mickey']
User.select().where(User.username << usernames)
```

----------------------------------------

TITLE: Defining a Sample Peewee Model (Python)
DESCRIPTION: Presents a basic Peewee `Model` definition for a `User` with various field types (`CharField`, `BooleanField`, `DateTimeField`, `IntegerField`). This model serves as the basis for the query examples shown later.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_7

LANGUAGE: python
CODE:
```
class User(Model):
    username = CharField()
    is_admin = BooleanField()
    is_active = BooleanField()
    last_login = DateTimeField()
    login_count = IntegerField()
    failed_logins = IntegerField()
```

----------------------------------------

TITLE: Updating Multiple Records in Peewee (Python)
DESCRIPTION: Illustrates how to perform a bulk update on multiple model instances using Peewee's `Model.update` method combined with a `where` clause. It shows setting a field value (`is_published=True`) based on a condition (`Tweet.creation_date < today`) and executing the query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_20

LANGUAGE: pycon
CODE:
```
>>> today = datetime.today()
>>> query = Tweet.update(is_published=True).where(Tweet.creation_date < today)
>>> query.execute()  # Returns the number of rows that were updated.
4
```

----------------------------------------

TITLE: Creating Database Schema with Peewee
DESCRIPTION: Demonstrates how to create the database tables defined by the Peewee models using the `db.create_tables()` method. This assumes the database itself ('peewee_test') has already been created.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_1

LANGUAGE: python
CODE:
```
# Assumes you have created the database "peewee_test" already.
db.create_tables([Member, Facility, Booking])
```

----------------------------------------

TITLE: Bulk Inserting Data with List of Dictionaries in Peewee (Python)
DESCRIPTION: Illustrates how to insert multiple rows efficiently by passing a list of dictionaries to the insert method. Each dictionary represents a row, and all dictionaries must have the same keys. The method returns the ID of the last inserted row.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_10

LANGUAGE: python
CODE:
```
people = [
    {'first': 'Bob', 'last': 'Foo'},
    {'first': 'Herb', 'last': 'Bar'},
    {'first': 'Nuggie', 'last': 'Bar'}]

# Inserting multiple rows returns the ID of the last-inserted row.
last_id = Person.insert(people).execute()
```

----------------------------------------

TITLE: Selecting with Join and Where Clause in Peewee
DESCRIPTION: Constructs a query that joins the 'Note' and 'Person' tables on the 'person_id' foreign key. It filters notes published from 2018 onwards, orders by timestamp, and requests results as namedtuples, demonstrating how to combine joins and filtering.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_4

LANGUAGE: python
CODE:
```
query = (Note
             .select(Note.content, Note.timestamp, Person.first, Person.last)
             .join(Person, on=(Note.person_id == Person.id))
             .where(Note.timestamp >= datetime.date(2018, 1, 1))
             .order_by(Note.timestamp)
             .namedtuples())

    for row in query:
        print(row.timestamp, '-', row.content, '-', row.first, row.last)
```

----------------------------------------

TITLE: Paginating Peewee Query Results (Pycon)
DESCRIPTION: Demonstrates how to retrieve a specific "page" of results from a sorted query using the `paginate` method, specifying the page number (1-based) and the number of items per page.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_66

LANGUAGE: pycon
CODE:
```
>>> for tweet in Tweet.select().order_by(Tweet.id).paginate(2, 10):
...     print(tweet.message)
...
tweet 10
tweet 11
tweet 12
tweet 13
tweet 14
tweet 15
tweet 16
tweet 17
tweet 18
tweet 19
```

----------------------------------------

TITLE: Creating Peewee Pet Instances with ForeignKey - Python
DESCRIPTION: Creates and saves two new Pet instances to the database, linking them to previously created Person instances using the owner foreign key field.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_7

LANGUAGE: python
CODE:
```
bob_kitty = Pet.create(owner=uncle_bob, name='Kitty', animal_type='cat')
herb_fido = Pet.create(owner=herb, name='Fido', animal_type='dog')
```

----------------------------------------

TITLE: Connecting to SqliteDatabase and Defining Models (Python)
DESCRIPTION: Shows how to connect to a SQLite database using `SqliteDatabase`, specifying the filename and optional pragmas. It also demonstrates defining a base model and a user model that are configured to use this SQLite database instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_9

LANGUAGE: python
CODE:
```
sqlite_db = SqliteDatabase('my_app.db', pragmas={'journal_mode': 'wal'})

    class BaseModel(Model):
        """A base model that will use our Sqlite database."""
        class Meta:
            database = sqlite_db

    class User(BaseModel):
        username = TextField()
        # etc, etc
```

----------------------------------------

TITLE: Updating Object by Primary Key with set_by_id - Peewee Python
DESCRIPTION: Illustrates how to use the `set_by_id` class method to update fields on a model instance identified by its primary key. It takes the primary key and a dictionary mapping field names to new values. No exception is raised if the primary key does not exist.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_115

LANGUAGE: python
CODE:
```
# Set "is_admin" to True on user with id=3.
User.set_by_id(3, {'is_admin': True})
```

----------------------------------------

TITLE: Iterating Query Results in Peewee Python
DESCRIPTION: This snippet demonstrates how to execute a Peewee query and then iterate through the returned data rows, printing information for each row. It shows a common pattern for processing query results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_54

LANGUAGE: python
CODE:
```
data = query.execute()
for row in data:
    print('added:', row.username, 'with id=', row.id)
```

----------------------------------------

TITLE: Updating Data with Keyword Arguments in Peewee (Python)
DESCRIPTION: Demonstrates updating rows in a Peewee model using keyword arguments to specify the columns and their new values. The update is applied to rows matching the criteria defined in the where clause. The execute() method returns the number of rows affected.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_12

LANGUAGE: python
CODE:
```
# "Bob" changed his last name from "Foo" to "Baze".
nrows = (Person
         .update(last='Baze')
         .where((Person.first == 'Bob') &
                (Person.last == 'Foo'))
         .execute())
```

----------------------------------------

TITLE: Connecting via Database URL (Peewee) - Python
DESCRIPTION: This snippet demonstrates using the `playhouse.db_url.connect` function to establish a database connection based on a URL provided via an environment variable (`DATABASE`). If the environment variable is not set, it falls back to connecting to a local SQLite database file named `default.db`. It also shows the start of a `BaseModel` definition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_21

LANGUAGE: python
CODE:
```
import os

from peewee import *
from playhouse.db_url import connect

# Connect to the database URL defined in the environment, falling
# back to a local Sqlite database if no database URL is specified.
db = connect(os.environ.get('DATABASE') or 'sqlite:///default.db')

class BaseModel(Model):
    class Meta:
```

----------------------------------------

TITLE: Bulk Updating Peewee Models with Batching (Python)
DESCRIPTION: Shows how to use `Model.bulk_update()` with a `batch_size` for updating a large number of objects. It emphasizes wrapping the operation in a transaction using `database.atomic()`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_111

LANGUAGE: python
CODE:
```
with database.atomic():
    User.bulk_update(user_list, fields=['username'], batch_size=50)
```

----------------------------------------

TITLE: Iterating Over Peewee Model Instances (Python)
DESCRIPTION: Provides an example of using the `__iter__` method (implicitly via a `for` loop) to fetch all instances of a Model and process them, such as loading settings into a dictionary.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_124

LANGUAGE: python
CODE:
```
Setting.insert_many([
    {'key': 'host', 'value': '192.168.1.2'},
    {'key': 'port': 'value': '1337'},
    {'key': 'user': 'value': 'nuggie'}]).execute()

# Load settings from db into dict.
settings = {setting.key: setting.value for setting in Setting}
```

----------------------------------------

TITLE: Create or Get with get_or_create and Parameters (Peewee) - Python
DESCRIPTION: Illustrates using `Model.get_or_create` where the parameters used for retrieval (`first_name`, `last_name`) are specified directly, and additional parameters for creation (like date-of-birth, favorite color, which would be passed as `defaults` keyword argument, although not shown in this minimal snippet) can also be included. This snippet only shows the retrieval/matching part.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_36

LANGUAGE: python
CODE:
```
person, created = Person.get_or_create(
    first_name=first_name,
    last_name=last_name,
)
```

----------------------------------------

TITLE: Connecting to a Peewee Database (Python)
DESCRIPTION: Demonstrates establishing a connection to a Peewee database instance using the `Database.connect()` method in an interactive Python session. Shows creating an in-memory SQLite database and connecting to it.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_33

LANGUAGE: pycon
CODE:
```
>>> db = SqliteDatabase(':memory:')  # In-memory SQLite database.
>>> db.connect()
True
```

----------------------------------------

TITLE: Peewee: Using aggregate SQL functions (Python)
DESCRIPTION: Demonstrates building a complex Peewee query that uses `fn.COUNT` with an alias, performs a left outer join, groups results by user, and orders by the aggregate count in descending order, then iterates through the results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_17

LANGUAGE: python
CODE:
```
# Get all users and the number of tweets they've authored. Sort the
# results from most tweets -> fewest tweets.
query = (User
         .select(User, fn.COUNT(Tweet.id).alias('tweet_count'))
         .join(Tweet, JOIN.LEFT_OUTER)
         .group_by(User)
         .order_by(fn.COUNT(Tweet.id).desc()))
for user in query:
    print('%s -- %s tweets' % (user.username, user.tweet_count))
```

----------------------------------------

TITLE: Performing Atomic Updates in Peewee (Python)
DESCRIPTION: Illustrates how to perform an atomic update using an expression as the new value for a column. This is useful for operations like incrementing a counter, ensuring the update happens transactionally. The example increments a count column based on its current value.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_14

LANGUAGE: python
CODE:
```
# Do an atomic update:
(PageView
 .update({PageView.count: PageView.count + 1})
 .where(PageView.url == some_url)
 .execute())
```

----------------------------------------

TITLE: Initializing Pooled PostgreSQL Database in Peewee
DESCRIPTION: Example of initializing a connection-pooled PostgreSQL database using `playhouse.pool.PooledPostgresqlExtDatabase`. Configures connection pool parameters such as maximum connections (`max_connections`) and the timeout for stale connections (`stale_timeout`).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_151

LANGUAGE: python
CODE:
```
# Use the special postgresql extensions.
from playhouse.pool import PooledPostgresqlExtDatabase

db = PooledPostgresqlExtDatabase(
    'my_app',
    max_connections=32,
    stale_timeout=300,  # 5 minutes.
    user='postgres')

class BaseModel(Model):
    class Meta:
        database = db
```

----------------------------------------

TITLE: Defining Non-Integer Primary Key (Peewee, Python)
DESCRIPTION: Shows how to use a non-integer field, such as a UUIDField, as the primary key for a Peewee model by setting primary_key=True on the field.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_56

LANGUAGE: python
CODE:
```
from peewee import *

class UUIDModel(Model):
    id = UUIDField(primary_key=True)
```

----------------------------------------

TITLE: Iterating and Printing Peewee Query Results (Python)
DESCRIPTION: This snippet demonstrates iterating over the results of a Peewee query that has been ordered. It prints the 'counter', 'value', and 'rsum' attributes for each row returned by the query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_91

LANGUAGE: python
CODE:
```
for sample in query.order_by(Sample.counter, Sample.value):
    print(sample.counter, sample.value, sample.rsum)
```

----------------------------------------

TITLE: Using Peewee connection_context() as Decorator (Python)
DESCRIPTION: Illustrates using the `Database.connection_context()` method as a decorator to manage the database connection lifecycle around a function call.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_41

LANGUAGE: python
CODE:
```
@db.connection_context()
def prepare_database():
    # DB connection will be managed by the decorator, which opens
    # a connection, calls function, and closes upon returning.
    db.create_tables(MODELS)  # Create schema.
    load_fixture_data(db)
```

----------------------------------------

TITLE: Generating Peewee Models from Database Schema (Python)
DESCRIPTION: Illustrates the process of introspecting a database using `Introspector.from_database` and then generating peewee Model classes dynamically from the schema using `generate_models`. The generated models are returned in a dictionary, keyed by table name.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_148

LANGUAGE: python
CODE:
```
db = SqliteDatabase('my_app.db')
introspector = Introspector.from_database(db)
models = introspector.generate_models()

# User and Tweet (assumed to exist in the database) are
# peewee Model classes generated from the database schema.
User = models['user']
Tweet = models['tweet']
```

----------------------------------------

TITLE: Bulk Creating Peewee Models (Python)
DESCRIPTION: Shows how to efficiently insert multiple unsaved model instances into the database using `Model.bulk_create()`. This example inserts all models in a single query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_107

LANGUAGE: python
CODE:
```
user_list = [User(username='u%s' % i) for i in range(10)]

User.bulk_create(user_list)
```

----------------------------------------

TITLE: Connecting to Database via URL in Peewee
DESCRIPTION: Demonstrates connecting to a database using a URL obtained from an environment variable or falling back to a local SQLite file. Uses `playhouse.db_url.connect` to parse the URL and establish the connection.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_149

LANGUAGE: python
CODE:
```
import os
from playhouse.db_url import connect

# Connect to the database URL defined in the environment, falling
# back to a local Sqlite database if no database URL is specified.
db = connect(os.environ.get('DATABASE') or 'sqlite:///default.db')
```

----------------------------------------

TITLE: Altering Column Type with Peewee Migrator - Python
DESCRIPTION: Uses the `migrator.alter_column_type` operation within the `migrate` function to change the data type of a specified column in a database table, providing the new field instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_136

LANGUAGE: python
CODE:
```
# Change a VARCHAR(50) field to a TEXT field.
migrate(
    migrator.alter_column_type('person', 'email', TextField())
)
```

----------------------------------------

TITLE: Create or Get with get_or_create (Peewee) - Python
DESCRIPTION: Demonstrates the use of the built-in `Model.get_or_create` method in Peewee. This method attempts to retrieve a record based on the provided keyword arguments; if it doesn't exist, it creates a new one. It returns the instance and a boolean indicating if it was created.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_35

LANGUAGE: python
CODE:
```
user, created = User.get_or_create(username=username)
```

----------------------------------------

TITLE: Select Specific Columns and Iterate Over Results - Peewee Python
DESCRIPTION: Provides an example of building a basic Peewee `SELECT` query to fetch specific columns (`id`, `username`) from a `User` model and iterating over the resulting model instances.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_46

LANGUAGE: python
CODE:
```
query = User.select(User.id, User.username)
for user in query:
    print(user.username)
```

----------------------------------------

TITLE: Peewee atomic for Get or Create with Error Handling
DESCRIPTION: Illustrates using `db.atomic()` within a try/except block to perform a 'get or create' operation. If a user with the given username already exists, an `IntegrityError` is caught, preventing the transaction from committing.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_64

LANGUAGE: python
CODE:
```
try:
    with db.atomic():
        user = User.create(username=username)
    return 'Success'
except peewee.IntegrityError:
    return 'Failure: %s is already in use.' % username
```

----------------------------------------

TITLE: Using fn() for Aggregate Functions (Peewee, Python)
DESCRIPTION: Illustrates how to use the `fn()` helper to call SQL aggregate functions like `COUNT` and `MAX` within Peewee queries. The first part counts tweets per user using `COUNT` and orders by the count, while the second part finds the maximum timestamp using `MAX` and retrieves the single scalar result.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_31

LANGUAGE: python
CODE:
```
# List users and the number of tweets they have authored,
# from highest-to-lowest:
sql_count = fn.COUNT(Tweet.id)
query = (User
         .select(User, sql_count.alias('count'))
         .join(Tweet, JOIN.LEFT_OUTER)
         .group_by(User)
         .order_by(sql_count.desc()))

# Get the timestamp of the most recent tweet:
query = Tweet.select(fn.MAX(Tweet.timestamp))
max_timestamp = query.scalar()  # Retrieve scalar result from query.
```

----------------------------------------

TITLE: Listing Related Records with Peewee (N+1 Issue) (Python)
DESCRIPTION: Shows how to query records with a filter and access attributes of related models, highlighting the N+1 query problem where accessing the related model triggers an extra query per row in the loop.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_14

LANGUAGE: python
CODE:
```
query = Pet.select().where(Pet.animal_type == 'cat')
for pet in query:
    print(pet.name, pet.owner.name)
```

----------------------------------------

TITLE: Querying User Relationships with Peewee Python
DESCRIPTION: Provides Python instance methods (`following`, `followers`) on the User model that showcase Peewee's query building capabilities. These methods use `select`, `join`, `where`, and `order_by` to retrieve related User objects based on the `Relationship` model, demonstrating how to perform complex relationship queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_7

LANGUAGE: python
CODE:
```
def following(self):
    # query other users through the "relationship" table
    return (User
            .select()
            .join(Relationship, on=Relationship.to_user)
            .where(Relationship.from_user == self)
            .order_by(User.username))

def followers(self):
    return (User
            .select()
            .join(Relationship, on=Relationship.from_user)
            .where(Relationship.to_user == self)
            .order_by(User.username))
```

----------------------------------------

TITLE: Inserting Data with Keyword Arguments in Peewee (Python)
DESCRIPTION: Shows how to insert a single row into a Peewee model using keyword arguments, mapping column names to values. The execute() method is called to perform the insertion, and the ID of the newly created row is returned.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_8

LANGUAGE: python
CODE:
```
# Using keyword arguments:
zaizee_id = Person.insert(first='zaizee', last='cat').execute()
```

----------------------------------------

TITLE: Efficient Many-to-Many Iteration with Prefetching (Peewee Python)
DESCRIPTION: Illustrates how to query the many-to-many through model (StudentCourse) and use select to include fields from the related Student and Course models. This prefetching allows accessing related objects without additional queries per row, avoiding the N+1 problem.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_36

LANGUAGE: python
CODE:
```
query = (StudentCourse
 .select(StudentCourse, Student, Course)
 .join(Course)
 .switch(StudentCourse)
 .join(Student)
 .order_by(Student.name))
```

----------------------------------------

TITLE: Inserting Rows in Batches with chunked Helper (Peewee, Python)
DESCRIPTION: Shows how to use the `peewee.chunked` helper function to efficiently iterate over a data source in batch-sized chunks and insert them using `insert_many` within a transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_11

LANGUAGE: python
CODE:
```
from peewee import chunked

# Insert rows 100 at a time.
with db.atomic():
    for batch in chunked(data_source, 100):
        MyModel.insert_many(batch).execute()
```

----------------------------------------

TITLE: Filtering Posts with OR and AND Conditions in Peewee (Python)
DESCRIPTION: This example illustrates using the `filter` method with a combination of `DQ` objects for OR conditions and keyword arguments for AND conditions. It retrieves posts that are either 'draft' or 'published' AND were written on or after January 1, 2023.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_130

LANGUAGE: python
CODE:
```
# Get all posts that are draft or published, and written after 2023.
q = Post.filter(
    (DQ(status='draft') | DQ(status='published')),
    timestamp__gte=datetime.date(2023, 1, 1))
```

----------------------------------------

TITLE: Selecting with Joins and Aggregates in Peewee Python
DESCRIPTION: Provides an example of using a `LEFT OUTER JOIN` and an aggregate function (`fn.COUNT`) within a select query to count related records (notes per user) and order by the aggregate result.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_24

LANGUAGE: python
CODE:
```
query = (User
 .select(
 User.username,
 fn.COUNT(Note.c.id).alias('n_notes'))
 .join(
 Note,
 JOIN.LEFT_OUTER,
 on=(User.id == Note.c.user_id))
 .order_by(fn.COUNT(Note.c.id).desc()))
```

----------------------------------------

TITLE: Deleting a Model Instance in Peewee (Python)
DESCRIPTION: Demonstrates how to delete a single model instance using the `delete_instance()` method provided by Peewee models. This action removes the object from the database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_120

LANGUAGE: python
CODE:
```
some_obj.delete_instance()  # it is gone forever
```

----------------------------------------

TITLE: Selecting Tweets by Staff or Superusers via Join in Peewee
DESCRIPTION: Shows how to select tweets and filter them based on whether the author is a staff member or superuser, using a join and combining conditions with the bitwise OR (|) operator in the .where() clause.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_53

LANGUAGE: python
CODE:
```
Tweet.select().join(User).where(
    (User.is_staff == True) | (User.is_superuser == True))
```

----------------------------------------

TITLE: Defining Model and Inserting Sample Data in Peewee (Python)
DESCRIPTION: Defines a simple Peewee model named Sample with integer and float fields. It then demonstrates inserting multiple rows of sample data into the Sample table using the `insert_many` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_76

LANGUAGE: python
CODE:
```
class Sample(Model):
 counter = IntegerField()
 value = FloatField()

data = [(1, 10),
 (1, 20),
 (2, 1),
 (2, 3),
 (3, 100)]
Sample.insert_many(data, fields=[Sample.counter, Sample.value]).execute()
```

----------------------------------------

TITLE: Accessing Raw Peewee ForeignKey ID (Python)
DESCRIPTION: Demonstrates how to access the raw primary key value stored in a foreign key column by appending `_id` to the foreign key field name (e.g., `tweet.user_id`), avoiding fetching the entire related object.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_13

LANGUAGE: python
CODE:
```
tweets = Tweet.select()
for tweet in tweets:
    # Instead of "tweet.user", we will just get the raw ID value stored
```

----------------------------------------

TITLE: Querying Tags with Photo Count Alias in Peewee (Python)
DESCRIPTION: Extends the previous query to include the photo count directly in the result set. It selects the Tag object along with the count of associated photos, aliased as 'count', for tags having more than 5 photos.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_73

LANGUAGE: python
CODE:
```
query = (Tag
 .select(Tag, fn.Count(Photo.id).alias('count'))
 .join(PhotoTag)
 .join(Photo)
 .group_by(Tag)
 .having(fn.Count(Photo.id) > 5))
```

----------------------------------------

TITLE: Enabling SQLite Foreign Key Constraints in Peewee - Python
DESCRIPTION: Configures the SQLite database connection to enforce foreign key constraints using the pragmas dictionary. Recommended to avoid potential data integrity issues.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_3

LANGUAGE: python
CODE:
```
# Ensure foreign-key constraints are enforced.
db = SqliteDatabase('my_app.db', pragmas={'foreign_keys': 1})
```

----------------------------------------

TITLE: Accessing Related Objects via Peewee Back-reference - Python
DESCRIPTION: Illustrates using the foreign key's backref attribute to access related objects (tweets) directly from a parent object (user). The back-reference provides a pre-filtered query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_6

LANGUAGE: python
CODE:
```
huey = User.get(User.username == 'huey')
for tweet in huey.tweets:
    print(tweet.content)
```

----------------------------------------

TITLE: Selecting Tweets by Username via Join in Peewee
DESCRIPTION: Demonstrates selecting tweets and filtering them based on the associated user's username by joining the Tweet and User tables and applying a condition in the .where() clause.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_52

LANGUAGE: python
CODE:
```
Tweet.select().join(User).where(User.username == 'charlie')
```

----------------------------------------

TITLE: Setting Up Peewee Test Case with In-Memory DB (Python)
DESCRIPTION: Provides an example of setting up a test case using an in-memory SQLite database and binding Peewee models to it for testing purposes.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_44

LANGUAGE: python
CODE:
```
# tests.py
import unittest
from my_app.models import EventLog, Relationship, Tweet, User

MODELS = [User, Tweet, EventLog, Relationship]

# use an in-memory SQLite for tests.
test_db = SqliteDatabase(':memory:')

class BaseTestCase(unittest.TestCase):
    def setUp(self):
        # Bind model classes to test db. Since we have a complete list of
        # all models, we do not need to recursively bind dependencies.
        test_db.bind(MODELS, bind_refs=False, bind_backrefs=False)

        test_db.connect()
        test_db.create_tables(MODELS)

    def tearDown(self):
        # Not strictly necessary since SQLite in-memory databases only live
```

----------------------------------------

TITLE: Using Peewee on_conflict with EXCLUDED Namespace (Python)
DESCRIPTION: Illustrates the use of the `EXCLUDED` namespace in peewee's `on_conflict` clause. It defines a `KV` model with a unique key. The example shows an insert query that, on conflict, updates the `value` by adding the `EXCLUDED.value` (the value from the attempted insert) to the existing `KV.value`, but only if the `EXCLUDED.value` is greater than the existing `KV.value`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_60

LANGUAGE: python
CODE:
```
class KV(Model):
    key = CharField(unique=True)
    value = IntegerField()

# Create one row.
KV.create(key='k1', value=1)

# Demonstrate usage of EXCLUDED.
# Here we will attempt to insert a new value for a given key. If that
# key already exists, then we will update its value with the *sum* of its
# original value and the value we attempted to insert -- provided that
# the new value is larger than the original value.
query = (KV.insert(key='k1', value=10)
         .on_conflict(conflict_target=[KV.key],
                      update={KV.value: KV.value + EXCLUDED.value},
                      where=(EXCLUDED.value > KV.value)))

# Executing the above query will result in the following data being
# present in the "kv" table:
# (key='k1', value=11)
query.execute()

# If we attempted to execute the query *again*, then nothing would be
# updated, as the new value (10) is now less than the value in the
# original row (11).
```

----------------------------------------

TITLE: Listing Related Records by Joining Peewee Models (Python)
DESCRIPTION: Shows how to retrieve records from one model by joining it with another related model and filtering based on attributes of the joined model. This is useful for finding records based on related data.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_16

LANGUAGE: python
CODE:
```
for pet in Pet.select().join(Person).where(Person.name == 'Bob'):
    print(pet.name)
```

----------------------------------------

TITLE: Peewee: Performing atomic updates using expressions (Python)
DESCRIPTION: Shows how to use an expression (`User.login_count + 1`) directly in an `update` query to atomically increment a field's value based on its current value.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_14

LANGUAGE: python
CODE:
```
# when a user logs in we want to increment their login count:
User.update(login_count=User.login_count + 1).where(User.id == user_id)
```

----------------------------------------

TITLE: Defining Auto-Incrementing PK with AutoField (Peewee, Python)
DESCRIPTION: Shows how to define an auto-incrementing primary key using AutoField in a Peewee model, allowing a custom field name instead of the default 'id'.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_51

LANGUAGE: python
CODE:
```
class Event(Model):
    event_id = AutoField()  # Event.event_id will be auto-incrementing PK.
    name = CharField()
    timestamp = DateTimeField(default=datetime.datetime.now)
    metadata = BlobField()
```

----------------------------------------

TITLE: Inserting Rows in Batches with Manual Loop (Peewee, Python)
DESCRIPTION: Demonstrates inserting rows in batches using a manual loop and wrapping the operation in a transaction. This approach is recommended for handling large datasets while respecting database limits, particularly in SQLite.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_10

LANGUAGE: python
CODE:
```
# Insert rows 100 at a time.
with db.atomic():
    for idx in range(0, len(data_source), 100):
        MyModel.insert_many(data_source[idx:idx+100]).execute()
```

----------------------------------------

TITLE: Converting Peewee Model to Dictionary (model_to_dict)
DESCRIPTION: Demonstrates how to use the model_to_dict function to serialize a Peewee model instance into a dictionary, showing examples with and without backreferences, and with nested related objects.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_110

LANGUAGE: pycon
CODE:
```
>>> user = User.create(username='charlie')
>>> model_to_dict(user)
{'id': 1, 'username': 'charlie'}
```

LANGUAGE: pycon
CODE:
```
>>> model_to_dict(user, backrefs=True)
{'id': 1, 'tweets': [], 'username': 'charlie'}
```

LANGUAGE: pycon
CODE:
```
>>> t1 = Tweet.create(user=user, message='tweet-1')
>>> t2 = Tweet.create(user=user, message='tweet-2')
>>> model_to_dict(user, backrefs=True)
{
  'id': 1,
  'tweets': [
    {'id': 1, 'message': 'tweet-1'},
    {'id': 2, 'message': 'tweet-2'},
  ],
  'username': 'charlie'
}
```

LANGUAGE: pycon
CODE:
```
>>> model_to_dict(t1)
{
  'id': 1,
  'message': 'tweet-1',
  'user': {
    'id': 1,
    'username': 'charlie'
  }
}
```

LANGUAGE: pycon
CODE:
```
>>> model_to_dict(t2, recurse=False)
{'id': 1, 'message': 'tweet-2', 'user': 1}
```

----------------------------------------

TITLE: Accessing Related Objects via ManyToManyField (Peewee)
DESCRIPTION: Demonstrates accessing related objects (courses for a student, students for a course) directly through the ManyToManyField attribute (huey.courses, engl_101.students) on model instances in an interactive Python session.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_86

LANGUAGE: pycon
CODE:
```
>>> huey = Student.get(Student.name == 'huey')
>>> [course.name for course in huey.courses]
['English 101', 'CS 101']

>>> engl_101 = Course.get(Course.name == 'English 101')
>>> [student.name for student in engl_101.students]
['Huey', 'Mickey', 'Zaizee']
```

----------------------------------------

TITLE: Generate Peewee Models from Existing Database (pwiz, Console)
DESCRIPTION: This console command demonstrates using the pwiz utility to introspect an existing database (postgresql named charles_blog) and automatically generate Peewee model definitions, redirecting the output to a Python file.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_28

LANGUAGE: console
CODE:
```
python -m pwiz -e postgresql charles_blog > blog_models.py
```

----------------------------------------

TITLE: Implementing Simple CTE in Peewee
DESCRIPTION: Demonstrates how to define and use a Common Table Expression (CTE) in Peewee. It shows creating a CTE to calculate the average value per key and then joining it with the main table to find samples with values above their key's average using `with_cte`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_100

LANGUAGE: python
CODE:
```
# First we'll declare the query that will be used as a CTE. This query
# simply determines the average value for each key.
cte = (Sample
           .select(Sample.key, fn.AVG(Sample.value).alias('avg_value'))
           .group_by(Sample.key)
           .cte('key_avgs', columns=('key', 'avg_value')))

# Now we'll query the sample table, using our CTE to find rows whose value
# exceeds the average for the given key. We'll calculate how far above the
# average the given sample's value is, as well.
query = (Sample
             .select(Sample.key, Sample.value)
             .join(cte, on=(Sample.key == cte.c.key))
             .where(Sample.value > cte.c.avg_value)
             .order_by(Sample.value)
             .with_cte(cte))
```

----------------------------------------

TITLE: Counting Expensive Facilities
DESCRIPTION: Counts the number of facilities where the guest cost is 10 or more. Shows how to apply a WHERE clause with an aggregate count in both SQL and Peewee.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_36

LANGUAGE: sql
CODE:
```
SELECT COUNT(facid) FROM facilities WHERE guestcost >= 10
```

LANGUAGE: python
CODE:
```
query = Facility.select(fn.COUNT(Facility.facid)).where(Facility.guestcost >= 10)
count = query.scalar()

# OR:
# count = Facility.select().where(Facility.guestcost >= 10).count()
```

----------------------------------------

TITLE: Batch Inserting Data with Peewee atomic and insert_many (Python)
DESCRIPTION: Shows an alternative, potentially more efficient method for batch inserts using the `db.atomic()` context manager and `Model.insert_many`. Data is explicitly batched and inserted within a single transaction block. Requires the data and batch size.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_7

LANGUAGE: python
CODE:
```
with db.atomic():
    for idx in range(0, len(row_data), 100):
        # Insert 100 rows at a time.
        rows = row_data[idx:idx + 100]
        User.insert_many(rows).execute()
```

----------------------------------------

TITLE: Add/Drop Constraints using Peewee Migrator (Python)
DESCRIPTION: Provides examples of adding a CHECK constraint, dropping a constraint by name, and adding a UNIQUE constraint on multiple columns using the Peewee migrator.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_140

LANGUAGE: python
CODE:
```
# Add a CHECK() constraint to enforce the price cannot be negative.
migrate(migrator.add_constraint(
    'products',
    'price_check',
    Check('price >= 0')))

# Remove the price check constraint.
migrate(migrator.drop_constraint('products', 'price_check'))

# Add a UNIQUE constraint on the first and last names.
migrate(migrator.add_unique('person', 'first_name', 'last_name'))
```

----------------------------------------

TITLE: Peewee transaction with Explicit Commit and Rollback
DESCRIPTION: Shows how to explicitly call `txn.commit()` and `txn.rollback()` within a `db.transaction()` block. Calling `commit()` saves changes and starts a new transaction. Calling `rollback()` discards changes since the last commit or the start of the transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_68

LANGUAGE: python
CODE:
```
with db.transaction() as txn:
    User.create(username='mickey')
    txn.commit()  # Changes are saved and a new transaction begins.
    User.create(username='huey')

    # Roll back. "huey" will not be saved, but since "mickey" was already
    # committed, that row will remain in the database.
    txn.rollback()
```

----------------------------------------

TITLE: Filtering Tweets by Related User with Peewee (Python)
DESCRIPTION: This example demonstrates using the `filter` method with Django-style keyword arguments to query tweets. It filters tweets based on the `username` attribute of the related `user` object using the `user__username` syntax.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_129

LANGUAGE: python
CODE:
```
# Get all tweets by user with username="peewee".
q = Tweet.filter(user__username='peewee')
```

----------------------------------------

TITLE: Bulk Insert Loop within Transaction (Peewee, Python)
DESCRIPTION: Improves the naive bulk insert by wrapping the loop of `Model.create` calls within a database transaction using `db.atomic()`. This significantly speeds up the process by committing all inserts together in a single transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_6

LANGUAGE: python
CODE:
```
# This is much faster.
with db.atomic():
    for data_dict in data_source:
        MyModel.create(**data_dict)
```

----------------------------------------

TITLE: Update Single Row Data (SQL/Peewee)
DESCRIPTION: Shows how to correct a specific value (initialoutlay) for a single row identified by name ('Tennis Court 2'). Includes raw SQL and two Peewee ORM syntax options.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_28

LANGUAGE: sql
CODE:
```
UPDATE facilities SET initialoutlay = 10000 WHERE name = 'Tennis Court 2';
```

LANGUAGE: python
CODE:
```
res = (Facility
           .update({Facility.initialoutlay: 10000})
           .where(Facility.name == 'Tennis Court 2')
           .execute())

# OR:
res = (Facility
           .update(initialoutlay=10000)
           .where(Facility.name == 'Tennis Court 2')
           .execute())
```

----------------------------------------

TITLE: Defining Peewee Model with Dynamic Mutable Default (Python)
DESCRIPTION: Illustrates how to provide a default value for a field accepting mutable types (like JSONField) by using a function that returns a new instance of the mutable type each time, preventing shared references between model instances. Includes the helper function definition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_9

LANGUAGE: python
CODE:
```
def house_defaults():
    return {'beds': 0, 'baths': 0}

class House(Model):
    number = TextField()
    street = TextField()
    attributes = JSONField(default=house_defaults)
```

----------------------------------------

TITLE: Getting Peewee Model Row Count with len() (Python)
DESCRIPTION: Illustrates using the built-in `len()` function directly on a Peewee Model class to get the total number of rows in the corresponding database table. It notes that this is equivalent to calling `Model.select().count()`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_125

LANGUAGE: python
CODE:
```
n_accounts = len(Account)

# Is equivalent to:
n_accounts = Account.select().count()
```

----------------------------------------

TITLE: Peewee: Access ForeignKey with Lazy Loading Disabled
DESCRIPTION: Demonstrates accessing a ForeignKeyField when `lazy_load=False`. The first loop shows that accessing `tweet.user` returns the user ID. The second loop shows how to eagerly load the related User object using `.select().join()` to access its attributes like `username`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_15

LANGUAGE: python
CODE:
```
for tweet in Tweet.select():
    print(tweet.user, tweet.message)

# With lazy-load disabled, accessing tweet.user will not perform an extra
# query and the user ID value is returned instead.
# e.g.:
# 1  tweet from user1
# 1  another from user1
# 2  tweet from user2

# However, if we eagerly load the related user object, then the user
# foreign key will behave like usual:
for tweet in Tweet.select(Tweet, User).join(User):
    print(tweet.user.username, tweet.message)

# user1  tweet from user1
# user1  another from user1
# user2  tweet from user1
```

----------------------------------------

TITLE: Basic Usage of Peewee FlaskDB Wrapper in Python
DESCRIPTION: Provides a basic example of setting up a Flask application with the `FlaskDB` wrapper. It demonstrates configuring the database URL, excluding routes from automatic connection management, initializing the wrapper, and defining Peewee models using the wrapper's base model.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_155

LANGUAGE: python
CODE:
```
import datetime
from flask import Flask
from peewee import *
from playhouse.flask_utils import FlaskDB

DATABASE = 'postgresql://postgres:password@localhost:5432/my_database'

# If we want to exclude particular views from the automatic connection
# management, we list them this way:
FLASKDB_EXCLUDED_ROUTES = ('logout',)

app = Flask(__name__)
app.config.from_object(__name__)

db_wrapper = FlaskDB(app)

class User(db_wrapper.Model):
    username = CharField(unique=True)

class Tweet(db_wrapper.Model):
    user = ForeignKeyField(User, backref='tweets')
    content = TextField()
    timestamp = DateTimeField(default=datetime.datetime.now)
```

----------------------------------------

TITLE: Selecting Single Record with Join/Order (Peewee) - Python
DESCRIPTION: Demonstrates retrieving a single record using `SelectBase.get` on a complex query involving joins, filtering by a related model's attribute, and ordering the results before fetching the first one. This is useful for more advanced single-record lookups.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_33

LANGUAGE: python
CODE:
```
(Tweet
 .select()
 .join(User)
 .where(User.username == 'charlie')
 .order_by(Tweet.created_date.desc())
 .get())
# Expected output: <__main__.Tweet object at ...>
```

----------------------------------------

TITLE: Defining Peewee Model with Integer Default Value (Python)
DESCRIPTION: Shows how to set a fixed default value for a field in a Peewee model using the `default` parameter. The value is set by Peewee when the object is created.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_7

LANGUAGE: python
CODE:
```
class Message(Model):
    context = TextField()
    read_count = IntegerField(default=0)
```

----------------------------------------

TITLE: Bulk Creating Peewee Models with Batching (Python)
DESCRIPTION: Illustrates using `Model.bulk_create()` with a specified `batch_size` to insert models in smaller groups. It is strongly recommended to wrap this operation in a transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_108

LANGUAGE: python
CODE:
```
user_list = [User(username='u%s' % i) for i in range(10)]

with database.atomic():
    User.bulk_create(user_list, batch_size=3)
```

----------------------------------------

TITLE: Querying Users and Tweet Count with Peewee fn
DESCRIPTION: Demonstrates using the `fn` helper in Peewee to perform an aggregate function (COUNT) and join tables (User and Tweet) to count tweets per user. Includes grouping and ordering by the aggregate result.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_28

LANGUAGE: python
CODE:
```
# Query users and count of tweets authored.
query = (User
         .select(User.username, fn.COUNT(Tweet.id).alias('ct'))
         .join(Tweet, JOIN.LEFT_OUTER, on=(User.id == User.id))
         .group_by(User.username)
         .order_by(fn.COUNT(Tweet.id).desc()))
```

----------------------------------------

TITLE: Defining Many-to-Many Models with ManyToManyField (Peewee)
DESCRIPTION: Defines the Student and Course models using Peewee's ManyToManyField. The ManyToManyField simplifies the many-to-many relationship declaration by abstracting the junction table, providing a field-like interface.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_84

LANGUAGE: python
CODE:
```
class Student(Model):
    name = CharField()

class Course(Model):
    name = CharField()
    students = ManyToManyField(Student, backref='courses')
```

----------------------------------------

TITLE: Querying Data Using Generated Peewee Model
DESCRIPTION: Shows examples of querying data using the dynamically generated 'event' model. This includes selecting and iterating over rows, finding minimum and maximum timestamps using aggregate functions, and counting the total number of rows in the table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/interactive.rst#_snippet_5

LANGUAGE: pycon
CODE:
```
>>> for e in event.select().order_by(event.timestamp).limit(5):
...     print(e.key, e.timestamp)
...
e00 2019-01-01 00:01:00
e01 2019-01-01 00:02:00
e02 2019-01-01 00:03:00
e03 2019-01-01 00:04:00
e04 2019-01-01 00:05:00

>>> event.select(fn.MIN(event.timestamp), fn.MAX(event.timestamp)).scalar(as_tuple=True)
(datetime.datetime(2019, 1, 1, 0, 1), datetime.datetime(2019, 1, 1, 1, 0))

>>> event.select().count()  # Or, len(event)
60
```

----------------------------------------

TITLE: Peewee atomic Transparent Nesting Example
DESCRIPTION: A simplified example demonstrating the transparent nesting behavior of `db.atomic()`. The outer `atomic` call starts a transaction, and the inner `atomic` call automatically creates a savepoint.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_66

LANGUAGE: python
CODE:
```
with db.atomic() as txn:
    perform_operation()

    with db.atomic() as nested_txn:
        perform_another_operation()
```

----------------------------------------

TITLE: Update Multiple Rows/Columns (SQL/Peewee)
DESCRIPTION: Illustrates updating multiple columns (membercost, guestcost) for multiple rows matching a pattern ('Tennis%') using raw SQL and Peewee ORM.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_29

LANGUAGE: sql
CODE:
```
UPDATE facilities SET membercost=6, guestcost=30 WHERE name ILIKE 'Tennis%';
```

LANGUAGE: python
CODE:
```
nrows = (Facility
             .update(membercost=6, guestcost=30)
             .where(Facility.name.startswith('Tennis'))
             .execute())
```

----------------------------------------

TITLE: Upsert (Replace/On Conflict Replace) in Peewee (Python)
DESCRIPTION: Demonstrates two equivalent ways to perform an insert-or-replace operation: using `Model.replace` or `Insert.on_conflict_replace()`. This is available for SQLite (prior to 3.24 for `replace`, 3.24+ for `on_conflict_replace`) and Postgresql, providing a simple upsert mechanism.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_25

LANGUAGE: python
CODE:
```
class User(Model):
    username = TextField(unique=True)
    last_login = DateTimeField(null=True)

# Insert or update the user. The "last_login" value will be updated
# regardless of whether the user existed previously.
user_id = (User
           .replace(username='the-user', last_login=datetime.now())
           .execute())

# This query is equivalent:
user_id = (User
           .insert(username='the-user', last_login=datetime.now())
           .on_conflict_replace()
           .execute())
```

----------------------------------------

TITLE: Classifying Results with CASE in SQL and Peewee
DESCRIPTION: Illustrates how to categorize results into different groups ('cheap' or 'expensive') based on a condition using SQL's CASE statement and Peewee's Case expression.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_8

LANGUAGE: sql
CODE:
```
SELECT name,
CASE WHEN monthlymaintenance > 100 THEN 'expensive' ELSE 'cheap' END
FROM facilities;
```

LANGUAGE: python
CODE:
```
cost = Case(None, [(Facility.monthlymaintenance > 100, 'expensive')], 'cheap')
query = Facility.select(Facility.name, cost.alias('cost'))
```

----------------------------------------

TITLE: Bulk Updating Peewee Models (Python)
DESCRIPTION: Demonstrates how to efficiently update multiple existing model instances using `Model.bulk_update()`. The example updates the 'username' field for a list of users in a single query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_109

LANGUAGE: python
CODE:
```
u1, u2, u3 = [User.create(username='u%s' % i) for i in (1, 2, 3)]

u1.username = 'u1-x'
u2.username = 'u2-y'
u3.username = 'u3-z'

User.bulk_update([u1, u2, u3], fields=[User.username])
```

----------------------------------------

TITLE: Combining Peewee Filter Expressions with OR (Python)
DESCRIPTION: Demonstrates how to combine multiple filter expressions using the bitwise OR operator (`|`) within the `where()` clause to retrieve records matching any of the conditions. Parentheses are used for grouping.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_20

LANGUAGE: python
CODE:
```
d1940 = date(1940, 1, 1)
d1960 = date(1960, 1, 1)
query = (Person
             .select()
             .where((Person.birthday < d1940) | (Person.birthday > d1960)))

for person in query:
    print(person.name, person.birthday)
```

----------------------------------------

TITLE: Instantiating Peewee Migrator - Python
DESCRIPTION: Demonstrates how to create a database connection and instantiate a specific migrator class (PostgresqlMigrator or SqliteMigrator) required for generating schema migration operations in Peewee.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_128

LANGUAGE: python
CODE:
```
# Postgres example:
my_db = PostgresqlDatabase(...)
migrator = PostgresqlMigrator(my_db)

# SQLite example:
my_db = SqliteDatabase('my_database.db')
migrator = SqliteMigrator(my_db)
```

----------------------------------------

TITLE: Querying TimeField Hour in Peewee Python
DESCRIPTION: Shows how to filter database records based on the hour component of a TimeField using the '.hour' attribute in a Peewee query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_77

LANGUAGE: python
CODE:
```
evening_events = Event.select().where(Event.time.hour > 17)
```

----------------------------------------

TITLE: Retrieving Peewee Query Results as Dictionaries (Python)
DESCRIPTION: This code demonstrates fetching Peewee query results as a list of dictionaries using the `.dicts()` method. It selects and counts URLs, groups them, and then iterates over the resulting dictionaries, accessing values by their column names or aliases.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_94

LANGUAGE: python
CODE:
```
stats = (Stat
             .select(Stat.url, fn.Count(Stat.url).alias('ct'))
             .group_by(Stat.url)
             .dicts())

# iterate over a list of 2-tuples containing the url and count
for stat in stats:
    print(stat['url'], stat['ct'])
```

----------------------------------------

TITLE: Counting Peewee Query Results (Python)
DESCRIPTION: Shows how to get the total number of rows returned by a Peewee select query using the `count()` method, including an example with a `where` clause.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_67

LANGUAGE: python
CODE:
```
>>> Tweet.select().count()
100
>>> Tweet.select().where(Tweet.id > 50).count()
50
```

----------------------------------------

TITLE: Performing Basic String Searches (SQL and Peewee)
DESCRIPTION: Explains how to search for rows where a string column (`name`) contains a specific substring ('Tennis'). The SQL uses `ILIKE` with wildcards (`%`), and Peewee provides the `.contains()` method or the exponent operator (`**`) which requires explicit wildcards.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_6

LANGUAGE: sql
CODE:
```
SELECT * FROM facilities WHERE name ILIKE '%tennis%';
```

LANGUAGE: python
CODE:
```
query = Facility.select().where(Facility.name.contains('tennis'))

# OR use the exponent operator. Note: you must include wildcards here:
query = Facility.select().where(Facility.name ** '%tennis%')
```

----------------------------------------

TITLE: Peewee INNER JOIN returning Model Objects
DESCRIPTION: Shows how Peewee reconstructs the model graph when joining `Tweet` and `User` models, allowing access to joined fields via related model attributes (e.g., `tweet.user.username`). Requires `Tweet` and `User` models with a foreign key.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_9

LANGUAGE: pycon
CODE:
```
>>> for tweet in Tweet.select(Tweet.content, User.username).join(User):
...     print(tweet.user.username, '->', tweet.content)
...
huey -> meow
huey -> hiss
huey -> purr
mickey -> woof
mickey -> whine
```

----------------------------------------

TITLE: Defining Model with Multiple Foreign Keys (Peewee Python)
DESCRIPTION: This Python snippet defines the `Relationship` model in Peewee, which represents a follower relationship between users. It demonstrates how to define multiple `ForeignKeyField` instances (`from_user`, `to_user`) that both point to the `User` model. It also includes a `Meta` class to define a unique multi-column index on the foreign key fields.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_21

LANGUAGE: python
CODE:
```
class Relationship(BaseModel):
    from_user = ForeignKeyField(User, backref='relationships')
    to_user = ForeignKeyField(User, backref='related_to')

    class Meta:
        indexes = (
            # Specify a unique multi-column index on from/to-user.
            (('from_user', 'to_user'), True),
        )
```

----------------------------------------

TITLE: Update Based on Another Row (SQL/Peewee)
DESCRIPTION: Explains how to update a row's values (membercost, guestcost) based on calculated values derived from another row (facid=0 or name='Tennis Court 1'). Provides raw SQL (including CTE) and Peewee ORM examples.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_30

LANGUAGE: sql
CODE:
```
UPDATE facilities SET
membercost = (SELECT membercost * 1.1 FROM facilities WHERE facid = 0),
guestcost = (SELECT guestcost * 1.1 FROM facilities WHERE facid = 0)
WHERE facid = 1;

-- OR --
WITH new_prices (nmc, ngc) AS (
  SELECT membercost * 1.1, guestcost * 1.1
  FROM facilities WHERE name = 'Tennis Court 1')
UPDATE facilities
SET membercost = new_prices.nmc, guestcost = new_prices.ngc
FROM new_prices
WHERE name = 'Tennis Court 2'
```

LANGUAGE: python
CODE:
```
sq1 = Facility.select(Facility.membercost * 1.1).where(Facility.facid == 0)
sq2 = Facility.select(Facility.guestcost * 1.1).where(Facility.guestcost * 1.1).where(Facility.facid == 0)

res = (Facility
           .update(membercost=sq1, guestcost=sq2)
           .where(Facility.facid == 1)
           .execute())

# OR:
cte = (Facility
           .select(Facility.membercost * 1.1, Facility.guestcost * 1.1)
           .where(Facility.name == 'Tennis Court 1')
           .cte('new_prices', columns=('nmc', 'ngc')))
res = (Facility
           .update(membercost=SQL('new_prices.nmc'), guestcost=SQL('new_prices.ngc'))
           .with_cte(cte)
           .from_(cte)
           .where(Facility.name == 'Tennis Court 2')
           .execute())
```

----------------------------------------

TITLE: Defining Multi-Column Indexes in Peewee Meta Class
DESCRIPTION: Illustrates how to define multiple indexes spanning several fields within the `Meta` class of a Peewee Model, specifying the fields and whether the index is unique using a tuple of tuples.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_45

LANGUAGE: python
CODE:
```
class Transaction(Model):
    from_acct = CharField()
    to_acct = CharField()
    amount = DecimalField()
    date = DateTimeField()

    class Meta:
        indexes = (
            # create a unique on from/to/date
            (('from_acct', 'to_acct', 'date'), True),

            # create a non-unique on from/to
            (('from_acct', 'to_acct'), False),
        )
```

----------------------------------------

TITLE: Inserting Data with Dictionary Mapping in Peewee (Python)
DESCRIPTION: Demonstrates inserting a single row into a Peewee model using a dictionary where keys are model fields (columns) and values are the data to be inserted. The execute() method is used to run the query, returning the ID of the new row.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_9

LANGUAGE: python
CODE:
```
# Using column: value mappings:
Note.insert({
    Note.person_id: zaizee_id,
    Note.content: 'meeeeowwww',
    Note.timestamp: datetime.datetime.now()}).execute()
```

----------------------------------------

TITLE: Insert Multiple Rows with Generator using Peewee Python
DESCRIPTION: Illustrates using a generator function as the source for `insert_many`, demonstrating that the `rows` parameter accepts any arbitrary iterable.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_102

LANGUAGE: python
CODE:
```
def get_usernames():
    for username in ['charlie', 'huey', 'peewee']:
        yield {'username': username}
User.insert_many(get_usernames()).execute()
```

----------------------------------------

TITLE: Peewee Database Initialization via DatabaseProxy (Python)
DESCRIPTION: Demonstrates initializing a Peewee database using a `DatabaseProxy` as a placeholder, where the actual database instance is created separately and then assigned to the proxy using the `initialize` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_28

LANGUAGE: python
CODE:
```
db = DatabaseProxy()
...
db.initialize(SqliteDatabase('my_app.db', pragmas={'journal_mode': 'wal'}))
```

----------------------------------------

TITLE: Peewee: Define Model with ForeignKey Back-references
DESCRIPTION: Defines a Peewee Model with two ForeignKeyFields pointing to the same target model (User). Each ForeignKeyField uses the `backref` parameter to define a custom property name on the target model (User) for accessing related Message objects.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_16

LANGUAGE: python
CODE:
```
class Message(Model):
    from_user = ForeignKeyField(User, backref='outbox')
    to_user = ForeignKeyField(User, backref='inbox')
    text = TextField()
```

----------------------------------------

TITLE: Using get_object_or_404 Helper Function (Python)
DESCRIPTION: Provides an example of using the `get_object_or_404` helper function within a Flask route to retrieve a single object based on a query or model, automatically returning a 404 response if the object is not found. It demonstrates using a pre-filtered query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_161

LANGUAGE: python
CODE:
```
@app.route('/blog/<slug>/')
def post_detail(slug):
    public_posts = Post.select().where(Post.published == True)
    post = get_object_or_404(public_posts, (Post.slug == slug))
    return render_template('post_detail.html', post=post)
```

----------------------------------------

TITLE: Iterating Over All Records in Peewee (Python)
DESCRIPTION: Shows a simple loop to iterate over all records returned by a Model.select() query, printing a specific attribute for each record. Results are cached by default.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_38

LANGUAGE: Python
CODE:
```
for user in User.select():
    print(user.username)
```

----------------------------------------

TITLE: Helper Function to Get Object or Abort 404 (Python)
DESCRIPTION: Attempts to retrieve a single object from a Peewee model based on provided expressions. If the object is not found (raises `model.DoesNotExist`), it aborts the request with an HTTP 404 error. Requires `abort`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_15

LANGUAGE: python
CODE:
```
def get_object_or_404(model, *expressions):
    try:
        return model.get(*expressions)
    except model.DoesNotExist:
        abort(404)
```

----------------------------------------

TITLE: Retrieving Single Peewee Model (Python)
DESCRIPTION: Demonstrates how to fetch a single model instance that matches specific criteria using the `Model.get()` class method. It raises a `DoesNotExist` exception if no matching instance is found.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_112

LANGUAGE: python
CODE:
```
user = User.get(User.username == username, User.active == True)
```

----------------------------------------

TITLE: Performing a JOIN with ON Clause in Peewee (Python)
DESCRIPTION: Illustrates how to use the `join` method to connect two tables based on a specified join predicate using the `on` parameter. The example joins `Note` and `User` tables on the `user_id` and `id` columns respectively.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_50

LANGUAGE: python
CODE:
```
User = Table('users', ('id', 'username'))
Note = Table('notes', ('id', 'user_id', 'content'))

query = (Note
         .select(Note.content, User.username)
         .join(User, on=(Note.user_id == User.id)))
```

----------------------------------------

TITLE: Peewee: Access Objects via ForeignKey Back-references
DESCRIPTION: Demonstrates accessing related objects using the custom back-reference properties defined on the target model (User). Iterating over `some_user.outbox` retrieves messages where `from_user` is `some_user`, and iterating over `some_user.inbox` retrieves messages where `to_user` is `some_user`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_17

LANGUAGE: python
CODE:
```
for message in some_user.outbox:
    # We are iterating over all Messages whose from_user is some_user.
    print(message)

for message in some_user.inbox:
    # We are iterating over all Messages whose to_user is some_user
    print(message)
```

----------------------------------------

TITLE: Add Multiple Indexes using Peewee Migrator (Python)
DESCRIPTION: Shows how to add single-column, multi-column, and unique indexes to the 'story' table using the Peewee migrator.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_138

LANGUAGE: python
CODE:
```
# Specify the table, column names, and whether the index should be
# UNIQUE or not.
migrate(
    # Create an index on the `pub_date` column.
    migrator.add_index('story', ('pub_date',), False),

    # Create a multi-column index on the `pub_date` and `status` fields.
    migrator.add_index('story', ('pub_date', 'status'), False),

    # Create a unique index on the category and title fields.
    migrator.add_index('story', ('category_id', 'title'), True),
)
```

----------------------------------------

TITLE: MySQL Upsert (On Duplicate Key Update) in Peewee (Python)
DESCRIPTION: Illustrates how to implement MySQL's `ON DUPLICATE KEY UPDATE` functionality using Peewee's `on_conflict` method. It shows how to specify fields to preserve (`preserve`) and fields to update (`update`) in case of a duplicate key conflict, enabling atomic updates like incrementing a login count.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_26

LANGUAGE: python
CODE:
```
class User(Model):
    username = TextField(unique=True)
    last_login = DateTimeField(null=True)
    login_count = IntegerField()

# Insert a new user.
User.create(username='huey', login_count=0)

# Simulate the user logging in. The login count and timestamp will be
# either created or updated correctly.
now = datetime.now()
rowid = (User
         .insert(username='huey', last_login=now, login_count=1)
         .on_conflict(
             preserve=[User.last_login],  # Use the value we would have inserted.
             update={User.login_count: User.login_count + 1})
         .execute())
```

----------------------------------------

TITLE: Peewee INNER JOIN returning Dictionaries
DESCRIPTION: Demonstrates how to perform a basic join between `Tweet` and `User` models using Peewee's `select` and `join` methods, returning results as dictionaries using `.dicts()`. Requires `Tweet` and `User` models to be defined with a foreign key relationship.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_8

LANGUAGE: pycon
CODE:
```
>>> for row in Tweet.select(Tweet.content, User.username).join(User).dicts():
...     print(row)
...
{'content': 'meow', 'username': 'huey'}
{'content': 'hiss', 'username': 'huey'}
{'content': 'purr', 'username': 'huey'}
{'content': 'woof', 'username': 'mickey'}
{'content': 'whine', 'username': 'mickey'}
```

----------------------------------------

TITLE: Sorting Peewee Query Results (Python)
DESCRIPTION: Explains how to order the results of a query alphabetically or numerically by adding an `order_by()` clause to the `select` statement. This sorts the results based on the specified field.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_18

LANGUAGE: python
CODE:
```
for pet in Pet.select().where(Pet.owner == uncle_bob).order_by(Pet.name):
    print(pet.name)
```

----------------------------------------

TITLE: Aggregating Related Count (N+1 Issue) (Python)
DESCRIPTION: Illustrates accessing the count of related objects for each item in a query result, highlighting another instance of the N+1 query problem where `related.count()` triggers a separate query per item in the loop.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_22

LANGUAGE: python
CODE:
```
for person in Person.select():
    print(person.name, person.pets.count(), 'pets')
```

----------------------------------------

TITLE: Implement User Login Function (Peewee)
DESCRIPTION: Provides a Python function `login` that queries the database for a user by username and verifies the provided password against the stored hash using Peewee's `fn.check_password`. Returns the user object on success or `False` on failure.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_16

LANGUAGE: python
CODE:
```
def login(username, password):
    try:
        return (User
                .select()
                .where(
                    (User.username == username) &
                    (fn.check_password(password, User.password) == True))
                .get())
    except User.DoesNotExist:
        # Incorrect username and/or password.
        return False
```

----------------------------------------

TITLE: Querying Latest Records with Subquery (Peewee Python)
DESCRIPTION: This Python snippet demonstrates how to find the latest record for each group (in this case, the latest tweet per user) using a subquery in Peewee. It defines an aliased subquery to get the maximum timestamp per user and then joins the main table with this subquery on both user and timestamp. The query selects all fields from the Tweet and User models.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_16

LANGUAGE: python
CODE:
```
# Define our subquery first. We'll use an alias of the Tweet model, since
# we will be querying from the Tweet model directly in the outer query.
Latest = Tweet.alias()
latest_query = (Latest
                .select(Latest.user, fn.MAX(Latest.timestamp).alias('max_ts'))
                .group_by(Latest.user)
                .alias('latest_query'))

# Our join predicate will ensure that we match tweets based on their
# timestamp *and* user_id.
predicate = ((Tweet.user == latest_query.c.user_id) &
             (Tweet.timestamp == latest_query.c.max_ts))

# We put it all together, querying from tweet and joining on the subquery
# using the above predicate.
query = (Tweet
         .select(Tweet, User)  # Select all columns from tweet and user.
         .join(latest_query, on=predicate)  # Join tweet -> subquery.
         .join_from(Tweet, User))  # Join from tweet -> user.
```

----------------------------------------

TITLE: Extending Peewee Select Query (Python)
DESCRIPTION: Demonstrates how to use `select_extend` to add columns or expressions to an existing SELECT query. The example shows adding a count of related tweets using a LEFT OUTER JOIN and grouping by the user.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_48

LANGUAGE: python
CODE:
```
def get_users(with_count=False):
    query = User.select()
    if with_count:
        query = (query
                 .select_extend(fn.COUNT(Tweet.id).alias('count'))
                 .join(Tweet, JOIN.LEFT_OUTER)
                 .group_by(User))
    return query
```

----------------------------------------

TITLE: Executing Peewee Migration Operations - Python
DESCRIPTION: Defines new field instances and uses the `migrate` helper function to execute a sequence of schema alteration operations generated by the migrator, such as adding or dropping columns.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_129

LANGUAGE: python
CODE:
```
title_field = CharField(default='')
status_field = IntegerField(null=True)

migrate(
    migrator.add_column('some_table', 'title', title_field),
    migrator.add_column('some_table', 'status', status_field),
    migrator.drop_column('some_table', 'old_column'),
)
```

----------------------------------------

TITLE: Defining Peewee Models Without Bound Database (Python)
DESCRIPTION: Illustrates how to define Peewee Model classes without immediately associating them with a specific database instance, allowing the database to be bound later at runtime using methods like `bind`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_29

LANGUAGE: python
CODE:
```
class User(Model):
    username = TextField()

class Tweet(Model):
    user = ForeignKeyField(User, backref='tweets')
```

----------------------------------------

TITLE: Overriding Peewee Table Name - Python
DESCRIPTION: Illustrates how to explicitly set the database table name for a Peewee model using the Meta.table_name option. This is useful for mapping models to existing tables with custom naming conventions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_41

LANGUAGE: python
CODE:
```
class UserProfile(Model):
    class Meta:
        table_name = 'user_profile_tbl'
```

----------------------------------------

TITLE: Adding Multiple Columns with Peewee Migrator - Python
DESCRIPTION: Creates instances of new fields with specified properties (like nullability or default values) and uses the `migrator.add_column` operation within the `migrate` function to add these fields to a specified database table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_131

LANGUAGE: python
CODE:
```
# Create your field instances. For non-null fields you must specify a
# default value.
pubdate_field = DateTimeField(null=True)
comment_field = TextField(default='')

# Run the migration, specifying the database table, field name and field.
migrate(
    migrator.add_column('comment_tbl', 'pub_date', pubdate_field),
    migrator.add_column('comment_tbl', 'comment', comment_field),
)
```

----------------------------------------

TITLE: Sorting Peewee Query by Calculated Value (Expression) (Python)
DESCRIPTION: Shows how to sort a query by a calculated aggregate value (tweet count) by repeating the aggregate expression (`fn.COUNT(Tweet.id)`) within the `order_by` clause, specifying descending order.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_61

LANGUAGE: python
CODE:
```
query = (User
             .select(User.username, fn.COUNT(Tweet.id).alias('num_tweets'))
             .join(Tweet, JOIN.LEFT_OUTER)
             .group_by(User.username)
             .order_by(fn.COUNT(Tweet.id).desc()))
```

----------------------------------------

TITLE: Querying Users Following Me with Peewee Python
DESCRIPTION: Demonstrates how to query users who are following a specific user by joining the `Relationship` table on the `from_user` column and filtering by the `to_user`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_23

LANGUAGE: python
CODE:
```
(User
 .select()
 .join(Relationship, on=Relationship.from_user)
 .where(Relationship.to_user == charlie))
```

----------------------------------------

TITLE: Adding Indexes to Peewee Model (Python)
DESCRIPTION: Demonstrates different ways to add indexes to a Peewee Model using the `add_index` method. It shows defining indexes with fields, using `where` clauses, specifying uniqueness, and adding raw SQL index definitions. These indexes are applied when `create_table` is called.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_123

LANGUAGE: python
CODE:
```
class Article(Model):
    name = TextField()
    timestamp = TimestampField()
    status = IntegerField()
    flags = BitField()

    is_sticky = flags.flag(1)
    is_favorite = flags.flag(2)

# CREATE INDEX ... ON "article" ("name", "timestamp") WHERE "status" = 1
idx = Article.index(Article.name, Article.timestamp).where(Article.status == 1)
Article.add_index(idx)

# CREATE UNIQUE INDEX ... ON "article" ("timestamp" DESC, "flags" & 2)
ts_flags_idx = Article.index(
    Article.timestamp.desc(),
    Article.flags.bin_and(2),
    unique=True)
Article.add_index(ts_flags_idx)

# You can also specify a list of fields and use the same keyword
# arguments that the ModelIndex constructor accepts:
Article.add_index(
    Article.name,
    Article.timestamp.desc(),
    where=(Article.status == 1))

# Or even specify a SQL query directly:
Article.add_index(SQL('CREATE INDEX ...'))
```

----------------------------------------

TITLE: Using EXCLUDED with INSERT ON CONFLICT in Peewee (Python)
DESCRIPTION: This snippet demonstrates how to use the `EXCLUDED` helper object with Peewee's `INSERT ... ON CONFLICT` clause. It shows how to define a model, insert an initial row, and then construct a query that attempts to insert a conflicting row, using `EXCLUDED.value` to reference the proposed new value for the update logic. The example specifically updates the value by summing the existing and new values only if the new value is greater.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_35

LANGUAGE: python
CODE:
```
class KV(Model):
    key = CharField(unique=True)
    value = IntegerField()

# Create one row.
KV.create(key='k1', value=1)

# Demonstrate usage of EXCLUDED.
# Here we will attempt to insert a new value for a given key. If that
# key already exists, then we will update its value with the *sum* of its
# original value and the value we attempted to insert -- provided that
# the new value is larger than the original value.
query = (KV.insert(key='k1', value=10)
         .on_conflict(conflict_target=[KV.key],
                      update={KV.value: KV.value + EXCLUDED.value},
                      where=(EXCLUDED.value > KV.value)))

# Executing the above query will result in the following data being
# present in the "kv" table:
# (key='k1', value=11)
query.execute()

# If we attempted to execute the query *again*, then nothing would be
# updated, as the new value (10) is now less than the value in the
# original row (11).
```

----------------------------------------

TITLE: Deleting Single Model Instance (Peewee) - Python
DESCRIPTION: Demonstrates how to delete a single model instance using the `delete_instance` method in Peewee. It shows getting the instance, deleting it, and then attempting to retrieve it again, resulting in a `UserDoesNotExist` exception.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_30

LANGUAGE: python
CODE:
```
user = User.get(User.id == 1)
user.delete_instance()  # Returns the number of rows deleted.
# Expected output: 1

User.get(User.id == 1)
# Expected output: UserDoesNotExist: instance matching query does not exist:
# SQL: SELECT t1."id", t1."username" FROM "user" AS t1 WHERE t1."id" = ?
# PARAMS: [1]
```

----------------------------------------

TITLE: Populating Peewee Database with Test Data - Python
DESCRIPTION: Creates the defined tables and populates them with sample users, tweets, and favorite relationships. Demonstrates creating model instances and linking them via foreign keys.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_1

LANGUAGE: python
CODE:
```
def populate_test_data():
    db.create_tables([User, Tweet, Favorite])

    data = (
        ('huey', ('meow', 'hiss', 'purr')),
        ('mickey', ('woof', 'whine')),
        ('zaizee', ()))
    for username, tweets in data:
        user = User.create(username=username)
        for tweet in tweets:
            Tweet.create(user=user, content=tweet)

    # Populate a few favorites for our users, such that:
    favorite_data = (
        ('huey', ['whine']),
        ('mickey', ['purr']),
        ('zaizee', ['meow', 'purr']))
    for username, favorites in favorite_data:
        user = User.get(User.username == username)
        for content in favorites:
            tweet = Tweet.get(Tweet.content == content)
            Favorite.create(user=user, tweet=tweet)
```

----------------------------------------

TITLE: Removing Duplicates and Ordering/Limiting Results in SQL and Peewee
DESCRIPTION: Demonstrates how to retrieve a limited number of unique results, ordered alphabetically, using SQL's DISTINCT, ORDER BY, and LIMIT clauses, and their corresponding methods in Peewee.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_10

LANGUAGE: sql
CODE:
```
SELECT DISTINCT surname FROM members ORDER BY surname LIMIT 10;
```

LANGUAGE: python
CODE:
```
query = (Member
             .select(Member.surname)
             .order_by(Member.surname)
             .limit(10)
             .distinct())
```

----------------------------------------

TITLE: Querying Messages from Followed Users (Peewee/Python)
DESCRIPTION: Selects messages from users that the current user is following. It uses a subquery (`user.following()`) within the `.where()` clause to filter messages based on the message's user being in the list of followed users. Orders results by publication date descending. Requires `get_current_user`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_11

LANGUAGE: python
CODE:
```
# python code
user = get_current_user()
messages = (Message
            .select()
            .where(Message.user.in_(user.following()))
            .order_by(Message.pub_date.desc()))
```

----------------------------------------

TITLE: Querying Tennis Booking Times - Peewee/SQL
DESCRIPTION: Retrieves the start time and facility name for all tennis court bookings on a specific date ('2012-09-21'), joining the bookings and facilities tables. Results are ordered by start time and facility name.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_15

LANGUAGE: sql
CODE:
```
SELECT starttime, name
FROM bookings
INNER JOIN facilities ON (bookings.facid = facilities.facid)
WHERE date_trunc('day', starttime) = '2012-09-21':: date
  AND name ILIKE 'tennis%'
ORDER BY starttime, name;
```

LANGUAGE: python
CODE:
```
query = (Booking
             .select(Booking.starttime, Facility.name)
             .join(Facility)
             .where(
                 (fn.date_trunc('day', Booking.starttime) == datetime.date(2012, 9, 21)) &
                 Facility.name.startswith('Tennis'))
             .order_by(Booking.starttime, Facility.name))

    # To retrieve the joined facility's name when iterating:
    for booking in query:
        print(booking.starttime, booking.facility.name)
```

----------------------------------------

TITLE: Peewee Query for Ranking and Filtering (Python)
DESCRIPTION: Translates the SQL ranking query into Peewee, demonstrating how to use a subquery (`subq`) with aggregate and window functions and then build an outer `Select` query to filter based on the calculated rank. Includes iterating over results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_20

LANGUAGE: python
CODE:
```
# Store rank expression in variable for readability.
rank_expr = fn.rank().over(order_by=[fn.SUM(Booking.slots).desc()])

subq = (Booking
        .select(Booking.facility, fn.SUM(Booking.slots).alias('total'),
                rank_expr.alias('rank'))
        .group_by(Booking.facility))

# Use a plain "Select" to create outer query.
query = (Select(columns=[subq.c.facid, subq.c.total])
         .from_(subq)
         .where(subq.c.rank == 1)
         .tuples())

# Iterate over the resulting facility ID(s) and total(s):
for facid, total in query.execute(db):
    print(facid, total)
```

----------------------------------------

TITLE: Defining Peewee Model Primary Keys - Python
DESCRIPTION: Shows how to define primary keys using the Meta.primary_key option. The first model uses a CompositeKey for a many-to-many relationship table, while the second explicitly disables the primary key.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_40

LANGUAGE: python
CODE:
```
class BlogToTag(Model):
    """A simple "through" table for many-to-many relationship."""
    blog = ForeignKeyField(Blog)
    tag = ForeignKeyField(Tag)

    class Meta:
        primary_key = CompositeKey('blog', 'tag')

class NoPrimaryKey(Model):
    data = IntegerField()

    class Meta:
        primary_key = False
```

----------------------------------------

TITLE: Adding Field-Level Constraints in Peewee
DESCRIPTION: Demonstrates using the `constraints` parameter on a field to add custom SQL constraints, such as a `CHECK` constraint using `Check()` or a `DEFAULT` value using `SQL()`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_44

LANGUAGE: python
CODE:
```
class Product(Model):
    name = CharField(unique=True)
    price = DecimalField(constraints=[Check('price < 10000')])
    created = DateTimeField(
        constraints=[SQL("DEFAULT (datetime('now'))")])
```

----------------------------------------

TITLE: Manual Get or Create Logic - Peewee Python
DESCRIPTION: Shows how to manually implement the 'get or create' pattern using a `try...except DoesNotExist` block. This demonstrates the underlying logic that the `get_or_create` method encapsulates.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_116

LANGUAGE: python
CODE:
```
# Without `get_or_create`, we might write:
try:
    person = Person.get(
        (Person.first_name == 'John') &
        (Person.last_name == 'Lennon'))
except Person.DoesNotExist:
    person = Person.create(
        first_name='John',
        last_name='Lennon',
        birthday=datetime.date(1940, 10, 9))
```

----------------------------------------

TITLE: Configuring Peewee Query Logging - Python
DESCRIPTION: Sets up Python's logging to display SQL queries executed by Peewee. Useful for debugging and understanding query performance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_2

LANGUAGE: python
CODE:
```
import logging
logger = logging.getLogger('peewee')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)
```

----------------------------------------

TITLE: Select with Join, Aggregate, and Group By - Peewee Python
DESCRIPTION: Demonstrates a more complex Peewee query involving a `LEFT OUTER JOIN`, an aggregate function (`COUNT`) with an alias, and `GROUP BY`. The example shows iterating over the results, accessing model attributes and the aggregated count.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_47

LANGUAGE: python
CODE:
```
query = (User
                 .select(User, fn.COUNT(Tweet.id).alias('count'))
                 .join(Tweet, JOIN.LEFT_OUTER)
                 .group_by(User))
for user in query:
    print(user.username, 'has tweeted', user.count, 'times')
```

----------------------------------------

TITLE: Selecting Staff or Superusers in Peewee
DESCRIPTION: Example showing how to select users who are either staff or superusers by combining conditions in the .where() clause using the bitwise OR (|) operator.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_51

LANGUAGE: python
CODE:
```
User.select().where(
    (User.is_staff == True) | (User.is_superuser == True))
```

----------------------------------------

TITLE: Creating Indexes Using Peewee add_index and index Helpers
DESCRIPTION: Shows how to add indexes to a model after its definition using `Model.add_index`. It covers simple multi-column indexes, partial indexes using the `where` clause, and complex indexes involving expressions and ordering using the `Model.index` helper.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_47

LANGUAGE: python
CODE:
```
class Article(Model):
    name = TextField()
    timestamp = TimestampField()
    status = IntegerField()
    flags = IntegerField()

# Add an index on "name" and "timestamp" columns.
Article.add_index(Article.name, Article.timestamp)

# Add a partial index on name and timestamp where status = 1.
Article.add_index(Article.name, Article.timestamp,
                  where=(Article.status == 1))

# Create a unique index on timestamp desc, status & 4.
idx = Article.index(
    Article.timestamp.desc(),
    Article.flags.bin_and(4),
    unique=True)
Article.add_index(idx)
```

----------------------------------------

TITLE: Defining Model Indexes with Peewee ModelIndex (Python)
DESCRIPTION: Provides examples of defining database indexes directly on a peewee model using the `ModelIndex` class. It shows creating a basic index on multiple fields, adding a conditional `where` clause to the index, and creating a unique index with a descending field and an expression.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_61

LANGUAGE: python
CODE:
```
class Article(Model):
    name = TextField()
    timestamp = TimestampField()
    status = IntegerField()
    flags = BitField()

    is_sticky = flags.flag(1)
    is_favorite = flags.flag(2)

# CREATE INDEX ... ON "article" ("name", "timestamp")
idx = ModelIndex(Article, (Article.name, Article.timestamp))

# CREATE INDEX ... ON "article" ("name", "timestamp") WHERE "status" = 1
idx = idx.where(Article.status == 1)

# CREATE UNIQUE INDEX ... ON "article" ("timestamp" DESC, "flags" & 2) WHERE "status" = 1
idx = ModelIndex(
    Article,
    (Article.timestamp.desc(), Article.flags.bin_and(2)),
    unique = True).where(Article.status == 1)
```

----------------------------------------

TITLE: Removing Related Objects with ManyToManyField (Peewee Python)
DESCRIPTION: Illustrates how to disassociate single model instances, lists of instances, or the results of a ModelSelect query from the current instance using the `remove` method of a ManyToManyField.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_91

LANGUAGE: python
CODE:
```
# Huey is currently enrolled in a lot of english classes
# as well as some Comp-Sci. He is changing majors, so we
# will remove all his courses.
english_courses = Course.select().where(
    Course.name.contains('english'))
huey.courses.remove(english_courses)

# Remove the two Comp-Sci classes Huey is enrolled in.
cs101 = Course.get(Course.name == 'CS 101')
cs151 = Course.get(Course.name == 'CS 151')
huey.courses.remove([cs101, cs151])
```

----------------------------------------

TITLE: Listing Members and Their Recommenders - Peewee/SQL
DESCRIPTION: Retrieves a list of all members, including the first and last name of the member who recommended them, if a recommender exists. This uses a left outer join and orders results by surname and firstname.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_17

LANGUAGE: sql
CODE:
```
SELECT m.firstname, m.surname, r.firstname, r.surname
FROM members AS m
LEFT OUTER JOIN members AS r ON (m.recommendedby = r.memid)
ORDER BY m.surname, m.firstname
```

LANGUAGE: python
CODE:
```
MA = Member.alias()
query = (Member
             .select(Member.firstname, Member.surname, MA.firstname, MA.surname)
             .join(MA, JOIN.LEFT_OUTER, on=(Member.recommendedby == MA.memid))
             .order_by(Member.surname, Member.firstname))

    # To display the recommender's name when iterating:
    for m in query:
        print(m.firstname, m.surname)
        if m.recommendedby:
            print('  ', m.recommendedby.firstname, m.recommendedby.surname)
```

----------------------------------------

TITLE: Execute Peewee Query and Get Single Scalar Value - Python
DESCRIPTION: Demonstrates using the `scalar()` method on a Peewee query to retrieve a single scalar value, such as the result of an aggregate function like `MAX()`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_43

LANGUAGE: python
CODE:
```
query = Note.select(fn.MAX(Note.timestamp))
max_ts = query.scalar(db)
```

----------------------------------------

TITLE: Performing Explicit Peewee Join Query - Python
DESCRIPTION: Shows how to explicitly define the join condition using the on clause. This is equivalent to the inferred join but provides more control.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_5

LANGUAGE: python
CODE:
```
query = (Tweet
         .select()
         .join(User, on=(Tweet.user == User.id))
         .where(User.username == 'huey'))
```

----------------------------------------

TITLE: Retrieving All Columns from a Table (SQL and Peewee)
DESCRIPTION: Shows how to select all columns and rows from the 'facilities' table. The SQL example uses `SELECT *`, while the Peewee example uses `Facility.select()` which selects all fields by default when no specific fields are provided.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_2

LANGUAGE: sql
CODE:
```
SELECT * FROM facilities
```

LANGUAGE: python
CODE:
```
# By default, when no fields are explicitly passed to select(), all fields
# will be selected.
query = Facility.select()
```

----------------------------------------

TITLE: Rank Facilities by Value (Peewee)
DESCRIPTION: This Python code uses Peewee to calculate a total cost for facilities using a Case expression, applies the RANK window function to order them by cost, and selects the top-ranked facilities from a subquery.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_54

LANGUAGE: python
CODE:
```
total_cost = fn.SUM(Case(None, (
    (Booking.member == 0, Booking.slots * Facility.guestcost),
), (Booking.slots * Facility.membercost)))

subq = (Facility
        .select(Facility.name,
                fn.RANK().over(order_by=[total_cost.desc()]).alias('rank'))
        .join(Booking)
        .group_by(Facility.name))

query = (Select(columns=[subq.c.name, subq.c.rank])
         .from_(subq)
         .where(subq.c.rank <= 3)
         .order_by(subq.c.rank)
         .bind(db))  # Here again we used plain Select, and call bind().
```

----------------------------------------

TITLE: Bulk Insert (Model.insert_many, Tuples) (Peewee, Python)
DESCRIPTION: Demonstrates using `Model.insert_many` with a list of tuples. When using tuples, the corresponding fields must be explicitly provided as a list to map the tuple values to the correct model fields.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_8

LANGUAGE: python
CODE:
```
# We can INSERT tuples as well...
data = [('val1-1', 'val1-2'),
        ('val2-1', 'val2-2'),
        ('val3-1', 'val3-2')]

# But we need to indicate which fields the values correspond to.
MyModel.insert_many(data, fields=[MyModel.field1, MyModel.field2]).execute()
```

----------------------------------------

TITLE: Initializing SqliteDatabase in Python
DESCRIPTION: Example demonstrating how to initialize a SqliteDatabase instance with specific pragmas for journal mode and cache size.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_0

LANGUAGE: python
CODE:
```
# Sqlite database using WAL-mode and 32MB page-cache.
db = SqliteDatabase('app.db', pragmas={
    'journal_mode': 'wal',
    'cache_size': -32 * 1000})
```

----------------------------------------

TITLE: Querying Students in a Specific Course (Peewee Python)
DESCRIPTION: Demonstrates how to query for students who are enrolled in a course with a specific name ('math') by joining the Student, StudentCourse (through model), and Course tables.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_34

LANGUAGE: python
CODE:
```
Student.select()
 .join(StudentCourse)
 .join(Course)
 .where(Course.name == 'math')
```

----------------------------------------

TITLE: Retrieving Peewee Query Results as Dictionaries (Python)
DESCRIPTION: Shows how to use the .dicts() method on a Select query to retrieve results as dictionaries instead of model instances, and then iterates over the dictionary results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_41

LANGUAGE: Python
CODE:
```
query = User.select().dicts()
for row in query:
    print(row)
```

----------------------------------------

TITLE: Creating Tables for Many-to-Many Relationship (Peewee)
DESCRIPTION: Shows how to create the necessary database tables for the models defined with ManyToManyField. It includes the Student and Course tables, and uses get_through_model() to get and include the automatically generated junction table model.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_85

LANGUAGE: python
CODE:
```
# Create tables for the students, courses, and relationships between
# the two.
db.create_tables([
    Student,
    Course,
    Course.students.get_through_model()])
```

----------------------------------------

TITLE: Creating User Relationship (Peewee/Python)
DESCRIPTION: Creates a new relationship record in the database between the current user and a target user found by username. Uses `database.atomic()` for transaction safety and handles `IntegrityError` to prevent duplicate relationships. Requires `get_object_or_404` and `get_current_user`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_10

LANGUAGE: python
CODE:
```
user = get_object_or_404(User, username=username)
try:
    with database.atomic():
        Relationship.create(
            from_user=get_current_user(),
            to_user=user)
except IntegrityError:
    pass
```

----------------------------------------

TITLE: Querying Top N per Group with LIMIT Subquery (Peewee, Python)
DESCRIPTION: Constructs a Peewee query using a correlated subquery that selects the IDs of the top N (3) newest tweets for the current user using `order_by` and `limit`. The outer query then filters tweets whose ID is present in the result set of this subquery.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_12

LANGUAGE: python
CODE:
```
TweetAlias = Tweet.alias()

# The subquery here will calculate, for the user who created the
# tweet in the outer loop, the three newest tweets. The expression
# will evaluate to `True` if the outer-loop tweet is in the set of
# tweets represented by the inner query.
query = (Tweet
             .select(Tweet, User)
             .join(User)
             .where(Tweet.id << (
                 TweetAlias
                 .select(TweetAlias.id)
                 .where(TweetAlias.user == Tweet.user)
                 .order_by(TweetAlias.created_date.desc())
                 .limit(3))))
```

----------------------------------------

TITLE: Matching Multiple Values in SQL and Peewee
DESCRIPTION: Demonstrates how to select rows where a column matches one of several values, using both SQL's IN clause and Peewee's .in_() method or explicit OR conditions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_7

LANGUAGE: sql
CODE:
```
SELECT * FROM facilities WHERE facid IN (1, 5);
```

LANGUAGE: python
CODE:
```
query = Facility.select().where(Facility.facid.in_([1, 5]))

# OR:
query = Facility.select().where((Facility.facid == 1) |
                                    (Facility.facid == 5))
```

----------------------------------------

TITLE: Querying Costly Bookings with Subquery - Peewee
DESCRIPTION: This Peewee snippet demonstrates the simplified approach to querying costly bookings using a subquery (represented by iq). It calculates the cost within the inner query and filters based on cost in the outer query. Iteration using dictionaries is shown.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_24

LANGUAGE: python
CODE:
```
cost = Case(Member.memid, (
        (0, Booking.slots * Facility.guestcost),
    ), (Booking.slots * Facility.membercost))

    iq = (Member
          .select(fullname.alias('member'), Facility.name.alias('facility'),
                  cost.alias('cost'))
          .join(Booking)
          .join(Facility)
          .where(fn.date_trunc('day', Booking.starttime) == datetime.date(2012, 9, 14)))

    query = (Member
             .select(iq.c.member, iq.c.facility, iq.c.cost)
             .from_(iq)
             .where(iq.c.cost > 30)
             .order_by(SQL('cost').desc()))

    # To iterate, try using dicts:
    for row in query.dicts():
        print(row['member'], row['facility'], row['cost'])
```

----------------------------------------

TITLE: Querying Courses for a Specific Student (Peewee Python)
DESCRIPTION: Shows how to find all courses a student is enrolled in by joining Course, StudentCourse, and Student tables, filtering by the student's name, and then iterating through the results to print course names.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_35

LANGUAGE: python
CODE:
```
courses = (Course
 .select()
 .join(StudentCourse)
 .join(Student)
 .where(Student.name == 'da vinci'))

for course in courses:
 print(course.name)
```

----------------------------------------

TITLE: Defining a Basic Custom Peewee Field - Python
DESCRIPTION: Shows the basic structure for creating a custom field type in Peewee by subclassing `Field` and setting the `field_type` attribute. This example defines a simple `UUIDField` with a 'uuid' field type.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_26

LANGUAGE: python
CODE:
```
class UUIDField(Field):
    field_type = 'uuid'
```

----------------------------------------

TITLE: Creating Recursive CTE with Peewee Python
DESCRIPTION: This example shows how to build a recursive Common Table Expression (CTE) in Peewee to traverse a hierarchical structure like a category tree. It defines a base case for root nodes and a recursive term for children, combining them with `union_all`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_37

LANGUAGE: python
CODE:
```
class Category(Model):
    name = TextField()
    parent = ForeignKeyField('self', backref='children', null=True)

# The base case of our recursive CTE will be categories that are at
# the root level -- in other words, categories without parents.
roots = (Category
         .select(Category.name, Value(0).alias('level'))
         .where(Category.parent.is_null())
         .cte(name='roots', recursive=True))

# The recursive term will select the category name and increment
# the depth, joining on the base term so that the recursive term
# consists of all children of the base category.
RTerm = Category.alias()
recursive = (RTerm
             .select(RTerm.name, (roots.c.level + 1).alias('level'))
             .join(roots, on=(RTerm.parent == roots.c.id)))

# Express <base term> UNION ALL <recursive term>.
cte = roots.union_all(recursive)

# Select name and level from the recursive CTE.
query = (cte
         .select_from(cte.c.name, cte.c.level)
         .order_by(cte.c.name))

for category in query:
    print(category.name, category.level)
```

----------------------------------------

TITLE: Setup Peewee PostgresqlExtDatabase and Base Model (Python)
DESCRIPTION: Imports the necessary components from `playhouse.postgres_ext`, initializes a `PostgresqlExtDatabase` connection, and defines a base model class associated with this extended database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_11

LANGUAGE: python
CODE:
```
from playhouse.postgres_ext import *

ext_db = PostgresqlExtDatabase('peewee_test', user='postgres')

class BaseExtModel(Model):
    class Meta:
        database = ext_db
```

----------------------------------------

TITLE: Defining Single-Column Index/Constraint in Peewee
DESCRIPTION: Shows how to add a unique index using `unique=True` and a standard index using `index=True` directly in the field definition within a Peewee Model class.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_43

LANGUAGE: python
CODE:
```
class User(Model):
    username = CharField(unique=True)
    email = CharField(index=True)
```

----------------------------------------

TITLE: Create or Get with IntegrityError (Peewee) - Python
DESCRIPTION: Shows a pattern for implementing "create or get" logic in Peewee by first attempting to create the record within an atomic transaction. If a unique constraint violation (`IntegrityError`) occurs, it safely falls back to retrieving the existing record. This relies on the database's unique constraint enforcement.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_34

LANGUAGE: python
CODE:
```
try:
    with db.atomic():
        return User.create(username=username)
except peewee.IntegrityError:
    # `username` is a unique column, so this username already exists,
    # making it safe to call .get().
    return User.get(User.username == username)
```

----------------------------------------

TITLE: Iterating and Printing Prefetched Many-to-Many Results (Peewee Python)
DESCRIPTION: Demonstrates how to loop through the results of a query that prefetched related models (like the one in Snippet 3). It shows how to access the related student and course objects directly from the student_course instance without triggering new database queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_37

LANGUAGE: python
CODE:
```
for student_course in query:
 print(student_course.student.name, '->', student_course.course.name)
```

----------------------------------------

TITLE: Sorting Peewee Query Results Descending (Python)
DESCRIPTION: Shows how to sort query results in descending order using the `.desc()` method on the model field within the `order_by()` clause. This reverses the default ascending sort order.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_19

LANGUAGE: python
CODE:
```
for person in Person.select().order_by(Person.birthday.desc()):
    print(person.name, person.birthday)
```

----------------------------------------

TITLE: List Related Data with LEFT JOIN (Peewee, Python)
DESCRIPTION: This snippet shows a left outer join from Person to Pet. Because a person can have multiple pets, the person is repeated for each pet, illustrating the duplication that occurs without aggregation or prefetching. It iterates through the results, checking for the presence of a pet instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_24

LANGUAGE: python
CODE:
```
query = (Person
             .select(Person, Pet)
             .join(Pet, JOIN.LEFT_OUTER)
             .order_by(Person.name, Pet.name))
    for person in query:
        # We need to check if they have a pet instance attached, since not all
        # people have pets.
        if hasattr(person, 'pet'):
            print(person.name, person.pet.name)
        else:
            print(person.name, 'no pets')
```

----------------------------------------

TITLE: Peewee: Basic AND and NOT conditions in Python
DESCRIPTION: Illustrates combining boolean fields using the AND operator ('&') and negating a field using the NOT operator ('~') in a Peewee expression.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_11

LANGUAGE: python
CODE:
```
(User.is_active & ~User.is_superuser)
```

----------------------------------------

TITLE: Deleting Members Without Bookings (Peewee Python)
DESCRIPTION: Demonstrates how to delete records from the `Member` table where no corresponding entries exist in the `Booking` table. This is achieved using a subquery within a `DELETE` statement.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_34

LANGUAGE: python
CODE:
```
subq = Booking.select().where(Booking.member == Member.memid)
nrows = Member.delete().where(~fn.EXISTS(subq)).execute()
```

----------------------------------------

TITLE: Delete All Rows (SQL/Peewee)
DESCRIPTION: Shows how to delete all records from the 'bookings' table using simple DELETE statements in raw SQL and Peewee ORM.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_31

LANGUAGE: sql
CODE:
```
DELETE FROM bookings;
```

LANGUAGE: python
CODE:
```
nrows = Booking.delete().execute()
```

----------------------------------------

TITLE: Deleting Records Based on Subquery WHERE in Peewee Python
DESCRIPTION: This snippet demonstrates how to use a subquery within the `where` clause of a `delete` query to remove records based on conditions applied to related data.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_40

LANGUAGE: python
CODE:
```
inactive_users = User.select().where(User.active == False)
dq = (Tweet
      .delete()
      .where(Tweet.user.in_(inactive_users)))
dq.execute()  # Return number of tweets deleted.
```

----------------------------------------

TITLE: Binding Peewee Models to Databases at Run-time (Python)
DESCRIPTION: Demonstrates how to bind multiple Peewee models to different database instances dynamically using `Database.bind` and `Database.bind_ctx` for temporary binding within a context manager. Shows switching between PostgreSQL and SQLite databases.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_30

LANGUAGE: python
CODE:
```
postgres_db = PostgresqlDatabase('my_app', user='postgres')
sqlite_db = SqliteDatabase('my_app.db')

# At this point, the User and Tweet models are NOT bound to any database.

# Let's bind them to the Postgres database:
postgres_db.bind([User, Tweet])

# Now we will temporarily bind them to the sqlite database:
with sqlite_db.bind_ctx([User, Tweet]):
    # User and Tweet are now bound to the sqlite database.
    assert User._meta.database is sqlite_db

# User and Tweet are once again bound to the Postgres database.
assert User._meta.database is postgres_db
```

----------------------------------------

TITLE: Insert Multiple Rows with Tuples using Peewee Python
DESCRIPTION: Demonstrates how to insert multiple rows into the `User` table using `insert_many` with a list of tuples. It explicitly specifies the fields being inserted.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_100

LANGUAGE: python
CODE:
```
data = [
    ('charlie', True),
    ('huey', False),
    ('zaizee', False)]
query = User.insert_many(data, fields=[User.username, User.is_admin])
query.execute()
```

----------------------------------------

TITLE: Executing Raw SQL with Peewee
DESCRIPTION: Demonstrates how to execute raw SQL statements directly using the `Database.execute_sql` method. It shows examples of executing a simple statement that doesn't return results and executing a query that returns results, iterating over them using the cursor.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_59

LANGUAGE: python
CODE:
```
db = SqliteDatabase('my_app.db')
db.connect()

# Example of executing a simple query and ignoring the results.
db.execute_sql("ATTACH DATABASE ':memory:' AS cache;")

# Example of iterating over the results of a query using the cursor.
cursor = db.execute_sql('SELECT * FROM users WHERE status = ?', (ACTIVE,))
for row in cursor.fetchall():
    # Do something with row, which is a tuple containing column data.
    pass
```

----------------------------------------

TITLE: Declaring Peewee Tables
DESCRIPTION: Shows two ways to declare Peewee Table objects: explicitly listing columns in the constructor or omitting columns and accessing them via the '.c' attribute later. This prepares the table objects for query building.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_1

LANGUAGE: python
CODE:
```
# Explicitly declare columns
Person = Table('person', ('id', 'first', 'last'))

Note = Table('note', ('id', 'person_id', 'content', 'timestamp'))

# Do not declare columns, they will be accessed using magic ".c" attribute
Reminder = Table('reminder')
```

----------------------------------------

TITLE: Listing Costly Bookings (> $30) - Peewee/SQL
DESCRIPTION: Finds bookings made on '2012-09-14' where the cost to the member or guest exceeds $30. It calculates the cost based on member type (guest ID 0 vs member ID > 0) and slots booked, includes facility name and formatted member name, and orders results by cost descending.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_19

LANGUAGE: sql
CODE:
```
SELECT m.firstname || ' ' || m.surname AS member,
           f.name AS facility,
           (CASE WHEN m.memid = 0 THEN f.guestcost * b.slots
            ELSE f.membercost * b.slots END) AS cost
FROM members AS m
INNER JOIN bookings AS b ON (m.memid = b.memid)
INNER JOIN facilities AS f ON (b.facid = f.facid)
WHERE (date_trunc('day', b.starttime) = '2012-09-14') AND
     ((m.memid = 0 AND b.slots * f.guestcost > 30) OR
      (m.memid > 0 AND b.slots * f.membercost > 30))
ORDER BY cost DESC;
```

----------------------------------------

TITLE: Creating an Index on a Table Column (Python)
DESCRIPTION: Shows how to create a unique index on the 'username' column of the 'users' table using the create_index() method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_83

LANGUAGE: python
CODE:
```
# Create a unique index on the `username` column.
db['users'].create_index(['username'], unique=True)
```

----------------------------------------

TITLE: Top N Tweets per User with Window Function (SQL)
DESCRIPTION: This SQL snippet shows how to find the top N (specifically, 3) most recent tweets per user using window functions, which are efficient and scalable. It uses the RANK() window function partitioned by user ID and ordered by creation date to assign a rank within each user's tweets, and then filters the results to include only those with a rank less than or equal to 3.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_8

LANGUAGE: sql
CODE:
```
SELECT subq.message, subq.username
FROM (
    SELECT
        t2.message,
        t3.username,
        RANK() OVER (
            PARTITION BY t2.user_id
            ORDER BY t2.created_date DESC
        ) AS rnk
    FROM tweet AS t2
    INNER JOIN user AS t3 ON (t2.user_id = t3.id)
) AS subq
WHERE (subq.rnk <= 3)
```

----------------------------------------

TITLE: Defining Peewee Model with Meta Class for Database (Python)
DESCRIPTION: Explains how to associate a Peewee model with a specific database instance using the inner `Meta` class. This convention, borrowed from Django, keeps model configuration separate from field definitions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_33

LANGUAGE: python
CODE:
```
from peewee import *

contacts_db = SqliteDatabase('contacts.db')

class Person(Model):
 name = CharField()

 class Meta:
 database = contacts_db
```

----------------------------------------

TITLE: Querying by DateTimeField Year (Python)
DESCRIPTION: Shows how to filter database records based on the year component of a `DateTimeField` column (`pub_date`) within a Peewee query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_72

LANGUAGE: python
CODE:
```
Blog.select().where(Blog.pub_date.year == 2018)
```

----------------------------------------

TITLE: Calculating Total Hours per Facility (SQL/Peewee)
DESCRIPTION: Calculates the total number of hours booked per facility by summing slots and multiplying by 0.5. The query joins the facilities and bookings tables, groups by facility ID and name, and orders by facility ID.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_47

LANGUAGE: sql
CODE:
```
SELECT f.facid, f.name, SUM(b.slots) * .5
FROM facilities AS f
INNER JOIN bookings AS b ON (f.facid = b.facid)
GROUP BY f.facid, f.name
ORDER BY f.facid
```

LANGUAGE: python
CODE:
```
query = (Facility
             .select(Facility.facid, Facility.name, fn.SUM(Booking.slots) * .5))
```

----------------------------------------

TITLE: Add/Drop Column Default using Peewee Migrator (Python)
DESCRIPTION: Shows how to add and remove default values for columns, including using literal values and database functions, with considerations for different database backends like Sqlite.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_141

LANGUAGE: python
CODE:
```
# Add a default value for a status column.
migrate(migrator.add_column_default(
    'entries',
    'status',
    'draft'))

# Remove the default.
migrate(migrator.drop_column_default('entries', 'status'))

# Use a function for the default value (does not work with Sqlite):
migrate(migrator.add_column_default(
    'entries',
    'timestamp',
    fn.now()))

# Or alternatively (works with Sqlite):
migrate(migrator.add_column_default(
    'entries',
    'timestamp',
    'now()'))
```

----------------------------------------

TITLE: Finding a single row with find_one in Peewee Python
DESCRIPTION: Shows how to use the `find_one` method to retrieve the first row that matches the provided equality conditions (`name='Huey'`). Returns `None` if no match is found.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_86

LANGUAGE: python
CODE:
```
huey = db['users'].find_one(name='Huey')
```

----------------------------------------

TITLE: Clearing All Many-to-Many Relationships (Peewee)
DESCRIPTION: Demonstrates how to remove all relationships associated with a specific instance using the clear() method on the ManyToManyField attribute.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_89

LANGUAGE: pycon
CODE:
```
>>> engl_101 = Course.get(Course.name == 'English 101')
>>> engl_101.students.clear()
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships via Junction Table (Peewee)
DESCRIPTION: Demonstrates how to query courses associated with a specific student ("Huey") by joining through the StudentCourse junction table. It selects Course objects and filters based on the Student name.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_83

LANGUAGE: python
CODE:
```
# List the courses that "Huey" is enrolled in:
courses = (Course
           .select()
           .join(StudentCourse)
           .join(Student)
           .where(Student.name == 'Huey'))
for course in courses:
    print(course.name)
```

----------------------------------------

TITLE: Joining Tables on Arbitrary Fields with Peewee Python
DESCRIPTION: Shows how to perform a join between tables without an explicit foreign key by specifying the join condition using an expression (`User.id == ActivityLog.object_id`). It also demonstrates accessing the joined model instance via the `attr` parameter.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_24

LANGUAGE: python
CODE:
```
user_log = (User
 .select(User, ActivityLog)
 .join(ActivityLog, on=(User.id == ActivityLog.object_id), attr='log')
 .where(
 (ActivityLog.activity_type == 'user_activity') &
 (User.username == 'charlie')))

for user in user_log:
 print(user.username, user.log.description)
```

----------------------------------------

TITLE: Implementing Recursive CTE in Peewee
DESCRIPTION: This Peewee code constructs a recursive CTE to traverse a parent-linked hierarchy (`Category` model). It defines a base case for root nodes and a recursive term for children, calculating the depth (`level`) and path from the root for each node.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_107

LANGUAGE: python
CODE:
```
# Define the base case of our recursive CTE. This will be categories that
# have a null parent foreign-key.
Base = Category.alias()
level = Value(1).alias('level')
path = Base.name.alias('path')
base_case = (Base
             .select(Base.id, Base.name, Base.parent, level, path)
             .where(Base.parent.is_null())
             .cte('base', recursive=True))

# Define the recursive terms.
RTerm = Category.alias()
rlevel = (base_case.c.level + 1).alias('level')
rpath = base_case.c.path.concat('->').concat(RTerm.name).alias('path')
recursive = (RTerm
             .select(RTerm.id, RTerm.name, RTerm.parent, rlevel, rpath)
             .join(base_case, on=(RTerm.parent == base_case.c.id)))

# The recursive CTE is created by taking the base case and UNION ALL with
# the recursive term.
cte = base_case.union_all(recursive)

# We will now query from the CTE to get the categories, their levels,  and
# their paths.
query = (cte
         .select_from(cte.c.name, cte.c.level, cte.c.path)
         .order_by(cte.c.path))

# We can now iterate over a list of all categories and print their names,
# absolute levels, and path from root -> category.
for category in query:
    print(category.name, category.level, category.path)
```

----------------------------------------

TITLE: Mapping Custom Peewee Field Type to Database Column Type - Python
DESCRIPTION: Demonstrates how to inform a specific Peewee database instance (like PostgresqlDatabase) about the mapping between a custom field's `field_type` label ('uuid') and the actual database column type ('uuid') using the `field_types` parameter in the database constructor.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_28

LANGUAGE: python
CODE:
```
# Postgres, we use UUID data-type.
db = PostgresqlDatabase('my_db', field_types={'uuid': 'uuid'})
```

----------------------------------------

TITLE: Implementing Optimistic Locking Base Model in Peewee
DESCRIPTION: Defines a base Peewee Model class `BaseVersionedModel` that includes an integer `version` field and a `save_optimistic` method. This method attempts to update a record only if its version matches the one initially read, raising `ConflictDetectedException` if a concurrent modification is detected. It handles new records by performing a standard insert.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_0

LANGUAGE: python
CODE:
```
from peewee import *

class ConflictDetectedException(Exception): pass

class BaseVersionedModel(Model):
    version = IntegerField(default=1, index=True)

    def save_optimistic(self):
        if not self.id:
            # This is a new record, so the default logic is to perform an
            # INSERT. Ideally your model would also have a unique
            # constraint that made it impossible for two INSERTs to happen
            # at the same time.
            return self.save()

        # Update any data that has changed and bump the version counter.
        field_data = dict(self.__data__)
        current_version = field_data.pop('version', 1)
        self._populate_unsaved_relations(field_data)
        field_data = self._prune_fields(field_data, self.dirty_fields)
        if not field_data:
            raise ValueError('No changes have been made.')

        ModelClass = type(self)
        field_data['version'] = ModelClass.version + 1  # Atomic increment.

        query = ModelClass.update(**field_data).where(
            (ModelClass.version == current_version) &
            (ModelClass.id == self.id))
        if query.execute() == 0:
            # No rows were updated, indicating another process has saved
            # a new version. How you handle this situation is up to you,
            # but for simplicity I'm just raising an exception.
            raise ConflictDetectedException()
        else:
            # Increment local version to match what is now in the db.
            self.version += 1
            return True
```

----------------------------------------

TITLE: Iterating Complex Peewee Join Results
DESCRIPTION: Shows how to iterate over the results of the complex Peewee query involving aliased models, demonstrating how Peewee reconstructs the model graph allowing access to nested joined data. Requires the `query` object created in the previous snippet.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_14

LANGUAGE: pycon
CODE:
```
>>> for fav in query:
...     print(fav.user.username, 'liked', fav.tweet.content, 'by', fav.tweet.user.username)
...
huey liked whine by mickey
mickey liked purr by huey
zaizee liked meow by huey
zaizee liked purr by huey
```

----------------------------------------

TITLE: Removing Many-to-Many Relationships (Peewee)
DESCRIPTION: Shows how to remove specific relationships using the remove() method on the ManyToManyField attribute of a model instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_88

LANGUAGE: pycon
CODE:
```
>>> huey.courses.remove(Course.select().where(Course.name.contains('2'))
2
>>> [course.name for course in huey.courses.order_by(Course.name)]
['CS 101', 'CS151', 'English 101', 'English 151']
```

----------------------------------------

TITLE: Defining Composite Primary Key (Peewee, Python)
DESCRIPTION: Demonstrates how to define a composite primary key for a Peewee model by specifying a CompositeKey instance with the relevant field names in the model's Meta class.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_55

LANGUAGE: python
CODE:
```
class Image(Model):
    filename = TextField()
    mimetype = CharField()

class Tag(Model):
    label = CharField()

class ImageTag(Model):  # Many-to-many relationship.
    image = ForeignKeyField(Image)
    tag = ForeignKeyField(Tag)

    class Meta:
        primary_key = CompositeKey('image', 'tag')
```

----------------------------------------

TITLE: Listing Total Slots Per Facility in Sept 2012
DESCRIPTION: Calculates the total booking slots per facility specifically for September 2012. The output is grouped by facility and ordered by the total number of slots booked.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_39

LANGUAGE: sql
CODE:
```
SELECT facid, SUM(slots)
FROM bookings
WHERE (date_trunc('month', starttime) = '2012-09-01'::dates)
GROUP BY facid
ORDER BY SUM(slots)
```

LANGUAGE: python
CODE:
```
query = (Booking
             .select(Booking.facility, fn.SUM(Booking.slots))
             .where(fn.date_trunc('month', Booking.starttime) == datetime.date(2012, 9, 1))
             .group_by(Booking.facility)
             .order_by(fn.SUM(Booking.slots)))
```

----------------------------------------

TITLE: Using Peewee count_queries Context Manager in Python
DESCRIPTION: Demonstrates how to use the `count_queries` context manager to count database queries within a block of code. It shows fetching a user and their tweets and then asserting the number of queries executed.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_152

LANGUAGE: python
CODE:
```
with count_queries() as counter:
    huey = User.get(User.username == 'huey')
    huey_tweets = [tweet.message for tweet in huey.tweets]

assert counter.count == 2
```

----------------------------------------

TITLE: Finding Facility with Most Booked Slots (SQL/Peewee)
DESCRIPTION: Identifies the facility ID that has the highest total number of slots booked by grouping bookings by facility, ordering by the sum of slots in descending order, and limiting the result to the top one.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_45

LANGUAGE: sql
CODE:
```
SELECT facid, SUM(slots) FROM bookings
GROUP BY facid
ORDER BY SUM(slots) DESC
LIMIT 1
```

LANGUAGE: python
CODE:
```
query = (Booking
             .select(Booking.facility, fn.SUM(Booking.slots))
             .group_by(Booking.facility)
             .order_by(fn.SUM(Booking.slots).desc())
             .limit(1))

    # Retrieve multiple scalar values by calling scalar() with as_tuple=True.
    facid, nslots = query.scalar(as_tuple=True)
```

----------------------------------------

TITLE: Accessing Joined Model Instance with Peewee Python
DESCRIPTION: Demonstrates how to iterate over a query result and access attributes from the joined model instance using the attribute name specified by the `attr` parameter in the `join` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_26

LANGUAGE: python
CODE:
```
for user in user_log:
 print(user.username, user.log.description)
```

----------------------------------------

TITLE: Querying DateField Year in Peewee Python
DESCRIPTION: Demonstrates how to filter database records based on the year component of a DateField using the '.year' attribute in a Peewee query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_75

LANGUAGE: python
CODE:
```
Person.select().where(Person.dob.year == 1983)
```

----------------------------------------

TITLE: Using SqliteExtDatabase with Pragmas (Python)
DESCRIPTION: Demonstrates connecting to a SQLite database using `SqliteExtDatabase` from `playhouse.sqlite_ext` to enable advanced features. It shows how to pass a dictionary of pragmas during initialization to configure connection settings like journal mode, cache size, and synchronous behavior.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_10

LANGUAGE: python
CODE:
```
from playhouse.sqlite_ext import SqliteExtDatabase

    sqlite_db = SqliteExtDatabase('my_app.db', pragmas={
        'journal_mode': 'wal',  # WAL-mode.
        'cache_size': -64 * 1000,  # 64MB cache.
        'synchronous': 0})  # Let the OS manage syncing.
```

----------------------------------------

TITLE: Querying Many-to-Many Relationship (Partial) in Peewee Python
DESCRIPTION: Starts a Peewee query to find students enrolled in a specific course, demonstrating the beginning of a query that would typically involve joining through the junction table. Note: This snippet is incomplete as provided in the source text.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_33

LANGUAGE: python
CODE:
```
query = (Student
```

----------------------------------------

TITLE: Filter Records Using SQL Functions (Peewee, Python)
DESCRIPTION: This snippet demonstrates using Peewee's fn helper to apply SQL functions (Lower, Substr) within a where clause to filter records based on a condition applied to a column (Person.name). It finds people whose names start with 'g' (case-insensitive).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_26

LANGUAGE: python
CODE:
```
expression = fn.Lower(fn.Substr(Person.name, 1, 1)) == 'g'
    for person in Person.select().where(expression):
        print(person.name)
```

----------------------------------------

TITLE: Querying Facilities with Low Revenue (SQL/Peewee)
DESCRIPTION: Lists facilities with a total revenue less than 1000. Revenue is calculated based on member/guest costs, and the results are grouped by facility name, filtered by the revenue total, and sorted by revenue.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_44

LANGUAGE: sql
CODE:
```
SELECT f.name, SUM(b.slots * (
    CASE WHEN b.memid = 0 THEN f.guestcost ELSE f.membercost END)) AS revenue
FROM bookings AS b
INNER JOIN facilities AS f ON b.facid = f.facid
GROUP BY f.name
HAVING SUM(b.slots * ...) < 1000
ORDER BY revenue;
```

LANGUAGE: python
CODE:
```
# Same definition as previous example.
revenue = fn.SUM(Booking.slots * Case(None, (
        (Booking.member == 0, Facility.guestcost),
    ), Facility.membercost))

    query = (Facility
             .select(Facility.name, revenue.alias('revenue'))
             .join(Booking)
             .group_by(Facility.name)
             .having(revenue < 1000)
             .order_by(SQL('revenue')))
```

----------------------------------------

TITLE: Managing Peewee Database Connections in Flask Python
DESCRIPTION: Demonstrates how to integrate Peewee database connection management into a Flask web application. It uses Flask's `@app.before_request` decorator to open a connection before each request and `@app.after_request` to close it after the response, ensuring connections are properly handled during the request/response cycle.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_6

LANGUAGE: python
CODE:
```
@app.before_request
def before_request():
    database.connect()

@app.after_request
def after_request(response):
    database.close()
    return response
```

----------------------------------------

TITLE: Retrieving Scalar Count of Distinct Values in Peewee (Python)
DESCRIPTION: Demonstrates how to use the `.scalar()` method to retrieve a single value from a query. This specific query counts the number of distinct URLs in the PageView model.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_74

LANGUAGE: python
CODE:
```
>>> PageView.select(fn.Count(fn.Distinct(PageView.url))).scalar()
```

----------------------------------------

TITLE: Using Peewee assert_query_count Decorator in Python
DESCRIPTION: Illustrates using the `assert_query_count` function as a decorator on a test method to verify the exact number of queries executed by the method. It shows a test case for fetching popular blogs.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_153

LANGUAGE: python
CODE:
```
class TestMyApp(unittest.TestCase):
    @assert_query_count(1)
    def test_get_popular_blogs(self):
        popular_blogs = Blog.get_popular()
        self.assertEqual(
            [blog.title for blog in popular_blogs],
            ["Peewee's Playhouse!", "All About Huey", "Mickey's Adventures"])
```

----------------------------------------

TITLE: Querying Facilities with High Bookings (SQL/Peewee)
DESCRIPTION: Selects the facility ID and the total number of slots booked for facilities where the sum of slots exceeds 1000. The results are grouped and sorted by facility ID.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_42

LANGUAGE: sql
CODE:
```
SELECT facid, SUM(slots) FROM bookings
GROUP BY facid
HAVING SUM(slots) > 1000
ORDER BY facid;
```

LANGUAGE: python
CODE:
```
query = (Booking
             .select(Booking.facility, fn.SUM(Booking.slots))
             .group_by(Booking.facility)
             .having(fn.SUM(Booking.slots) > 1000)
             .order_by(Booking.facility))
```

----------------------------------------

TITLE: Counting Recommendations Per Member
DESCRIPTION: Calculates the number of recommendations made by each member. Results are grouped by the recommender and ordered by their ID, excluding members with no recommendations.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_37

LANGUAGE: sql
CODE:
```
SELECT recommendedby, COUNT(memid) FROM members
WHERE recommendedby IS NOT NULL
GROUP BY recommendedby
ORDER BY recommendedby
```

LANGUAGE: python
CODE:
```
query = (Member
             .select(Member.recommendedby, fn.COUNT(Member.memid))
             .where(Member.recommendedby.is_null(False))
             .group_by(Member.recommendedby)
             .order_by(Member.recommendedby))
```

----------------------------------------

TITLE: Sorting Peewee Query Across Joins (Pycon)
DESCRIPTION: Illustrates how to sort a query that involves a join by fields from both the main table and the joined table, specifying different sort directions for each field.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_58

LANGUAGE: pycon
CODE:
```
query = (Tweet
             .select()
             .join(User)
             .order_by(User.username, Tweet.created_date.desc()))
```

----------------------------------------

TITLE: Iterating Over Peewee Back-reference Query (Python)
DESCRIPTION: Demonstrates iterating over the Select query object returned by accessing a back-reference attribute, just like any other Peewee query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_40

LANGUAGE: Python
CODE:
```
for tweet in user.tweets:
    print(tweet.message)
```

----------------------------------------

TITLE: Using Peewee DatabaseProxy for Dynamic Database Selection (Python)
DESCRIPTION: Shows how to use `DatabaseProxy` as a placeholder for a database in model definitions, allowing the actual database instance to be determined and assigned to the proxy at runtime based on application configuration.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_25

LANGUAGE: python
CODE:
```
database_proxy = DatabaseProxy()  # Create a proxy for our db.

class BaseModel(Model):
    class Meta:
        database = database_proxy  # Use proxy for our DB.

class User(BaseModel):
    username = CharField()

# Based on configuration, use a different database.
if app.config['DEBUG']:
    database = SqliteDatabase('local.db')
elif app.config['TESTING']:
    database = SqliteDatabase(':memory:')
else:
    database = PostgresqlDatabase('mega_production_db')

# Configure our proxy to use the db we specified in config.
database_proxy.initialize(database)
```

----------------------------------------

TITLE: Filtering by Date in SQL and Peewee
DESCRIPTION: Shows how to select records based on a date comparison, specifically finding members who joined after a certain date, using both SQL and Peewee with Python's datetime module.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_9

LANGUAGE: sql
CODE:
```
SELECT memid, surname, firstname, joindate FROM members
WHERE joindate >= '2012-09-01';
```

LANGUAGE: python
CODE:
```
query = (Member
             .select(Member.memid, Member.surname, Member.firstname, Member.joindate)
             .where(Member.joindate >= datetime.date(2012, 9, 1)))
```

----------------------------------------

TITLE: Defining Self-Referential Foreign Key
DESCRIPTION: Illustrates how to create a self-referential foreign key in a model by using the special string `'self'` as the target model name, useful for hierarchical data structures.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_66

LANGUAGE: python
CODE:
```
class Category(Model):
    name = CharField()
    parent = ForeignKeyField('self', null=True, backref='children')
```

----------------------------------------

TITLE: Filtering Peewee Records Using Subqueries and `in_()`
DESCRIPTION: Shows how to use a subquery within the .where() clause to filter records. The example finds tweets authored by users whose usernames start with 'a' using the .in_() method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_49

LANGUAGE: python
CODE:
```
# get users whose username starts with "a"
a_users = User.select().where(fn.Lower(fn.Substr(User.username, 1, 1)) == 'a')

# the ".in_()" method signifies an "IN" query
a_user_tweets = Tweet.select().where(Tweet.user.in_(a_users))
```

----------------------------------------

TITLE: Using object_list Helper Function for Pagination (Python)
DESCRIPTION: Shows how to use the `object_list` helper function in a Flask route to handle retrieving and paginating a list of objects based on a Peewee `SelectQuery`. It demonstrates passing the template name, query, context variable name, and items per page.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_162

LANGUAGE: python
CODE:
```
@app.route('/blog/')
def post_index():
    public_posts = (Post
                    .select()
                    .where(Post.published == True)
                    .order_by(Post.timestamp.desc()))

    return object_list(
        'post_index.html',
        query=public_posts,
        context_variable='post_list',
        paginate_by=10)
```

----------------------------------------

TITLE: Using Peewee's CRDB Transaction Decorator
DESCRIPTION: Demonstrates using the `@db.transaction()` decorator provided by Peewee's CockroachDatabase extension. This wraps the function execution within a transaction, handling commit or rollback upon completion.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/crdb.rst#_snippet_4

LANGUAGE: python
CODE:
```
@db.transaction()
def create_user(username):
    return User.create(username=username)
```

----------------------------------------

TITLE: Deleting Multiple Rows with Query (Peewee) - Python
DESCRIPTION: Shows how to delete a set of rows based on a condition using a `DELETE` query in Peewee. It constructs a query to delete `Tweet` objects older than one year and executes it.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_31

LANGUAGE: python
CODE:
```
query = Tweet.delete().where(Tweet.creation_date < one_year_ago)
query.execute()  # Returns the number of rows deleted.
# Expected output: 7
```

----------------------------------------

TITLE: Managing Peewee Connection in CherryPy
DESCRIPTION: Shows how to manage Peewee database connections within a CherryPy application using the publish/subscribe pattern. Functions `_db_connect` and `_db_close` are subscribed to the `before_request` and `after_request` engine events respectively to open and close the database connection for each request.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_57

LANGUAGE: python
CODE:
```
def _db_connect():
    db.connect()

def _db_close():
    if not db.is_closed():
        db.close()

cherrypy.engine.subscribe('before_request', _db_connect)
cherrypy.engine.subscribe('after_request', _db_close)
```

----------------------------------------

TITLE: Set Postgres Search Path and Add Column with Peewee Migrator (Python)
DESCRIPTION: Demonstrates how to set the search path for a Postgres database using `PostgresqlMigrator` before adding a new column to a table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_142

LANGUAGE: python
CODE:
```
new_field = TextField(default='', null=False)
migrator = PostgresqlMigrator(db)
migrate(migrator.set_search_path('my_schema_name'),
                migrator.add_column('table', 'field_name', new_field))
```

----------------------------------------

TITLE: Defining Peewee Model with Server-Side Default Constraint (Python)
DESCRIPTION: Shows how to use the `constraints` parameter to specify a database-level default value using raw SQL, allowing the database server to handle the default value assignment.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_10

LANGUAGE: python
CODE:
```
class Message(Model):
    context = TextField()
    timestamp = DateTimeField(constraints=[SQL('DEFAULT CURRENT_TIMESTAMP')])
```

----------------------------------------

TITLE: Saving Objects with Non-Auto-Incrementing PK (Peewee, Python)
DESCRIPTION: Explains how to correctly save new model instances when using a non-auto-incrementing primary key (like UUID), demonstrating the need to use force_insert=True for the initial save operation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_57

LANGUAGE: python
CODE:
```
# This works because .create() will specify `force_insert=True`.
obj1 = UUIDModel.create(id=uuid.uuid4())

# This will not work, however. Peewee will attempt to do an update:
obj2 = UUIDModel(id=uuid.uuid4())
obj2.save() # WRONG

obj2.save(force_insert=True) # CORRECT

# Once the object has been created, you can call save() normally.
obj2.save()
```

----------------------------------------

TITLE: Add Peewee Index to Model (Python)
DESCRIPTION: Shows the complete process of defining a Peewee index object and then associating it with a model definition using `Model.add_index()`. This ensures the index is created when the model's table is created.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_63

LANGUAGE: python
CODE:
```
idx = Article.index(Article.name, Article.timestamp).where(Article.status == 1)

# Add above index definition to the model definition. When you call
# Article.create_table() (or database.create_tables([Article])), the
# index will be created.
Article.add_index(idx)
```

----------------------------------------

TITLE: Composing SQL Functions with fn() (Peewee, Python)
DESCRIPTION: Shows how to chain or nest `fn()` calls to represent complex SQL expressions. This example uses `fn.SUBSTR` to get the first character of the username and `fn.LOWER` to convert it to lowercase, then filters users whose username starts with 'a' (case-insensitive).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_32

LANGUAGE: python
CODE:
```
# Get users whose username begins with "A" or "a":
a_users = User.select().where(fn.LOWER(fn.SUBSTR(User.username, 1, 1)) == 'a')
```

----------------------------------------

TITLE: Complex Peewee Join with Model Aliasing
DESCRIPTION: Demonstrates how to perform a complex join in Peewee involving multiple tables and aliasing a model (`User`) using `Model.alias()` to reference it multiple times within the same query. Requires `Favorite`, `Tweet`, and `User` models with appropriate foreign keys.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_13

LANGUAGE: python
CODE:
```
Owner = User.alias()
query = (Favorite
             .select(Favorite, Tweet.content, User.username, Owner.username)
             .join(Owner)  # Join favorite -> user (owner of favorite).
             .switch(Favorite)
             .join(Tweet)  # Join favorite -> tweet
             .join(User))   # Join tweet -> user
```

----------------------------------------

TITLE: Combining Iterator with Tuple Results for Efficiency (Python)
DESCRIPTION: Demonstrates combining the .tuples() method with .iterator() to retrieve results as tuples without caching, offering further speed and memory improvements for large datasets.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_43

LANGUAGE: Python
CODE:
```
stats = Stat.select()

serializer = CSVSerializer()

for stat_tuple in stats.tuples().iterator():
```

----------------------------------------

TITLE: Top N Tweets per User with Lateral Join (Postgres SQL)
DESCRIPTION: This SQL snippet illustrates the use of a LEFT JOIN LATERAL in PostgreSQL to find the top N (specifically, 3) most recent tweets for each user. The lateral subquery executes for each row of the left table (the user subquery), allowing a correlated subquery to efficiently retrieve the limited set of tweets per user.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_5

LANGUAGE: sql
CODE:
```
SELECT * FROM
  (SELECT id, username FROM user) AS uq
   LEFT JOIN LATERAL
  (SELECT message, created_date
   FROM tweet
   WHERE (user_id = uq.id)
   ORDER BY created_date DESC LIMIT 3)
  AS pq ON true
```

----------------------------------------

TITLE: Deleting Data Using a Subquery in Peewee (Python)
DESCRIPTION: Demonstrates how to delete rows based on conditions in a related table by using a subquery. First, a subquery selects the IDs from the related table (Person), and then the main delete query uses the in_ operator with the subquery to filter rows in the target table (Note).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_16

LANGUAGE: python
CODE:
```
# Get the id of all people whose last name is "Foo".
foo_people = Person.select(Person.id).where(Person.last == 'Foo')

# Delete all notes by any person whose ID is in the previous query.
Note.delete().where(Note.person_id.in_(foo_people)).execute()
```

----------------------------------------

TITLE: Listing Total Slots Per Facility
DESCRIPTION: Aggregates the total number of booking slots used for each facility. The results are grouped by facility ID and ordered accordingly.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_38

LANGUAGE: sql
CODE:
```
SELECT facid, SUM(slots) FROM bookings GROUP BY facid ORDER BY facid;
```

LANGUAGE: python
CODE:
```
query = (Booking
             .select(Booking.facid, fn.SUM(Booking.slots))
             .group_by(Booking.facid)
             .order_by(Booking.facid))
```

----------------------------------------

TITLE: Querying Costly Bookings (Original Complex) - Peewee
DESCRIPTION: This Peewee snippet shows an initial approach to querying costly bookings using direct joins and calculating the cost within the query's WHERE clause and SELECT list. It filters by date and cost. Iteration using namedtuples is demonstrated.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_20

LANGUAGE: python
CODE:
```
.select(fullname.alias('member'), Facility.name.alias('facility'),
                     cost.alias('cost'))
             .join(Booking)
             .join(Facility)
             .where(
                 (fn.date_trunc('day', Booking.starttime) == datetime.date(2012, 9, 14)) &
                 (cost > 30))
             .order_by(SQL('cost').desc()))

    # To iterate over the results, it might be easiest to use namedtuples:
    for row in query.namedtuples():
        print(row.member, row.facility, row.cost)
```

----------------------------------------

TITLE: Negating IS NULL and IN Queries (Peewee, Python)
DESCRIPTION: Explains how to perform `IS NOT NULL` and `NOT IN` queries in Peewee. It shows using the `.is_null(False)` method, the `.not_in(list)` method, and how unary negation (`~`) can be applied to the operator overload syntax.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_4

LANGUAGE: python
CODE:
```
# Get all User objects whose last login is *NOT* NULL.
User.select().where(User.last_login.is_null(False))
```

LANGUAGE: python
CODE:
```
# Using unary negation instead.
User.select().where(~(User.last_login >> None))
```

LANGUAGE: python
CODE:
```
# Get users whose username is *NOT* in the given list.
usernames = ['charlie', 'huey', 'mickey']
User.select().where(User.username.not_in(usernames))
```

LANGUAGE: python
CODE:
```
# Using unary negation instead.
usernames = ['charlie', 'huey', 'mickey']
User.select().where(~(User.username << usernames))
```

----------------------------------------

TITLE: Disabling Auto-Increment for Bulk Inserts (Peewee, Python)
DESCRIPTION: Illustrates how to temporarily disable the auto-increment behavior for a model's primary key by setting _meta.auto_increment = False, useful for manually assigning primary key values during bulk data loading.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_59

LANGUAGE: python
CODE:
```
data = load_user_csv() # load up a bunch of data

User._meta.auto_increment = False # turn off auto incrementing IDs
with db.atomic():
    for row in data:
        # ... process and save rows ...
```

----------------------------------------

TITLE: Defining a Peewee Model for Tree Structure
DESCRIPTION: This Peewee `Model` definition represents a hierarchical structure, such as categories. It includes a `name` field and a `parent` `ForeignKeyField` that references the model itself, allowing for parent-child relationships.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_106

LANGUAGE: python
CODE:
```
class Category(Model):
    name = TextField()
    parent = ForeignKeyField('self', backref='children', null=True)
```

----------------------------------------

TITLE: Using peewee's chunked function in Python
DESCRIPTION: This snippet demonstrates how to use the `chunked` helper function to iterate over an iterable in fixed-size chunks. It takes an iterable and a chunk size `n`, yielding sub-lists of length `n` (or less for the last chunk).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_135

LANGUAGE: python
CODE:
```
it = range(10)  # An iterable that yields 0...9.

# Break the iterable into chunks of length 4.
for chunk in chunked(it, 4):
    print(', '.join(str(num) for num in chunk))
```

----------------------------------------

TITLE: Querying with DateTimeField Timestamps (Python)
DESCRIPTION: Illustrates using the `to_timestamp()` method on `DateTimeField` columns (`start`, `stop`) to perform date/time arithmetic in a database query, specifically finding events with a duration of exactly one hour.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_73

LANGUAGE: python
CODE:
```
# Find all events that are exactly 1 hour long.
query = (Event
         .select()
         .where((Event.start.to_timestamp() + 3600) ==
                Event.stop.to_timestamp())
         .order_by(Event.start))
```

----------------------------------------

TITLE: Accessing Related Data from Fetched Object (Peewee, Python)
DESCRIPTION: Demonstrates how to access related model data (user username and tweet content) from an already fetched tweet object. This approach can lead to N+1 queries if not handled efficiently.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_133

LANGUAGE: Python
CODE:
```
print(tweet.user.username, '->', tweet.content)
```

----------------------------------------

TITLE: Managing Peewee Connections with Django Middleware (New Style)
DESCRIPTION: Defines a function-based middleware for Django 1.10+ that connects to the Peewee database before processing a request and closes the connection after the response is generated, ensuring the connection is always closed even if errors occur.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_47

LANGUAGE: python
CODE:
```
# middleware.py
from my_blog.db import database  # Import the peewee database instance.


def PeeweeConnectionMiddleware(get_response):
    def middleware(request):
        database.connect()
        try:
            response = get_response(request)
        finally:
            if not database.is_closed():
                database.close()
        return response
    return middleware
```

----------------------------------------

TITLE: Converting Dictionary to Peewee Model (dict_to_model)
DESCRIPTION: Illustrates how to use the dict_to_model function to create a Peewee model instance from a dictionary, including handling nested dictionaries for foreign keys and lists of dictionaries for backreferences.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_111

LANGUAGE: pycon
CODE:
```
>>> user_data = {'id': 1, 'username': 'charlie'}
>>> user = dict_to_model(User, user_data)
>>> user
<__main__.User at 0x7fea8fa4d490>
```

LANGUAGE: pycon
CODE:
```
>>> user.username
'charlie'
```

LANGUAGE: pycon
CODE:
```
>>> note_data = {'id': 2, 'text': 'note text', 'user': user_data}
>>> note = dict_to_model(Note, note_data)
>>> note.text
'note text'
>>> note.user.username
'charlie'
```

LANGUAGE: pycon
CODE:
```
>>> user_with_notes = {
...     'id': 1,
...     'username': 'charlie',
...     'notes': [{'id': 1, 'text': 'note-1'}, {'id': 2, 'text': 'note-2'}]}
>>> user = dict_to_model(User, user_with_notes)
>>> user.notes[0].text
'note-1'
>>> user.notes[0].user.username
'charlie'
```

----------------------------------------

TITLE: Using RETURNING with Peewee Insert Query
DESCRIPTION: Demonstrates using the RETURNING clause with an INSERT query to retrieve data from the newly created row. It shows how to insert data, use `fn.now()` for a server-generated timestamp, and access the returned Model instance from the cursor.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_97

LANGUAGE: python
CODE:
```
query = (User
             .insert(email='foo@bar.com', created=fn.now())
             .returning(User))  # Shorthand for all columns on User.

# When using RETURNING, execute() returns a cursor.
cursor = query.execute()

# Get the user object we just inserted and log the data:
user = cursor[0]
logger.info('Created user %s (id=%s) at %s', user.email, user.id, user.created)
```

----------------------------------------

TITLE: Execute Raw Select Query using Peewee Python
DESCRIPTION: Shows how to execute a raw SQL SELECT query using the `raw` class method. It demonstrates iterating over the results, which are returned as model instances.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_104

LANGUAGE: python
CODE:
```
q = User.raw('select id, username from users')
for user in q:
    print(user.id, user.username)
```

----------------------------------------

TITLE: Joining Users on a Specific Foreign Key with Peewee (Python)
DESCRIPTION: This example shows how to use the `join` method to join the `User` model with the `Relationship` model. It explicitly specifies the join predicate using the `on` parameter, joining on the `Relationship.to_user` foreign key field.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_128

LANGUAGE: python
CODE:
```
sq = User.select().join(Relationship, on=Relationship.to_user)
```

----------------------------------------

TITLE: Using RETURNING Clause with INSERT in Peewee (Python)
DESCRIPTION: Shows how to use the `returning` method with an INSERT query (specifically `insert_many`) to retrieve specified columns from the newly inserted rows. The example inserts multiple users and retrieves their `id` and `username`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_53

LANGUAGE: python
CODE:
```
query = (User
         .insert_many([{'username': 'foo'},
                                   {'username': 'bar'},
                                   {'username': 'baz'}])
         .returning(User.id, User.username)
         .namedtuples())
```

----------------------------------------

TITLE: Using Peewee ServerSide Helper for Large Queries (Python)
DESCRIPTION: Illustrates how to wrap a Peewee select query with the `ServerSide` helper to enable server-side cursors, allowing iteration over large result sets without loading all data into memory at once. Requires a transaction context.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_29

LANGUAGE: Python
CODE:
```
large_query = PageView.select()  # Build query normally.

# Iterate over large query inside a transaction.
for page_view in ServerSide(large_query):
    # do some interesting analysis here.
    pass

# Server-side resources are released.
```

----------------------------------------

TITLE: Using Peewee Database.manual_commit for Explicit Transaction Control
DESCRIPTION: Shows how to use the `Database.manual_commit()` context manager to disable automatic transaction management. Within this block, transactions must be explicitly started (`db.begin()`), committed (`db.commit()`), or rolled back (`db.rollback()`). Demonstrates error handling within a manual transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_5

LANGUAGE: python
CODE:
```
with db.manual_commit():
    db.begin()  # Begin transaction explicitly.
    try:
        user.delete_instance(recursive=True)
    except:
        db.rollback()  # Rollback -- an error occurred.
        raise
    else:
        try:
            db.commit()  # Attempt to commit changes.
        except:
            db.rollback()  # Error committing, rollback.
            raise
```

----------------------------------------

TITLE: Querying Top N per Group with RANK (Peewee, Python)
DESCRIPTION: Constructs a Peewee query using a subquery with `fn.RANK()` to partition by user and order by date, then filters the outer query to select the top 3 tweets per user. This method is typically used with databases supporting window functions like PostgreSQL.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_9

LANGUAGE: python
CODE:
```
TweetAlias = Tweet.alias()

# The subquery will select the relevant data from the Tweet and
# User table, as well as ranking the tweets by user from newest
# to oldest.
subquery = (TweetAlias
            .select(
                TweetAlias.message,
                User.username,
                fn.RANK().over(
                    partition_by=[TweetAlias.user],
                    order_by=[TweetAlias.created_date.desc()]).alias('rnk'))
            .join(User, on=(TweetAlias.user == User.id))
            .alias('subq'))

# Since we can't filter on the rank, we are wrapping it in a query
# and performing the filtering in the outer query.
query = (Tweet
         .select(subquery.c.message, subquery.c.username)
         .from_(subquery)
         .where(subquery.c.rnk <= 3))
```

----------------------------------------

TITLE: Defining Peewee Models using db.Model Property
DESCRIPTION: Demonstrates the new `db.Model` property introduced in Peewee 3.15.4 to reduce boilerplate when defining models associated with a specific database instance, comparing the old and new syntax.
SOURCE: https://github.com/coleifer/peewee/blob/master/CHANGELOG.md#_snippet_0

LANGUAGE: Python
CODE:
```
# old:
db = SqliteDatabase('...')

class BaseModel(Model):
    class Meta:
        database = db

class MyModel(BaseModel):
    pass
```

LANGUAGE: Python
CODE:
```
# new:
db = SqliteDatabase('...')

class MyModel(db.Model):
    pass
```

----------------------------------------

TITLE: Using RETURNING with Insert Many and dicts()
DESCRIPTION: Shows how to use RETURNING with `insert_many` and specify specific columns to return (`User.id`, `User.username`). It also demonstrates using the `.dicts()` method to retrieve results as dictionaries instead of Model instances.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_98

LANGUAGE: python
CODE:
```
data = [{'name': 'charlie'}, {'name': 'huey'}, {'name': 'mickey'}]
query = (User
             .insert_many(data)
             .returning(User.id, User.username)
             .dicts())

for new_user in query.execute():
    print('Added user "%s", id=%s' % (new_user['username'], new_user['id']))
```

----------------------------------------

TITLE: Defining DecimalField with Constraints in Peewee
DESCRIPTION: Demonstrates how to define a `DecimalField` in a Peewee model, specifying decimal places and adding arbitrary constraints using the `Check` object. This allows enforcing data integrity at the database level.
SOURCE: https://github.com/coleifer/peewee/blob/master/CHANGELOG.md#_snippet_5

LANGUAGE: Python
CODE:
```
price = DecimalField(decimal_places=2, constraints=[Check('price > 0')])
```

----------------------------------------

TITLE: Demonstrating Peewee Optimistic Locking Usage and Conflict
DESCRIPTION: Provides an interactive Python session example demonstrating the usage of the `save_optimistic` method. It shows creating and saving a new record, attempting to save without changes (raising ValueError), successfully updating and saving, simulating a concurrent update from another instance, and finally attempting to save the original instance after the concurrent update, which triggers the `ConflictDetectedException` as expected.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_2

LANGUAGE: pycon
CODE:
```
>>> u = User(username='charlie', favorite_animal='cat')
>>> u.save_optimistic()
True

>>> u.version
1

>>> u.save_optimistic()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "x.py", line 18, in save_optimistic
    raise ValueError('No changes have been made.')
ValueError: No changes have been made.

>>> u.favorite_animal = 'kitten'
>>> u.save_optimistic()
True

# Simulate a separate thread coming in and updating the model.
>>> u2 = User.get(User.username == 'charlie')
>>> u2.favorite_animal = 'macaw'
>>> u2.save_optimistic()
True

# Now, attempt to change and re-save the original instance:
>>> u.favorite_animal = 'little parrot'
>>> u.save_optimistic()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "x.py", line 30, in save_optimistic
    raise ConflictDetectedException()
ConflictDetectedException: current version is out of sync
```

----------------------------------------

TITLE: Execute Peewee Query and Get Single Row as Dictionary - Python
DESCRIPTION: Illustrates using the `scalar()` method with `as_dict=True` to fetch the first row of a Peewee query as a dictionary, useful when selecting columns with aliases.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_45

LANGUAGE: python
CODE:
```
query = Note.select(fn.COUNT(Note.id).alias('count'))
assert query.scalar(db, as_dict=True) == {'count': 123}
```

----------------------------------------

TITLE: Performing Complex Atomic Update in Peewee (Python)
DESCRIPTION: Illustrates how to perform a more complex atomic update using Peewee's `Model.update` that involves calculations based on existing field values. This example updates an employee's bonus by adding 10% of their salary directly within the update query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_23

LANGUAGE: pycon
CODE:
```
>>> query = Employee.update(bonus=(Employee.bonus + (Employee.salary * .1)))
>>> query.execute()  # Give everyone a bonus!
```

----------------------------------------

TITLE: Base Query for Sorting by Calculated Value (Python)
DESCRIPTION: Sets up a base Peewee query that selects usernames and counts the number of tweets per user, grouping the results by username, which is a prerequisite for sorting by the tweet count.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_60

LANGUAGE: python
CODE:
```
# Let's start with our base query. We want to get all usernames and the number of
# tweets they've made. We wish to sort this list from users with most tweets to
# users with fewest tweets.
query = (User
             .select(User.username, fn.COUNT(Tweet.id).alias('num_tweets'))
             .join(Tweet, JOIN.LEFT_OUTER)
             .group_by(User.username))
```

----------------------------------------

TITLE: Initializing FlaskDB with Database URL (Python)
DESCRIPTION: Shows the basic initialization of the FlaskDB wrapper by passing the Flask application instance and a database connection URL string directly to the constructor.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_157

LANGUAGE: python
CODE:
```
app = Flask(__name__)
db_wrapper = FlaskDB(app, 'sqlite:///my_app.db')
```

----------------------------------------

TITLE: Selecting with Subquery and Table Alias in Peewee
DESCRIPTION: Demonstrates a complex query using a subquery ('max_note') to find the latest note timestamp for each person. It then joins the main 'Note' table, the subquery, and the 'Person' table to retrieve details of the most recent note for each person.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_6

LANGUAGE: python
CODE:
```
# Start with the query that calculates the timestamp of the most recent
    # note for each person.
    NA = Note.alias('na')
    max_note = (NA
                .select(NA.person_id, fn.MAX(NA.timestamp).alias('max_ts'))
                .group_by(NA.person_id)
                .alias('max_note'))

    # Now we'll select from the note table, joining on both the subquery and
    # on the person table to construct the result set.
    query = (Note
             .select(Note.content, Note.timestamp, Person.first, Person.last)
             .join(max_note, on=((max_note.c.person_id == Note.person_id) &
```

----------------------------------------

TITLE: Querying Most Recent Tweet per User with Subquery (Peewee Python)
DESCRIPTION: This snippet demonstrates how to find the most recent tweet for each user using the MAX() aggregate function within a non-correlated subquery. It aliases the Tweet model to create the subquery, which calculates the maximum creation timestamp per user, and then joins the main Tweet query with this subquery to filter for the tweets matching the maximum timestamp for each user. This method is designed for performance across various database systems.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_3

LANGUAGE: python
CODE:
```
# When referencing a table multiple times, we'll call Model.alias() to create
# a secondary reference to the table.
TweetAlias = Tweet.alias()

# Create a subquery that will calculate the maximum Tweet created_date for each
# user.
subquery = (TweetAlias
                .select(
                    TweetAlias.user,
                    fn.MAX(TweetAlias.created_date).alias('max_ts'))
                .group_by(TweetAlias.user)
                .alias('tweet_max_subquery'))

# Query for tweets and join using the subquery to match the tweet's user
# and created_date.
query = (Tweet
             .select(Tweet, User)
             .join(User)
             .switch(Tweet)
             .join(subquery, on=(
                 (Tweet.created_date == subquery.c.max_ts) &
                 (Tweet.user == subquery.c.user_id))))
```

----------------------------------------

TITLE: Connecting Peewee using MySQLConnectorDatabase (Python)
DESCRIPTION: Shows how to initialize a Peewee database connection using the `MySQLConnectorDatabase` class from `playhouse.mysql_ext`. This class utilizes the `mysql-connector` driver. Requires importing the class and providing connection parameters.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_65

LANGUAGE: python
CODE:
```
from playhouse.mysql_ext import MySQLConnectorDatabase

# MySQL database implementation that utilizes mysql-connector driver.
db = MySQLConnectorDatabase('my_database', host='1.2.3.4', user='mysql')
```

----------------------------------------

TITLE: Executing Peewee Table Creation Python
DESCRIPTION: Shows how to import the application components (`app`) and execute the `create_tables` function from an interactive Python shell. This demonstrates the command-line method for initializing the database schema after setting up the application.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/example.rst#_snippet_4

LANGUAGE: python
CODE:
```
>>> from app import *
>>> create_tables()
```

----------------------------------------

TITLE: Initializing Peewee Database with Runtime Configuration (Python)
DESCRIPTION: Illustrates how to configure a previously uninitialized Peewee Database instance at runtime by calling the `init` method with the database name and connection parameters like host and user.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_24

LANGUAGE: python
CODE:
```
database_name = input('What is the name of the db? ')
database.init(database_name, host='localhost', user='postgres')
```

----------------------------------------

TITLE: Using ThreadSafeDatabaseMetadata in Peewee
DESCRIPTION: Shows an example of how to use the ThreadSafeDatabaseMetadata class to manage database connections in a multi-threaded application, allowing for runtime swapping of the database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_112

LANGUAGE: python
CODE:
```
from playhouse.shortcuts import ThreadSafeDatabaseMetadata

# Our multi-threaded application will sometimes swap out the primary
# for the read-replica at run-time.
primary = PostgresqlDatabase(...)
read_replica = PostgresqlDatabase(...)

class BaseModel(Model):

```

----------------------------------------

TITLE: Counting Members With At Least One Booking
DESCRIPTION: Determines the total count of unique members who have made at least one booking. Demonstrates using DISTINCT with COUNT in SQL and Peewee.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_41

LANGUAGE: sql
CODE:
```
SELECT COUNT(DISTINCT memid) FROM bookings

-- OR --
SELECT COUNT(1) FROM (SELECT DISTINCT memid FROM bookings) AS _
```

LANGUAGE: python
CODE:
```
query = Booking.select(fn.COUNT(Booking.member.distinct()))

# OR:
query = Booking.select(Booking.member).distinct()
count = query.count()  # count() wraps in SELECT COUNT(1) FROM (...)
```

----------------------------------------

TITLE: Deleting all rows with delete in Peewee Python
DESCRIPTION: Shows how to use the `delete` method without any arguments to remove all rows from a table (`db['secret_messages']`).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_88

LANGUAGE: python
CODE:
```
# Delete all the secret messages.
db['secret_messages'].delete()
```

----------------------------------------

TITLE: Using Peewee Data-Modifying CTE for Archiving
DESCRIPTION: This Peewee code uses a data-modifying CTE (`moved_rows`) to delete rows from the `Event` table older than 24 hours and return the deleted rows. It then inserts these returned rows into the `Archive` table in a single atomic operation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_109

LANGUAGE: python
CODE:
```
# Move rows older than 24 hours from the Event table to the Archive.
cte = (Event
       .delete()
       .where(Event.timestamp < (datetime.now() - timedelta(days=1)))
       .returning(Event)
       .cte('moved_rows'))

# Create a simple SELECT to get the resulting rows from the CTE.
src = Select((cte,), (cte.c.id, cte.c.name, cte.c.timestamp))

# Insert into the archive table whatever data was returned by the DELETE.
res = (Archive
       .insert_from(src, (Archive.id, Archive.name, Archive.timestamp))
       .with_cte(cte)
       .execute())
```

----------------------------------------

TITLE: Adding Table-Level CHECK Constraint in Peewee
DESCRIPTION: Shows how to define a table-level `CHECK` constraint on a model using the `constraints` attribute within the `Meta` class, ensuring that a specific condition (e.g., price less than 10000) is met for all rows.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_50

LANGUAGE: python
CODE:
```
class Product(Model):
    name = CharField(unique=True)
    price = DecimalField()

    class Meta:
        constraints = [Check('price < 10000')]
```

----------------------------------------

TITLE: Counting Query Results with Peewee Scalar (Python)
DESCRIPTION: Provides a more concise method for counting query results in Peewee using the `scalar()` method, which is suitable for aggregate queries returning a single value.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_18

LANGUAGE: python
CODE:
```
def count(query):
    wrapped = Select(from_list=[query], columns=[fn.COUNT(SQL('1'))])
    return wrapped.scalar(db)
```

----------------------------------------

TITLE: Querying Most Recent Tweet per User with Group By/Having (Peewee Python - SQLite/MySQL)
DESCRIPTION: This snippet provides a more concise approach for databases like SQLite and MySQL that allow grouping by a subset of selected columns. It directly uses GROUP BY on the user and filters using a HAVING clause where the tweet's creation date equals the maximum creation date for that user group, eliminating the need for a separate subquery.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_4

LANGUAGE: python
CODE:
```
query = (Tweet
             .select(Tweet, User)
             .join(User)
             .group_by(Tweet.user)
             .having(Tweet.created_date == fn.MAX(Tweet.created_date)))
```

----------------------------------------

TITLE: Iterating Peewee Query Results (Default vs .objects())
DESCRIPTION: Demonstrates how Peewee iterates over query results when selecting from multiple tables. Shows the default behavior of reconstructing the model graph and the .objects() method which avoids this for performance, assigning attributes directly to the primary model instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_44

LANGUAGE: python
CODE:
```
query = (Tweet
         .select(Tweet, User)  # Select tweet and user data.
         .join(User))

# Note that the user columns are stored in a separate User instance
# accessible at tweet.user:
for tweet in query:
    print(tweet.user.username, tweet.content)

# Using ".objects()" will not create the tweet.user object and assigns all
# user attributes to the tweet instance:
for tweet in query.objects():
    print(tweet.username, tweet.content)
```

----------------------------------------

TITLE: Inserting Data Without Instance (Model.insert) (Peewee, Python)
DESCRIPTION: Demonstrates using the `Model.insert` method to insert data directly into the database without first creating a model instance. The `execute()` method is called to run the query, and it returns the primary key of the new row.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_4

LANGUAGE: pycon
CODE:
```
>>> User.insert(username='Mickey').execute()
3
```

----------------------------------------

TITLE: Insert Multiple Rows with Dictionaries using Peewee Python
DESCRIPTION: Shows an alternative way to use `insert_many` by providing a list of dictionaries. This method automatically infers the fields from the dictionary keys.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_101

LANGUAGE: python
CODE:
```
data = [
    {'username': 'charlie', 'is_admin': True},
    {'username': 'huey', 'is_admin': False},
    {'username': 'zaizee', 'is_admin': False}]

# Insert new rows.
User.insert_many(data).execute()
```

----------------------------------------

TITLE: Updating and Deleting Records by ID in Python
DESCRIPTION: Shows how to update an existing record or insert a new record using dictionary-like assignment by ID, and how to delete a record using the `del` keyword.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_69

LANGUAGE: python
CODE:
```
huey = table.find_one(name='Huey')
# {'age': 3, 'gender': None, 'id': 1, 'name': 'Huey'}

# Perform an update by supplying a partial record of changes.
table[1] = {'gender': 'male', 'age': 4}
print(table[1])
# {'age': 4, 'gender': 'male', 'id': 1, 'name': 'Huey'}

# Or insert a new record:
table[3] = {'name': 'Zaizee', 'age': 2}
print(table[3])
# {'age': 2, 'gender': None, 'id': 3, 'name': 'Zaizee'}

# Or delete a record:
del table[3]  # Remove the row we just added.
```

----------------------------------------

TITLE: Peewee: Nesting SQL functions and reusing expressions (Python)
DESCRIPTION: Illustrates how to nest SQL functions (`fn.LOWER`, `fn.SUBSTR`) using the `fn` helper, assign the resulting expression to a variable, use it in a `select` clause with an alias, and reuse the same expression in a `where` clause to filter results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_18

LANGUAGE: python
CODE:
```
# Select the user's id, username and the first letter of their username, lower-cased
first_letter = fn.LOWER(fn.SUBSTR(User.username, 1, 1))
query = User.select(User, first_letter.alias('first_letter'))

# Alternatively we could select only users whose username begins with 'a'
a_users = User.select().where(first_letter == 'a')

>>> for user in a_users:
...    print(user.username)
```

----------------------------------------

TITLE: Grouping Query Results by Table in Peewee (Python)
DESCRIPTION: Shows how to use the `group_by` method to group query results. The example demonstrates grouping by the entire `User` table object and including an aggregate count of related tweets.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_51

LANGUAGE: python
CODE:
```
query = (User
         .select(User, fn.Count(Tweet.id).alias('count'))
         .join(Tweet)
         .group_by(User))
```

----------------------------------------

TITLE: Querying with Peewee exists and alias (Python)
DESCRIPTION: Demonstrates using the `exists` function to check for related records and aliasing the result in a Peewee select query. Iterates through the results, accessing the aliased boolean value.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_26

LANGUAGE: Python
CODE:
```
>>> has_garage = House.features.exists('garage')
>>> for house in House.select(House.address, has_garage.alias('has_garage')):
...     print(house.address, house.has_garage)
```

----------------------------------------

TITLE: Sorting Peewee Query Ascending (Pycon)
DESCRIPTION: Demonstrates iterating through query results sorted in ascending order by a date field using the default `order_by` behavior in a Python console.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_55

LANGUAGE: pycon
CODE:
```
>>> for t in Tweet.select().order_by(Tweet.created_date):
...     print(t.pub_date)
...
2010-01-01 00:00:00
2011-06-07 14:08:48
2011-06-07 14:12:57
```

----------------------------------------

TITLE: Using Generated Peewee Models (Pycon)
DESCRIPTION: Shows how to import the models generated by `pwiz` in an interactive Python session and perform a simple query using Peewee's `select()` method to fetch data.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_120

LANGUAGE: pycon
CODE:
```
>>> from mymodels import Blog, Entry, Tag, Whatever
>>> print([blog.name for blog in Blog.select()])
```

----------------------------------------

TITLE: Using DeferredForeignKey for Circular References in Peewee
DESCRIPTION: Illustrates how to use `DeferredForeignKey` to handle circular foreign key relationships between models, such as a `Husband` referencing a `Wife` and vice-versa. This is useful when models have dependencies on each other during definition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_79

LANGUAGE: python
CODE:
```
class Husband(Model):
    name = TextField()
    wife = DeferredForeignKey('Wife', deferrable='INITIALLY DEFERRED')

class Wife(Model):
    name = TextField()
    husband = ForeignKeyField(Husband, deferrable='INITIALLY DEFERRED')
```

----------------------------------------

TITLE: Querying Latest Records with CTE (Peewee Python)
DESCRIPTION: This Python snippet demonstrates how to achieve the same result as the subquery example but using a Common Table Expression (CTE) in Peewee. It defines a CTE named 'latest' to find the maximum timestamp per user and then joins the `Tweet` and `User` models with this CTE. The query uses the `.with_cte()` method to include the defined CTE.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_19

LANGUAGE: python
CODE:
```
# Define our CTE first. We'll use an alias of the Tweet model, since
# we will be querying from the Tweet model directly in the main query.
Latest = Tweet.alias()
cte = (Latest
       .select(Latest.user, fn.MAX(Latest.timestamp).alias('max_ts'))
       .group_by(Latest.user)
       .cte('latest'))

# Our join predicate will ensure that we match tweets based on their
# timestamp *and* user_id.
predicate = ((Tweet.user == cte.c.user_id) &
             (Tweet.timestamp == cte.c.max_ts))

# We put it all together, querying from tweet and joining on the CTE
# using the above predicate.
query = (Tweet
         .select(Tweet, User)  # Select all columns from tweet and user.
         .join(cte, on=predicate)  # Join tweet -> CTE.
         .join_from(Tweet, User)  # Join from tweet -> user.
         .with_cte(cte))
```

----------------------------------------

TITLE: Managing Peewee Connections with Bottle Hooks
DESCRIPTION: Uses Bottle's `@hook('before_request')` and `@hook('after_request')` decorators to automatically connect to the Peewee database before each request and close the connection after each request, respectively. This ensures proper database connection management within a Bottle application.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_50

LANGUAGE: python
CODE:
```
# app.py
from bottle import hook  #, route, etc, etc.
from peewee import *

db = SqliteDatabase('my-bottle-app.db')

@hook('before_request')
def _connect_db():
    db.connect()

@hook('after_request')
def _close_db():
    if not db.is_closed():
        db.close()
```

----------------------------------------

TITLE: Creating Circular Foreign Key with DeferredForeignKey in Peewee
DESCRIPTION: Demonstrates how to handle circular foreign-key relationships using `DeferredForeignKey`. It shows creating tables first and then explicitly adding the foreign-key constraint for the deferred field using the `SchemaManager`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_96

LANGUAGE: python
CODE:
```
class Language(Model):
    name = TextField()
    selected_snippet = DeferredForeignKey('Snippet')

class Snippet(Model):
    code = TextField()
    language = ForeignKeyField(Language, backref='snippets')

# Creates both tables but does not create the constraint for the
# Language.selected_snippet foreign key (because of the circular
# dependency).
db.create_tables([Language, Snippet])

# Explicitly create the constraint:
Language._schema.create_foreign_key(Language.selected_snippet)
```

----------------------------------------

TITLE: Generating Models from MySQL DB (Console)
DESCRIPTION: Provides the command-line syntax for using `pwiz` to introspect a MySQL database, including specifying the user (`-u`) and using the `-P` flag to be prompted for a password.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_122

LANGUAGE: console
CODE:
```
# Introspect a MySQL database, logging in as root. You will be prompted
# for a password ("-P").
python -m pwiz -e mysql -u root -P mysql_db_name
```

----------------------------------------

TITLE: Defining Composite Primary Key (Peewee Python)
DESCRIPTION: Illustrates how to define a primary key composed of multiple fields using the `CompositeKey` class within the model's `Meta` class, specifying the field names as strings.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_95

LANGUAGE: python
CODE:
```
class BlogTagThrough(Model):
    pass # ... field definitions ...

    class Meta:
        primary_key = CompositeKey('blog', 'tag')
```

----------------------------------------

TITLE: Sorting Peewee Query by Calculated Value (SQL Helper) (Python)
DESCRIPTION: Demonstrates sorting a query by a calculated aggregate value using the alias assigned in the `select` clause, referencing the alias name wrapped in the `SQL` helper function.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_62

LANGUAGE: python
CODE:
```
query = (User
             .select(User.username, fn.COUNT(Tweet.id).alias('num_tweets'))
             .join(Tweet, JOIN.LEFT_OUTER)
             .group_by(User.username)
             .order_by(SQL('num_tweets').desc()))
```

----------------------------------------

TITLE: Ranking Peewee FTS Search Results - Python
DESCRIPTION: Illustrates how to use the `rank` class method to calculate a relevance score for search results. It constructs a query that selects the model and the calculated rank score (aliased as 'score'), filters by a match phrase, and orders the results by the rank score. It then iterates through the results, printing the title and the score.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_40

LANGUAGE: python
CODE:
```
query = (DocumentIndex
    .select(
        DocumentIndex,
        DocumentIndex.rank().alias('score'))
    .where(DocumentIndex.match('search phrase'))
    .order_by(DocumentIndex.rank()))

for search_result in query:
    print(search_result.title, search_result.score)
```

----------------------------------------

TITLE: Naive Bulk Insert Loop (Peewee, Python)
DESCRIPTION: Presents a simple but inefficient method for inserting multiple records by iterating through data and calling `Model.create` for each item. This approach is slow due to individual transactions and overhead per insert.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_5

LANGUAGE: python
CODE:
```
data_source = [
    {'field1': 'val1-1', 'field2': 'val1-2'},
    {'field1': 'val2-1', 'field2': 'val2-2'},
    # ...
]

for data_dict in data_source:
    MyModel.create(**data_dict)
```

----------------------------------------

TITLE: Creating and Using a Peewee Model Alias for Self-Join (Python)
DESCRIPTION: Shows how to create an alias for a Peewee model using the `alias()` classmethod. This is useful for querying the same table multiple times, such as in a self-join, as demonstrated in the example query selecting categories and their parent categories.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_99

LANGUAGE: python
CODE:
```
Parent = Category.alias()
sq = (Category
          .select(Category, Parent)
          .join(Parent, on=(Category.parent == Parent.id))
          .where(Parent.name == 'parent category'))
```

----------------------------------------

TITLE: Searching Peewee FTS Model (Weighted/Scored) - Python
DESCRIPTION: Shows a more advanced full-text search using the `search` method, specifying weights for different fields ('title', 'content'), requesting the search score, and assigning it an alias ('search_score'). It then iterates through results, printing both the title and the calculated score.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_39

LANGUAGE: python
CODE:
```
# More complete example.
docs = DocumentIndex.search(
    'search term',
    weights={'title': 2.0, 'content': 1.0},
    with_score=True,
    score_alias='search_score')
for result in docs:
    print(result.title, result.search_score)
```

----------------------------------------

TITLE: Using Peewee's CRDB Transaction Context Manager
DESCRIPTION: Illustrates using the `with db.transaction()` context manager for managing transactions with Peewee's CockroachDatabase. Shows how nested calls to `db.transaction()` within a context manager block are folded into the outer transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/crdb.rst#_snippet_5

LANGUAGE: python
CODE:
```
def some_other_function():
    with db.transaction() as txn:
        # do some stuff...

        # This function is wrapped in a transaction, but the nested
        # transaction will be ignored and folded into the outer
        # transaction, as we are already in a wrapped-block (via the
        # context manager).
        create_user('some_user@example.com')

        # do other stuff.

    # At this point we have exited the outer-most block and the transaction
    # will be committed.
    return
```

----------------------------------------

TITLE: Performing Peewee Full-Text Search using Match function (Python)
DESCRIPTION: Shows how to use the `Match` function to generate a full-text search expression in Peewee. It automatically converts the field to `tsvector` and the search term to `tsquery`. Requires a model with a field suitable for full-text search.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_62

LANGUAGE: python
CODE:
```
def blog_search(search_term):
    return Blog.select().where(
        (Blog.status == Blog.STATUS_PUBLISHED) &
        Match(Blog.content, search_term))
```

----------------------------------------

TITLE: Querying Members and Recommender without Joins - Peewee
DESCRIPTION: This Peewee snippet replicates the SQL query to list members and their recommenders without using joins, employing a subquery for the recommender lookup. It orders the results by the member's full name.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_22

LANGUAGE: python
CODE:
```
MA = Member.alias()
    subq = (MA
            .select(MA.firstname + ' ' + MA.surname)
            .where(Member.recommendedby == MA.memid))
    query = (Member
             .select(fullname.alias('member'), subq.alias('recommended'))
             .order_by(fullname))
```

----------------------------------------

TITLE: Bulk Inserting Data with List of Tuples in Peewee (Python)
DESCRIPTION: Shows how to perform a bulk insert using a list of tuples. When using tuples, the columns corresponding to the tuple values must be explicitly specified using the columns parameter. The method executes the insert and returns the ID of the last inserted row.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_11

LANGUAGE: python
CODE:
```
# We can also specify row tuples, so long as we tell Peewee which
# columns the tuple values correspond to:
people = [
    ('Bob', 'Foo'),
    ('Herb', 'Bar'),
    ('Nuggie', 'Bar')]
Person.insert(people, columns=[Person.first, Person.last]).execute()
```

----------------------------------------

TITLE: Finding Records Based on Aggregation (Subquery) in SQL and Peewee
DESCRIPTION: Demonstrates how to find records (like the last member(s) to sign up) by comparing a column value to the result of an aggregate subquery, using both SQL and Peewee with table aliasing.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_13

LANGUAGE: sql
CODE:
```
SELECT firstname, surname, joindate FROM members
WHERE joindate = (SELECT MAX(joindate) FROM members);
```

LANGUAGE: python
CODE:
```
# Use "alias()" to reference the same table multiple times in a query.
MemberAlias = Member.alias()
subq = MemberAlias.select(fn.MAX(MemberAlias.joindate))
query = (Member
             .select(Member.firstname, Member.surname, Member.joindate)
             .where(Member.joindate == subq))
```

----------------------------------------

TITLE: Setting Peewee Request Factory in Pyramid
DESCRIPTION: Demonstrates how to configure a Pyramid application to use a custom request factory (`MyRequest`) which presumably handles Peewee database connection management per request. This ensures the database connection is properly managed within the request lifecycle.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_56

LANGUAGE: python
CODE:
```
def main(global_settings, **settings):
    config = Configurator(settings=settings, ...)
    config.set_request_factory(MyRequest)
```

----------------------------------------

TITLE: Defining Composite Primary Key in Meta (Peewee, Python)
DESCRIPTION: Another example showing the definition of a composite primary key using CompositeKey within the Meta class of a Peewee model, typically used for many-to-many junction tables.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_58

LANGUAGE: python
CODE:
```
class BlogToTag(Model):
    """A simple "through" table for many-to-many relationship."""
    blog = ForeignKeyField(Blog)
    tag = ForeignKeyField(Tag)

    class Meta:
        primary_key = CompositeKey('blog', 'tag')
```

----------------------------------------

TITLE: Querying JSON Data with contains_all (Peewee Python)
DESCRIPTION: Shows how to use the `contains_all` method to verify if a JSON document contains all of the specified top-level keys or items within a nested list/dictionary. Examples demonstrate searching at the top level and within a sub-key.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_59

LANGUAGE: python
CODE:
```
APIResponse.select().where(
    APIResponse.data.contains_all('foo'))
```

LANGUAGE: python
CODE:
```
APIResponse.select().where(
    APIResponse.data['foo']['bar'].contains_all('i1', 'i2', 'i3'))
```

----------------------------------------

TITLE: Filtering Peewee JSONField by Nested Key Value
DESCRIPTION: This snippet demonstrates how to filter records in a Peewee model based on the value of a nested key within a JSONField. It selects records from the APIResponse model where the 'model' key inside the 'meta' object within the 'response' JSON field is equal to 'offense'.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_13

LANGUAGE: python
CODE:
```
offense_responses = APIResponse.select().where(
    APIResponse.response['meta']['model'] == 'offense')
```

----------------------------------------

TITLE: Updating Nested JSON Value in Peewee
DESCRIPTION: This example demonstrates how to update a specific nested value within a JSON field using the `set()` method on a `JSONPath` object. It shows the update operation and then retrieves the record to verify the change.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_17

LANGUAGE: pycon
CODE:
```
>>> KV.update(value=KV.value['k2'].set({'x2': 'y2'})).execute()
1
>>> KV.get(KV.key == 'a').value
{'k1': 'v1', 'k2': {'x2': 'y2'}}
```

----------------------------------------

TITLE: Combining Results with UNION in SQL and Peewee
DESCRIPTION: Explains how to combine the results of two separate queries into a single result set using SQL's UNION operator and Peewee's | operator for query composition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_11

LANGUAGE: sql
CODE:
```
SELECT surname FROM members UNION SELECT name FROM facilities;
```

LANGUAGE: python
CODE:
```
lhs = Member.select(Member.surname)
rhs = Facility.select(Facility.name)
query = lhs | rhs
```

----------------------------------------

TITLE: Filtering with Peewee exists in where (Python)
DESCRIPTION: Shows how to use the `exists` function within the `where` clause of a Peewee select query to filter records based on the existence of related data. Iterates through the filtered results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_27

LANGUAGE: Python
CODE:
```
>>> for house in House.select().where(House.features.exists('garage')):
...     print(house.address, house.features['garage'])  # <-- just houses w/garage data
```

----------------------------------------

TITLE: Querying Tags with Minimum Photo Count in Peewee (Python)
DESCRIPTION: Creates a Peewee query to find tags that are associated with at least 5 photos. It joins the Tag, PhotoTag, and Photo models, groups by Tag, and uses a HAVING clause with `fn.Count` to filter based on the photo count.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_71

LANGUAGE: python
CODE:
```
query = (Tag
 .select()
 .join(PhotoTag)
 .join(Photo)
 .group_by(Tag)
 .having(fn.Count(Photo.id) > 5))
```

----------------------------------------

TITLE: Handling Insert Conflicts with Peewee on_conflict (Python)
DESCRIPTION: Shows how to use the `on_conflict` clause with a peewee `insert` query. It defines a `User` model with a unique username. The `log_user_in` function attempts to insert a user; if the username exists, it preserves the original `last_login` value from the insert attempt and atomically increments the `login_count` of the existing row.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_59

LANGUAGE: python
CODE:
```
class User(Model):
    username = TextField(unique=True)
    last_login = DateTimeField(null=True)
    login_count = IntegerField()

def log_user_in(username):
    now = datetime.datetime.now()

    # INSERT a new row for the user with the current timestamp and
    # login count set to 1. If the user already exists, then we
    # will preserve the last_login value from the "insert()" clause
    # and atomically increment the login-count.
    userid = (User
              .insert(username=username, last_login=now, login_count=1)
              .on_conflict(
                  conflict_target=[User.username],
                  preserve=[User.last_login],
                  update={User.login_count: User.login_count + 1})
              .execute())
    return userid
```

----------------------------------------

TITLE: Simple User Creation with CockroachDB Transaction Retries in Python
DESCRIPTION: This is a basic example showing how to use `CockroachDatabase.run_transaction` to create a new user within a transaction. The user creation logic is placed inside a callback function (`callback`) which is executed by `run_transaction` and automatically retried up to 10 times if necessary.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/crdb.rst#_snippet_8

LANGUAGE: python
CODE:
```
def create_user(email):
    def callback(db_ref):
        return User.create(email=email)

    return db.run_transaction(callback, max_attempts=10)

user = create_user('huey@example.com')
```

----------------------------------------

TITLE: Sorting Peewee Query with Prefix Operators (Python)
DESCRIPTION: Shows how to use the unary `-` operator for descending order and the unary `+` operator for ascending order as an alternative syntax to `.desc()` and `.asc()` in Peewee queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_57

LANGUAGE: python
CODE:
```
# The following queries are equivalent:
Tweet.select().order_by(Tweet.created_date.desc())

Tweet.select().order_by(-Tweet.created_date)  # Note the "-" prefix.

# Similarly you can use "+" to indicate ascending order, though ascending
# is the default when no ordering is otherwise specified.
User.select().order_by(+User.username)
```

----------------------------------------

TITLE: Insert Data from Select Query using Peewee Python
DESCRIPTION: Provides an example of using `insert_from` to insert data into `UserTweetDenorm` by selecting and aggregating data from the `User` and `Tweet` tables. This is useful for denormalization.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_103

LANGUAGE: python
CODE:
```
source = (User
          .select(User.username, fn.COUNT(Tweet.id))
          .join(Tweet, JOIN.LEFT_OUTER)
          .group_by(User.username))

UserTweetDenorm.insert_from(
    source,
    [UserTweetDenorm.username, UserTweetDenorm.num_tweets]).execute()
```

----------------------------------------

TITLE: Execute Multiple Migrator Operations with Peewee (Python)
DESCRIPTION: Illustrates how to execute multiple schema migration operations, such as adding a column and creating an index, in a single call to the `migrate` function.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_143

LANGUAGE: python
CODE:
```
migrate(
    migrator.add_column('some_table', 'new_column', CharField(default='')),
    migrator.create_index('some_table', ('new_column',)),
)
```

----------------------------------------

TITLE: Sorting Peewee Query by Calculated Value (Variable Alias) (Python)
DESCRIPTION: Shows a more "peewee" way to sort by a calculated aggregate value by assigning the aggregate expression to a variable and then using that variable both for the alias in `select` and in the `order_by` clause.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_63

LANGUAGE: python
CODE:
```
ntweets = fn.COUNT(Tweet.id)
query = (User
             .select(User.username, ntweets.alias('num_tweets'))
             .join(Tweet, JOIN.LEFT_OUTER)
             .group_by(User.username)
             .order_by(ntweets.desc()))
```

----------------------------------------

TITLE: Inserting Rows with batch_commit Helper (Peewee, Python)
DESCRIPTION: Demonstrates using the `Database.batch_commit` helper to process and insert rows in chunks, with each chunk committed within its own transaction. This is useful for large datasets and obtaining primary keys.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_16

LANGUAGE: python
CODE:
```
# List of row data to insert.
row_data = [{'username': 'u1'}, {'username': 'u2'}, ...]

# Assume there are 789 items in row_data. The following code will result in
# 8 total transactions (7x100 rows + 1x89 rows).
for row in db.batch_commit(row_data, 100):
    User.create(**row)
```

----------------------------------------

TITLE: Inserting Data from Another Table with insert_from (Peewee, Python)
DESCRIPTION: Shows how to insert data into one table (`TweetArchive`) by selecting data directly from another table (`Tweet`) using the `Model.insert_from` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_17

LANGUAGE: python
CODE:
```
res = (TweetArchive
       .insert_from(
           Tweet.select(Tweet.user, Tweet.message),
           fields=[TweetArchive.user, TweetArchive.message])
       .execute())
```

----------------------------------------

TITLE: Running Peewee Migrations in Transaction - Python
DESCRIPTION: Wraps the `migrate` function call within the database's `atomic()` context manager to ensure that all migration operations are executed as a single, atomic transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_130

LANGUAGE: python
CODE:
```
with my_db.atomic():
    migrate(...)
```

----------------------------------------

TITLE: Defining Hybrid Attributes and Methods in Peewee Python
DESCRIPTION: Defines a Peewee `Model` (`Interval`) with `start` and `end` fields, demonstrating the use of `@hybrid_property` for a calculated attribute (`length`) and `@hybrid_method` for a method (`contains`) that can operate in both Python and SQL contexts.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_89

LANGUAGE: python
CODE:
```
class Interval(Model):
    start = IntegerField()
    end = IntegerField()

    @hybrid_property
    def length(self):
        return self.end - self.start

    @hybrid_method
    def contains(self, point):
        return (self.start <= point) & (point < self.end)
```

----------------------------------------

TITLE: Handling JSONB Data Retrieval in Peewee
DESCRIPTION: This snippet demonstrates how JSONB data stored in a Peewee model might be returned as bytes and shows the correct way to retrieve it as a Python dictionary using the `.json()` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_26

LANGUAGE: pycon
CODE:
```
>>> KV.create(key='a', value={'k1': 'v1'})
<KV: 1>
>>> KV.get(KV.key == 'a').value
b"l'k1'v1"
>>> kv = KV.select(KV.value.json()).get()
>>> kv.value
{'k1': 'v1'}

```

----------------------------------------

TITLE: Connecting post_save Signal with Decorator (Peewee Python)
DESCRIPTION: Shows how to define a Peewee model inheriting from `playhouse.signals.Model` and connect a function to the `post_save` signal for that specific model using the `@post_save` decorator. The handler receives the model class, instance, and a boolean indicating if it was created.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_113

LANGUAGE: python
CODE:
```
from playhouse.signals import Model, post_save


class MyModel(Model):
    data = IntegerField()

@post_save(sender=MyModel)
def on_save_handler(model_class, instance, created):
    put_data_in_cache(instance.data)
```

----------------------------------------

TITLE: Adding Peewee ForeignKeyField with Migrator - Python
DESCRIPTION: Demonstrates how to add a ForeignKeyField using the migrator, highlighting the convention of appending `_id` to the column name and specifying the target field (`User.id`) and nullability.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_132

LANGUAGE: python
CODE:
```
# Our desired model will look like this:
class Tweet(BaseModel):
    user = ForeignKeyField(User)  # I want to add this field.
    # ... other fields ...

# Migration code:
user = ForeignKeyField(User, field=User.id, null=True)
migrate(
    # Note that the column name given is "user_id".
    migrator.add_column(Tweet._meta.table_name, 'user_id', user),
)
```

----------------------------------------

TITLE: Define Model with JSONField and Fetch Data (Peewee PostgresqlExt Python)
DESCRIPTION: Defines a Peewee model `APIResponse` using `PostgresqlExtDatabase` that includes a `JSONField` to store arbitrary JSON data. Includes a class method to fetch data from a URL and store it.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_12

LANGUAGE: python
CODE:
```
import json
import urllib2
from playhouse.postgres_ext import *

db = PostgresqlExtDatabase('my_database')

class APIResponse(Model):
    url = CharField()
    response = JSONField()

    class Meta:
        database = db

    @classmethod
    def request(cls, url):
        fh = urllib2.urlopen(url)
        return cls.create(url=url, response=json.loads(fh.read()))

APIResponse.create_table()

# Store a JSON response.
offense = APIResponse.request('http://crime-api.com/api/offense/')
booking = APIResponse.request('http://crime-api.com/api/booking/')
```

----------------------------------------

TITLE: Generating Peewee Model File with pwiz CLI
DESCRIPTION: This console command demonstrates how to use the `pwiz` command-line tool to connect to an SQLite database ('events.db') and generate a Python file ('events.py') containing Peewee model definitions for all tables found in the database.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/interactive.rst#_snippet_6

LANGUAGE: console
CODE:
```
$ pwiz -e sqlite events.db > events.py
```

----------------------------------------

TITLE: Declaring Model with JSONField (Peewee/Postgres) - Python
DESCRIPTION: Provides an example of defining a Peewee model that includes a `JSONField` to store arbitrary JSON data, specifying the database connection.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_52

LANGUAGE: python
CODE:
```
db = PostgresqlExtDatabase('my_db')

class APIResponse(Model):
    url = CharField()
    response = JSONField()

    class Meta:
        database = db
```

----------------------------------------

TITLE: Performing a Self-Join with Subquery in Peewee Python
DESCRIPTION: Demonstrates an alternative method for performing a self-join using a subquery. The subquery selects the parent categories, is given an alias, and then joined with the main `Category` query using an explicit join condition referencing the subquery's columns via the `.c` attribute.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_29

LANGUAGE: python
CODE:
```
Parent = Category.alias()
join_query = Parent.select().where(Parent.name == 'Electronics')

# Subqueries used as JOINs need to have an alias.
join_query = join_query.alias('jq')

query = (Category
 .select()
 .join(join_query, on=(Category.parent == join_query.c.id)))
```

----------------------------------------

TITLE: Retrieving Peewee Query Results as Tuples (Python)
DESCRIPTION: This snippet shows how to execute a Peewee query and retrieve the results as a list of tuples instead of model instances using the `.tuples()` method. It selects and counts URLs, groups them, and then iterates over the resulting 2-tuples.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_93

LANGUAGE: python
CODE:
```
stats = (Stat
             .select(Stat.url, fn.Count(Stat.url))
             .group_by(Stat.url)
             .tuples())

# iterate over a list of 2-tuples containing the url and count
for stat_url, stat_count in stats:
    print(stat_url, stat_count)
```

----------------------------------------

TITLE: Retrieving Multiple Scalar Values as Tuple in Peewee (Python)
DESCRIPTION: Shows how to retrieve multiple scalar values from a query as a tuple using the `.scalar(as_tuple=True)` method. This example retrieves the minimum and maximum salary from the Employee model.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_75

LANGUAGE: python
CODE:
```
>>> Employee.select(
...     fn.Min(Employee.salary), fn.Max(Employee.salary)
... ).scalar(as_tuple=True)
```

----------------------------------------

TITLE: Using Peewee Database.atomic with Explicit Commit/Rollback
DESCRIPTION: Illustrates using the `Database.atomic()` context manager while explicitly calling `commit()` and `rollback()` on the transaction object (`txn`). Shows how `commit()` saves changes and starts a new transaction, while `rollback()` discards changes. Includes a verification step.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_4

LANGUAGE: python
CODE:
```
with db.atomic() as txn:
    User.create(username='mickey')
    txn.commit()  # Changes are saved and a new transaction begins.

    User.create(username='huey')
    txn.rollback()  # "huey" will not be saved.

    User.create(username='zaizee')

# Print the usernames of all users.
print([u.username for u in User.select()])

# Prints ["mickey", "zaizee"]
```

----------------------------------------

TITLE: Getting Row Count from Bulk Insert in Peewee Python
DESCRIPTION: This example shows how to execute a bulk INSERT query in Peewee and retrieve the number of affected rows instead of the last inserted row ID. It specifically uses the `as_rowcount()` method for this purpose, highlighting a change in default behavior in recent Peewee versions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_58

LANGUAGE: python
CODE:
```
db = MySQLDatabase(...)

query = User.insert_many([...])
# By default, the last rowid is returned:
#last_id = query.execute()

# To get the modified row-count:
rowcount = query.as_rowcount().execute()
```

----------------------------------------

TITLE: Rename Table using Peewee Migrator (Python)
DESCRIPTION: Demonstrates how to rename a database table from 'story' to 'stories_tbl' using the Peewee migrator.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_137

LANGUAGE: python
CODE:
```
migrate(
    migrator.rename_table('story', 'stories_tbl'),
)
```

----------------------------------------

TITLE: Dropping Column with Peewee Migrator - Python
DESCRIPTION: Uses the `migrator.drop_column` operation within the `migrate` function to remove a specified column from a database table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_134

LANGUAGE: python
CODE:
```
migrate(
    migrator.drop_column('story', 'some_old_field'),
)
```

----------------------------------------

TITLE: Querying JSON Data with contains (Peewee Python)
DESCRIPTION: Demonstrates using the `contains` method on a `BinaryJSONField` to check if a JSON document contains a specified JSON fragment. Examples show searching for a fragment within the main document and within a nested sub-key.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_57

LANGUAGE: python
CODE:
```
search_fragment = {
    'foo': {'bar': ['i2']}
}
query = (APIResponse
         .select()
         .where(APIResponse.data.contains(search_fragment)))

# If we're searching for a list, the list items do not need to
# be ordered in a particular way:
query = (APIResponse
         .select()
         .where(APIResponse.data.contains({
             'foo': {'bar': ['i2', 'i1']}})))
```

LANGUAGE: python
CODE:
```
APIResponse.select().where(
    APIResponse.data['foo']['bar'].contains(['i2', 'i1']))
```

----------------------------------------

TITLE: Updating Data with Dictionary Mapping in Peewee (Python)
DESCRIPTION: Shows how to update rows using a dictionary mapping model fields (columns) to their new values. This method is an alternative to using keyword arguments for updates. The update is restricted by the where clause, and execute() returns the number of affected rows.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_13

LANGUAGE: python
CODE:
```
# Use dictionary mapping column to value.
nrows = (Person
         .update({Person.last: 'Baze'})
         .where((Person.first == 'Bob') &
                (Person.last == 'Foo'))
         .execute())
```

----------------------------------------

TITLE: Using FlaskDB with Flask Application Factory (Python)
DESCRIPTION: Shows how to integrate FlaskDB with the Flask application factory pattern by initializing the wrapper without an app and then calling its `init_app()` method within the factory function. It also highlights that models can be defined using `db_wrapper.Model` before `init_app` is called.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_160

LANGUAGE: python
CODE:
```
db_wrapper = FlaskDB()

# Even though the database is not yet initialized, you can still use the
# `Model` property to create model classes.
class User(db_wrapper.Model):
    username = CharField(unique=True)


def create_app():
    app = Flask(__name__)
    app.config['DATABASE'] = 'sqlite:////home/code/apps/my-database.db'
    db_wrapper.init_app(app)
    return app
```

----------------------------------------

TITLE: Updating Column Using Subquery in Peewee (Python)
DESCRIPTION: Shows how to update a column in one model (`User.num_tweets`) using the result of a subquery (`Tweet.select(fn.COUNT(Tweet.id)).where(Tweet.user == User.id)`). This is useful for denormalized fields that need periodic updates based on related data.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_24

LANGUAGE: pycon
CODE:
```
>>> subquery = Tweet.select(fn.COUNT(Tweet.id)).where(Tweet.user == User.id)
>>> update = User.update(num_tweets=subquery)
>>> update.execute()
```

----------------------------------------

TITLE: Update with FROM Clause using ValuesList in Peewee Python
DESCRIPTION: This snippet shows how to perform an UPDATE query in Peewee using the `from_()` method, which is useful for updating rows based on data provided in a `ValuesList`. It demonstrates joining the target table with the `ValuesList` on a common column.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_56

LANGUAGE: python
CODE:
```
data = [('huey', True),
        ('mickey', False),
        ('zaizee', True)]
vl = ValuesList(data, columns=('username', 'is_admin'), alias='vl')

# Here we'll update the "is_admin" status of the above users,
# "joining" the VALUES() on the "username" column.
query = (User
         .update(is_admin=vl.c.is_admin)
         .from_(vl)
         .where(User.username == vl.c.username))
```

----------------------------------------

TITLE: Getting Random Records (Postgresql/Sqlite) (Python)
DESCRIPTION: Shows how to retrieve a specified number of random records from a table by ordering the query results using the database's random function (`fn.Random()`) and limiting the result set.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_64

LANGUAGE: python
CODE:
```
# Pick 5 lucky winners:
LotteryNumber.select().order_by(fn.Random()).limit(5)
```

----------------------------------------

TITLE: Using Peewee atomic as Context Manager with Nesting
DESCRIPTION: Demonstrates using `db.atomic()` as a context manager. The outer block represents a transaction, while nested blocks use savepoints. Shows how rolling back a savepoint affects only the operations within that savepoint.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_63

LANGUAGE: python
CODE:
```
db = SqliteDatabase(':memory:')

with db.atomic() as txn:
    # This is the outer-most level, so this block corresponds to
    # a transaction.
    User.create(username='charlie')

    with db.atomic() as nested_txn:
        # This block corresponds to a savepoint.
        User.create(username='huey')

        # This will roll back the above create() query.
        nested_txn.rollback()

    User.create(username='mickey')

# When the block ends, the transaction is committed (assuming no error
# occurs). At that point there will be two users, "charlie" and "mickey".
```

----------------------------------------

TITLE: Updating Records with DataSet in Python
DESCRIPTION: Demonstrates updating records in a table using the `table.update()` method, showing how to update specific rows based on filter columns or update all rows.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_74

LANGUAGE: python
CODE:
```
# Update the gender for "Huey".
table.update(name='Huey', gender='male', columns=['name'])

# Update all records. If the column does not exist, it will be created.
table.update(favorite_orm='peewee')
```

----------------------------------------

TITLE: Peewee: Using SQL functions in comparisons (Python)
DESCRIPTION: Shows how to use Peewee's `fn` helper to call SQL functions like `LOWER` and `SUBSTR` and compare their result against a value.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_12

LANGUAGE: python
CODE:
```
# user's username starts with a 'g' or a 'G':
fn.Lower(fn.Substr(User.username, 1, 1)) == 'g'
```

----------------------------------------

TITLE: Selecting and Accessing Nested JSON Object in Peewee
DESCRIPTION: This example shows how to select a specific nested JSON object from a JSONField using `.as_json()` and alias it. It then iterates through the results, accessing sub-keys within the selected nested object (aliased as 'person') as Python dictionaries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_14

LANGUAGE: python
CODE:
```
q = (APIResponse
     .select(
       APIResponse.data['booking']['person'].as_json().alias('person'))
     .where(APIResponse.data['meta']['model'] == 'booking'))

for result in q:
    print(result.person['name'], result.person['dob'])
```

----------------------------------------

TITLE: Peewee: Referencing arbitrary SQL using SQL class (Python)
DESCRIPTION: Introduces the `SQL` class in Peewee, which allows embedding arbitrary SQL fragments directly into queries, useful for cases like referencing aliases or complex database-specific syntax not directly supported by the ORM.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_19

LANGUAGE: python
CODE:
```
SQL
```

----------------------------------------

TITLE: Using Transactions with DataSet in Python
DESCRIPTION: Illustrates how to use the transaction context manager provided by DataSet, including nesting transactions and rolling back a nested transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_76

LANGUAGE: python
CODE:
```
table = db['users']
with db.transaction() as txn:
    table.insert(name='Charlie')

    with db.transaction() as nested_txn:
        # Set Charlie's favorite ORM to Django.
        table.update(name='Charlie', favorite_orm='django', columns=['name'])

        # jk/lol
        nested_txn.rollback()
```

----------------------------------------

TITLE: Configuring Django Settings for Peewee Middleware
DESCRIPTION: Demonstrates how to add the custom `PeeweeConnectionMiddleware` to the `MIDDLEWARE_CLASSES` setting in a Django project. It is recommended to place the Peewee middleware early in the list to ensure connections are managed before other middleware or view logic executes.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_49

LANGUAGE: python
CODE:
```
# settings.py
MIDDLEWARE_CLASSES = (
    # Our custom middleware appears first in the list.
    'my_blog.middleware.PeeweeConnectionMiddleware',

    # These are the default Django 1.7 middlewares. Yours may differ,
    # but the important this is that our Peewee middleware comes first.
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)

# ... other Django settings ...
```

----------------------------------------

TITLE: Getting and Using ManyToMany Through Model (Peewee Python)
DESCRIPTION: Demonstrates how to obtain a reference to the automatically or manually created through model for a ManyToManyField using `get_through_model()` and how to use it, for example, when creating database tables.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_93

LANGUAGE: python
CODE:
```
# Get a reference to the automatically-created through table.
StudentCourseThrough = Course.students.get_through_model()

# Create tables for our two models as well as the through model.
db.create_tables([
    Student,
    Course,
    StudentCourseThrough])
```

----------------------------------------

TITLE: Renaming Columns with Peewee Migrator - Python
DESCRIPTION: Uses the `migrator.rename_column` operation within the `migrate` function to change the names of one or more existing columns in a specified database table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_133

LANGUAGE: python
CODE:
```
# Specify the table, original name of the column, and its new name.
migrate(
    migrator.rename_column('story', 'pub_date', 'publish_date'),
    migrator.rename_column('story', 'mod_date', 'modified_date'),
)
```

----------------------------------------

TITLE: Specifying FROM Clause Sources in Peewee (Python)
DESCRIPTION: Shows how to use the `from_` method to specify multiple tables in the FROM clause of a query. The example selects columns from two tables (`User` and `Tweet`) and joins them using a `where` clause condition. It also shows iterating over the results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_49

LANGUAGE: python
CODE:
```
User = Table('users')
Tweet = Table('tweets')
query = (User
         .select(User.c.username, Tweet.c.content)
         .from_(User, Tweet)
         .where(User.c.id == Tweet.c.user_id))
for row in query.execute(db):
    print(row['username'], '->', row['content'])
```

----------------------------------------

TITLE: Using Peewee Case with a Predicate
DESCRIPTION: Demonstrates how to use the Peewee Case function with a predicate column to create a simple conditional expression, showing the equivalent generated SQL.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_33

LANGUAGE: Python
CODE:
```
Number = Table('numbers', ('val',))

num_as_str = Case(Number.val, (
    (1, 'one'),
    (2, 'two'),
    (3, 'three')), 'a lot')

query = Number.select(Number.val, num_as_str.alias('num_str'))
```

LANGUAGE: SQL
CODE:
```
SELECT "val",
  CASE "val"
      WHEN 1 THEN 'one'
      WHEN 2 THEN 'two'
      WHEN 3 THEN 'three'
      ELSE 'a lot' END AS "num_str"
FROM "numbers"
```

----------------------------------------

TITLE: Creating Record with Foreign Key (Primary Key Value) (Peewee, Python)
DESCRIPTION: Shows an alternative method for creating a record with a foreign key by assigning the primary key value of the related object directly to the foreign key field.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_3

LANGUAGE: pycon
CODE:
```
>>> tweet = Tweet.create(user=2, message='Hello again!')
```

----------------------------------------

TITLE: Performing Self-Join Query with Model.alias
DESCRIPTION: Demonstrates how to perform a self-join query on a model with a self-referential foreign key by using `Model.alias()` to create distinct table references for the join.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_67

LANGUAGE: python
CODE:
```
Parent = Category.alias()
GrandParent = Category.alias()
query = (Category
             .select(Category, Parent)
             .join(Parent, on=(Category.parent == Parent.id))
             .join(GrandParent, on=(Parent.parent == GrandParent.id))
             .where(GrandParent.name == 'some category')
             .order_by(Category.name))
```

----------------------------------------

TITLE: Initializing Extended Postgresql Database (playhouse) - Python
DESCRIPTION: Shows how to import and instantiate the `PostgresqlExtDatabase` class from the `playhouse.postgres_ext` module to utilize advanced Postgres features.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_5

LANGUAGE: python
CODE:
```
from playhouse.postgres_ext import PostgresqlExtDatabase

psql_db = PostgresqlExtDatabase('my_database', user='postgres')
```

----------------------------------------

TITLE: Find Recommendation Chain (SQL Recursive CTE)
DESCRIPTION: This SQL query uses a WITH RECURSIVE CTE to trace the upward recommendation chain starting from member ID 27, joining to get member names and ordering by descending member ID.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_57

LANGUAGE: sql
CODE:
```
WITH RECURSIVE recommenders(recommender) as (
  SELECT recommendedby FROM members WHERE memid = 27
  UNION ALL
  SELECT mems.recommendedby
  FROM recommenders recs
  INNER JOIN members AS mems ON mems.memid = recs.recommender
)
SELECT recs.recommender, mems.firstname, mems.surname
FROM recommenders AS recs
INNER JOIN members AS mems ON recs.recommender = mems.memid
ORDER By memid DESC;
```

----------------------------------------

TITLE: Calculate Average with Partitioning (Peewee Python)
DESCRIPTION: Demonstrates using fn.AVG().over() with partition_by to calculate the average of Sample.value within groups defined by Sample.counter. Iterates and prints results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_79

LANGUAGE: python
CODE:
```
query = Sample.select(
    Sample.counter,
    Sample.value,
    fn.AVG(Sample.value).over(partition_by=[Sample.counter]).alias('cavg'))

for sample in query:
    print(sample.counter, sample.value, sample.cavg)
```

----------------------------------------

TITLE: Using Peewee savepoint Explicitly
DESCRIPTION: Demonstrates using `db.savepoint()` explicitly within a `db.transaction()` block. Savepoints allow rolling back to a specific point within a larger transaction without rolling back the entire transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_70

LANGUAGE: python
CODE:
```
with db.transaction() as txn:
    with db.savepoint() as sp:
        User.create(username='mickey')

    with db.savepoint() as sp2:
        User.create(username='zaizee')
        sp2.rollback()  # "zaizee" will not be saved, but "mickey" will be.
```

----------------------------------------

TITLE: Deleting JSONField Keys (Peewee/Postgres) - Python
DESCRIPTION: Shows how to remove specific keys from a `JSONField` using the `delete()` method within an `UPDATE` query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_50

LANGUAGE: python
CODE:
```
>>> query = House.update(features=House.features.delete(
...     'sqft', 'year_built'))
>>> query.where(House.id == 1).execute()
```

----------------------------------------

TITLE: Initializing PostgresqlDatabase with Isolation Level (Python)
DESCRIPTION: Demonstrates how to set the transaction isolation level (e.g., SERIALIZABLE) when initializing a `PostgresqlDatabase` instance using the `isolation_level` parameter and symbolic constants from `psycopg2.extensions`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_6

LANGUAGE: python
CODE:
```
from psycopg2.extensions import ISOLATION_LEVEL_SERIALIZABLE

db = PostgresqlDatabase('my_app', user='postgres', host='db-host',
                            isolation_level=ISOLATION_LEVEL_SERIALIZABLE)
```

----------------------------------------

TITLE: Calculating Difference with Lag Window in Peewee (Python)
DESCRIPTION: Demonstrates using the `fn.LAG()` window function in Peewee to calculate the difference between the current row's 'value' and the previous row's 'value'. The window is ordered by 'id', and the result is aliased as 'diff'. The code then iterates and prints the results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_78

LANGUAGE: python
CODE:
```
difference = Sample.value - fn.LAG(Sample.value, 1).over(order_by=[Sample.id])
query = Sample.select(
 Sample.counter,
 Sample.value,
 difference.alias('diff'))

for sample in query:
 print(sample.counter, sample.value, sample.diff)
```

----------------------------------------

TITLE: Removing Nested JSON Value in Peewee
DESCRIPTION: This snippet illustrates the atomic removal of a specific nested value from a JSON field using the `remove()` method. It executes the update and then fetches the record to confirm the removal.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_18

LANGUAGE: pycon
CODE:
```
>>> KV.update(value=KV.value['k2'].remove()).execute()
1
>>> KV.get(KV.key == 'a').value
{'k1': 'v1'}
```

----------------------------------------

TITLE: Querying with Multiple Peewee CTEs
DESCRIPTION: This Peewee code constructs two CTEs: `regional_sales` to calculate total sales per region and `top_regions` to identify regions exceeding a sales threshold. It then queries the `Order` model, joining with the `top_regions` CTE to filter results.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_105

LANGUAGE: python
CODE:
```
reg_sales = (Order
             .select(Order.region,
                     fn.SUM(Order.amount).alias('total_sales'))
             .group_by(Order.region)
             .cte('regional_sales'))

top_regions = (reg_sales
               .select(reg_sales.c.region)
               .where(reg_sales.c.total_sales > (
                   reg_sales.select(fn.SUM(reg_sales.c.total_sales) / 10)))
               .cte('top_regions'))

query = (Order
         .select(Order.region,
                 Order.product,
                 fn.SUM(Order.quantity).alias('product_units'),
                 fn.SUM(Order.amount).alias('product_sales'))
         .where(Order.region.in_(top_regions.select(top_regions.c.region)))
         .group_by(Order.region, Order.product)
         .with_cte(reg_sales, top_regions))
```

----------------------------------------

TITLE: Getting Underlying DB-API Connection (Pycon)
DESCRIPTION: Demonstrates how to obtain a reference to the underlying DB-API 2.0 connection object using the `Database.connection()` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_42

LANGUAGE: pycon
CODE:
```
>>> db.connection()
<sqlite3.Connection object at 0x7f94e9362f10>
```

----------------------------------------

TITLE: Performing a Self-Join with Model Alias in Peewee Python
DESCRIPTION: Shows how to perform a self-join on the `Category` model using a `ModelAlias` to find categories whose parent category has a specific name ('Electronics'). The join condition is explicitly defined using the `on` keyword argument.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_28

LANGUAGE: python
CODE:
```
Parent = Category.alias()
query = (Category
 .select()
 .join(Parent, on=(Category.parent == Parent.id))
 .where(Parent.name == 'Electronics'))
```

----------------------------------------

TITLE: Using EXCLUDED Namespace for Conditional Upsert in Peewee
DESCRIPTION: Defines a simple Key-Value model (`KV`) and shows how to use `EXCLUDED.value` within the `update` clause and the `where` clause of `on_conflict`. It updates the value by summing the existing and excluded values only if the excluded value is greater than the existing one.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_28

LANGUAGE: python
CODE:
```
class KV(Model):
    key = CharField(unique=True)
    value = IntegerField()

# Create one row.
KV.create(key='k1', value=1)

# Demonstrate usage of EXCLUDED.
# Here we will attempt to insert a new value for a given key. If that
# key already exists, then we will update its value with the *sum* of its
# original value and the value we attempted to insert -- provided that
# the new value is larger than the original value.
query = (KV.insert(key='k1', value=10)
         .on_conflict(conflict_target=[KV.key],
                      update={KV.value: KV.value + EXCLUDED.value},
                      where=(EXCLUDED.value > KV.value)))

# Executing the above query will result in the following data being
# present in the "kv" table:
# (key='k1', value=11)
query.execute()

# If we attempted to execute the query *again*, then nothing would be
# updated, as the new value (10) is now less than the value in the
# original row (11).
```

----------------------------------------

TITLE: Peewee INNER JOIN returning Flattened Objects
DESCRIPTION: Shows how to use the `.objects()` method to flatten the results of a join, making selected fields from joined models appear as attributes directly on the primary model instance (Tweet). Requires a Peewee query object like the one created previously.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_11

LANGUAGE: pycon
CODE:
```
>>> for tweet in query.objects():
...     print(tweet.username, '->', tweet.content)
...
huey -> meow
(etc)
```

----------------------------------------

TITLE: Executing Peewee TSVectorField match method (Python)
DESCRIPTION: Demonstrates how to use the `match` method on a `TSVectorField` to perform a full-text search query. The method takes the search query string and optional language and plain flags. Requires a model with a `TSVectorField`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_64

LANGUAGE: python
CODE:
```
# Perform a search using the "match" method.
terms = 'python & (sqlite | postgres)'
results = Blog.select().where(Blog.search_content.match(terms))
```

----------------------------------------

TITLE: Updating JSONField Data (Peewee/Postgres) - Python
DESCRIPTION: Demonstrates performing an atomic update on a `JSONField` using the `update()` method to modify or add key-value pairs for selected rows.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_49

LANGUAGE: python
CODE:
```
>>> query = House.update(features=House.features.update(
...     sqft=2000,
...     year_built=2012))
>>> query.where(House.id == 1).execute()
```

----------------------------------------

TITLE: Storing Data in JSONField (Peewee/Postgres) - Python
DESCRIPTION: Shows examples of how to create new model instances and store Python dictionaries or lists directly into a `JSONField`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_53

LANGUAGE: python
CODE:
```
url = 'http://foo.com/api/resource/'
resp = json.loads(urllib2.urlopen(url).read())
APIResponse.create(url=url, response=resp)

APIResponse.create(url='http://foo.com/baz/', response={'key': 'value'})
```

----------------------------------------

TITLE: Defining Hybrid Properties in Peewee Model (Python)
DESCRIPTION: Defines `length` and `radius` as hybrid properties using `@hybrid_property` and `@radius.expression`. This allows accessing them as Python properties on instances and generating SQL expressions when used on the class.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_101

LANGUAGE: python
CODE:
```
class Interval(Model):
    start = IntegerField()
    end = IntegerField()

    @hybrid_property
    def length(self):
        return self.end - self.start

    @hybrid_property
    def radius(self):
        return abs(self.length) / 2

    @radius.expression
    def radius(cls):
        return fn.ABS(cls.length) / 2
```

----------------------------------------

TITLE: Configuring FlaskDB with Dictionary Settings (Python)
DESCRIPTION: Illustrates configuring FlaskDB using a Python dictionary for database settings, allowing for more advanced options like specifying a connection pool engine and its parameters. It also shows loading configuration from an object.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_158

LANGUAGE: python
CODE:
```
DATABASE = {
    'name': 'my_app_db',
    'engine': 'playhouse.pool.PooledPostgresqlDatabase',
    'user': 'postgres',
    'max_connections': 32,
    'stale_timeout': 600,
}

app = Flask(__name__)
app.config.from_object(__name__)

wrapper = FlaskDB(app)
pooled_postgres_db = wrapper.database
```

----------------------------------------

TITLE: Updating Peewee JSONField (Modifying/Removing Keys)
DESCRIPTION: Shows how to use the `update` method on a `JSONField` to modify existing key values and remove keys by setting their value to `None` within an atomic update operation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_15

LANGUAGE: python
CODE:
```
>>> KV.update(value=KV.value.update({'k1': 'v1-x', 'k3': None})).execute()
1
>>> KV.get(KV.key == 'a').value
{'k1': 'v1-x', 'k2': 'v2'}
```

----------------------------------------

TITLE: Configuring Peewee for Automatic Server-Side Cursors (Python)
DESCRIPTION: Shows how to initialize a `PostgresqlExtDatabase` instance with the `server_side_cursors=True` option to automatically use server-side cursors for all SELECT queries.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_30

LANGUAGE: Python
CODE:
```
from postgres_ext import PostgresqlExtDatabase

ss_db = PostgresqlExtDatabase('my_db', server_side_cursors=True)
```

----------------------------------------

TITLE: Iterating Subquery Results (Peewee Pycon)
DESCRIPTION: This Pycon snippet shows the output when iterating over the Peewee query result obtained from the subquery example. It prints the username of the user and the content of their latest tweet, demonstrating that the query successfully retrieved the desired data. The output confirms that only the latest tweet for 'huey' and 'mickey' is returned.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_17

LANGUAGE: pycon
CODE:
```
>>> for tweet in query:
...     print(tweet.user.username, '->', tweet.content)
...
huey -> purr
mickey -> whine
```

----------------------------------------

TITLE: Updating Peewee JSONField (Adding Keys)
DESCRIPTION: Demonstrates using the `update` method on a `JSONField` instance within a Peewee update query to add new key-value pairs to the existing JSON data atomically.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_14

LANGUAGE: python
CODE:
```
>>> KV.update(value=KV.value.update({'k2': 'v2', 'k3': 'v3'})).execute()
1
>>> KV.get(KV.key == 'a').value
{'k1': 'v1', 'k2': 'v2', 'k3': 'v3'}
```

----------------------------------------

TITLE: Using RETURNING with Peewee Select Query (Conceptual)
DESCRIPTION: Describes the RETURNING clause in Peewee, noting its availability for SELECT, INSERT, and DELETE queries. It explains that it returns modified rows and is limited to columns from tables in the FROM clause. The provided code snippet shows a portion of a SELECT query using RETURNING.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_96

LANGUAGE: python
CODE:
```
.where(User.registration_expired == True)
             .returning(User))
```

----------------------------------------

TITLE: Configuring SqliteDatabase with Multiple Pragmas (Python)
DESCRIPTION: Provides an example of initializing a `SqliteDatabase` instance and passing a dictionary of multiple SQLite pragmas to be applied when connections are created. This configures settings like journal mode, cache size, and foreign key enforcement.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_11

LANGUAGE: python
CODE:
```
db = SqliteDatabase('my_app.db', pragmas={
        'journal_mode': 'wal',
        'cache_size': 10000,  # 10000 pages, or ~40MB
        'foreign_keys': 1,  # Enforce foreign-key constraints
    })
```

----------------------------------------

TITLE: Listing Members Who Recommended Others - Peewee/SQL
DESCRIPTION: Identifies and lists members who have recommended at least one other member, using a self-join on the members table. The output is distinct and ordered by surname and firstname.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_16

LANGUAGE: sql
CODE:
```
SELECT DISTINCT m.firstname, m.surname
FROM members AS m2
INNER JOIN members AS m ON (m.memid = m2.recommendedby)
ORDER BY m.surname, m.firstname;
```

LANGUAGE: python
CODE:
```
MA = Member.alias()
query = (Member
             .select(Member.firstname, Member.surname)
             .join(MA, on=(MA.recommendedby == Member.memid))
             .order_by(Member.surname, Member.firstname))
```

----------------------------------------

TITLE: Listing Members Who Used Tennis Courts - Peewee/SQL
DESCRIPTION: Generates a distinct list of members who have made bookings for tennis courts, including the facility name. The member's full name is formatted into a single column, and the results are ordered by member name and facility name.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_18

LANGUAGE: sql
CODE:
```
SELECT DISTINCT m.firstname || ' ' || m.surname AS member, f.name AS facility
FROM members AS m
INNER JOIN bookings AS b ON (m.memid = b.memid)
INNER JOIN facilities AS f ON (b.facid = f.facid)
WHERE f.name LIKE 'Tennis%'
ORDER BY member, facility;
```

LANGUAGE: python
CODE:
```
fullname = Member.firstname + ' ' + Member.surname
query = (Member
             .select(fullname.alias('member'), Facility.name.alias('facility'))
             .join(Booking)
             .join(Facility)
             .where(Facility.name.startswith('Tennis'))
             .order_by(fullname, Facility.name)
             .distinct())
```

----------------------------------------

TITLE: Peewee Transaction with Explicit Rollback
DESCRIPTION: Shows how to explicitly rollback a transaction or savepoint within an `atomic` block using `transaction.rollback()`. When `rollback()` is called inside the block, a new transaction is automatically started, allowing subsequent operations within the same block to be part of a new transaction.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_62

LANGUAGE: python
CODE:
```
with db.atomic() as transaction:  # Opens new transaction.
    try:
        save_some_objects()
    except ErrorSavingData:
        # Because this block of code is wrapped with "atomic", a
        # new transaction will begin automatically after the call
        # to rollback().
        transaction.rollback()
        error_saving = True

    create_report(error_saving=error_saving)
    # Note: no need to call commit. Since this marks the end of the
    # wrapped block of code, the `atomic` context manager will
    # automatically call commit for us.
```

----------------------------------------

TITLE: Managing Peewee Connections with Falcon Middleware
DESCRIPTION: Defines a class-based middleware component for Falcon with `process_request` and `process_response` methods. It connects to the Peewee database at the start of the request and closes it at the end, integrating database connection management into the Falcon middleware pipeline.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_54

LANGUAGE: python
CODE:
```
import falcon
from peewee import *

database = SqliteDatabase('my_app.db')

class PeeweeConnectionMiddleware(object):
    def process_request(self, req, resp):
        database.connect()

    def process_response(self, req, resp, resource, req_succeeded):
        if not database.is_closed():
            database.close()

application = falcon.API(middleware=[
    PeeweeConnectionMiddleware(),
    # ... other middlewares ...
])
```

----------------------------------------

TITLE: Listing Related Records by Object Reference in Peewee (Python)
DESCRIPTION: Illustrates an alternative way to filter related records by directly using a model instance (object reference) in the `where` clause instead of joining and filtering by an attribute. Peewee handles the underlying join automatically.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/quickstart.rst#_snippet_17

LANGUAGE: python
CODE:
```
for pet in Pet.select().where(Pet.owner == uncle_bob):
    print(pet.name)
```

----------------------------------------

TITLE: Querying Peewee TSVectorField with match (Python)
DESCRIPTION: Introduces the `TSVectorField.match` method as the way to perform full-text search queries against a dedicated `TSVectorField`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_35

LANGUAGE: Python
CODE:
```
To perform a full-text search, use :py:meth:`TSVectorField.match`:
```

----------------------------------------

TITLE: Peewee: Using arithmetic operations in expressions (Python)
DESCRIPTION: Demonstrates using arithmetic operations (multiplication) and comparison operators ('>', '&') within a Peewee expression to filter records based on calculated values.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_13

LANGUAGE: python
CODE:
```
# users who entered the incorrect more than half the time and have logged
# in at least 10 times
(User.failed_logins > (User.login_count * .5)) & (User.login_count > 10)
```

----------------------------------------

TITLE: Checking JSONField Key Existence (Peewee/Postgres) - Python
DESCRIPTION: Shows how to use the `exists()` method on a `JSONField` to check if a specific key is present, either selecting the boolean result or filtering rows based on key existence.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_48

LANGUAGE: python
CODE:
```
>>> for h in House.select(House.address, House.features.exists('garage').alias('has_garage')):
...     print(h.address, h.has_garage)

123 Main St True

>>> for h in House.select().where(House.features.exists('garage')):
...     print(h.address, h.features['garage']) # <-- just houses w/garage data

123 Main St 2 cars
```

----------------------------------------

TITLE: Querying Peewee JSONField using has_key (Python)
DESCRIPTION: Demonstrates how to use the `has_key` method on a JSONField to filter database records based on the existence of a top-level key within the JSON data. Requires a Peewee Model with a JSONField.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_61

LANGUAGE: python
CODE:
```
APIResponse.select().where(APIResponse.data.has_key('foo'))
```

----------------------------------------

TITLE: Starting Query with Multiple Foreign Keys (Peewee Python)
DESCRIPTION: This Python snippet begins a Peewee query example involving the `Relationship` model, which has multiple foreign keys to the `User` model. It starts by selecting from the `User` model. The surrounding text indicates this query is intended to show how to explicitly specify the join field when multiple foreign keys exist to the same model.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_22

LANGUAGE: python
CODE:
```
(User
 .select())
```

----------------------------------------

TITLE: Using Server-Side Cursors (Peewee/Python)
DESCRIPTION: Shows how to wrap a large Peewee select query with the `ServerSide` helper to utilize server-side cursors and iterate over results without caching all rows in memory.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_37

LANGUAGE: python
CODE:
```
large_query = PageView.select()
for page_view in ServerSide(large_query):
    # Do something interesting.
    pass

# At this point server side resources are released.
```

----------------------------------------

TITLE: Peewee select_from for Aggregating Union Results
DESCRIPTION: Demonstrates how to use peewee's `select_from` method to wrap a compound query (like a UNION) and apply aggregations or other operations to its results, mirroring the SQL example. It shows defining simple models, creating union queries using the `|` operator, and then using `select_from` to build the final aggregated query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_42

LANGUAGE: python
CODE:
```
class Car(Model):
    owner = ForeignKeyField(Owner, backref='cars')
    # ... car-specific fields, etc ...

class Motorcycle(Model):
    owner = ForeignKeyField(Owner, backref='motorcycles')
    # ... motorcycle-specific fields, etc ...

class Boat(Model):
    owner = ForeignKeyField(Owner, backref='boats')
    # ... boat-specific fields, etc ...

cars = Car.select(Car.owner)
motorcycles = Motorcycle.select(Motorcycle.owner)
boats = Boat.select(Boat.owner)

union = cars | motorcycles | boats

query = (union
         .select_from(union.c.owner, fn.COUNT(union.c.id))
         .group_by(union.c.owner))
```

----------------------------------------

TITLE: Querying Nested JSONField Data (Peewee/Postgres) - Python
DESCRIPTION: Demonstrates querying nested data within a `JSONField` using Python's dictionary-like `[]` operator syntax in a Peewee `where` clause.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_54

LANGUAGE: python
CODE:
```
APIResponse.select().where(
    APIResponse.response['key1']['nested-key'] == 'some-value')
```

----------------------------------------

TITLE: Using Peewee Window Functions with GROUPS Frame Type (Python)
DESCRIPTION: This code demonstrates using the `Window.GROUPS` frame type with a window function in Peewee. It calculates a sum of 'value' over a window ordered by 'counter' and 'value', using a frame that includes the current group and one preceding group based on the ordering terms. The results are then iterated and printed.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_92

LANGUAGE: python
CODE:
```
query = (Sample
             .select(Sample.counter, Sample.value,
                     fn.SUM(Sample.value).over(
                        order_by=[Sample.counter, Sample.value],
                        frame_type=Window.GROUPS,
                        start=Window.preceding(1)).alias('gsum'))
             .order_by(Sample.counter, Sample.value))

for sample in query:
    print(sample.counter, sample.value, sample.gsum)
```

----------------------------------------

TITLE: Connecting post_save Signal with Name (Peewee Python)
DESCRIPTION: Shows how to connect a signal handler function (`cache_buster`) to the `post_save` signal using the `connect` method and assigning a `name` alias. This name can be used later to disconnect the handler.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_115

LANGUAGE: python
CODE:
```
from playhouse.signals import post_save
from project.handlers import cache_buster

post_save.connect(cache_buster, name='project.cache_buster')
```

----------------------------------------

TITLE: Calculate Filtered Running Sum (Peewee Python)
DESCRIPTION: Demonstrates using fn.SUM().filter().over() to apply a filter (Sample.counter != 2) to an aggregate function before applying the window function, calculating a running sum while excluding certain rows from the aggregation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_83

LANGUAGE: python
CODE:
```
query = Sample.select(
    Sample.counter,
    Sample.value,
    fn.SUM(Sample.value).filter(Sample.counter != 2).over(
        order_by=[Sample.id]).alias('csum'))

for sample in query:
    print(sample.counter, sample.value, sample.csum)
```

----------------------------------------

TITLE: Defining Hybrid Method in Peewee Model (Python)
DESCRIPTION: Defines an `Interval` model with a `contains` method decorated with `@hybrid_method`. This allows the method to be used both on model instances (Python logic) and on the model class (generating SQL).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_98

LANGUAGE: python
CODE:
```
class Interval(Model):
    start = IntegerField()
    end = IntegerField()

    @hybrid_method
    def contains(self, point):
        return (self.start <= point) & (point < self.end)
```

----------------------------------------

TITLE: Querying with Hybrid Method (Peewee Python)
DESCRIPTION: Illustrates using the `Interval.contains` hybrid method in a Peewee query's `where` clause. When called on the class, it generates a SQL expression equivalent to the Python logic.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_99

LANGUAGE: python
CODE:
```
query = Interval.select().where(Interval.contains(2))
```

----------------------------------------

TITLE: Defining SQL Expression for Radius Hybrid Property (Peewee)
DESCRIPTION: Defines the SQL expression for the `radius` hybrid property using the `@radius.expression` decorator. This expression calculates the radius based on the absolute value of the length, referencing the `length` hybrid attribute.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_95

LANGUAGE: python
CODE:
```
@radius.expression
def radius(cls):
    return fn.ABS(cls.length) / 2
```

----------------------------------------

TITLE: Querying JSONField Items (Peewee/Postgres) - Python
DESCRIPTION: Illustrates using the `items()` method on a `JSONField` to retrieve key-value pairs as a list of lists, similar to Python's dictionary `items()`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_46

LANGUAGE: python
CODE:
```
>>> for h in House.select(House.address, House.features.items().alias('mtx')):
...     print(h.address, h.mtx)

123 Main St [[u'bath', u'2 bath'], [u'garage', u'2 cars']]
```

----------------------------------------

TITLE: Querying JSONField Contains (Peewee/Postgres) - Python
DESCRIPTION: Illustrates using the `contains()` method on a `JSONField` to query rows based on the existence of a single key, a list of keys, or a partial dictionary match.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_51

LANGUAGE: python
CODE:
```
>>> query = House.select()
>>> has_garage = query.where(House.features.contains('garage'))
>>> garage_bath = query.where(House.features.contains(['garage', 'bath']))
>>> twocar = query.where(House.features.contains({'garage': '2 cars'}))
```

----------------------------------------

TITLE: Handling Circular Dependency with DeferredForeignKey
DESCRIPTION: Demonstrates the recommended approach for circular foreign key dependencies using `DeferredForeignKey`. This allows referencing a model that hasn't been defined yet.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_70

LANGUAGE: python
CODE:
```
class User(Model):
    username = CharField()
    # Tweet has not been defined yet so use the deferred reference.
    favorite_tweet = DeferredForeignKey('Tweet', null=True)

class Tweet(Model):
    message = TextField()
    user = ForeignKeyField(User, backref='tweets')
```

----------------------------------------

TITLE: Binding Individual Peewee Models (Python)
DESCRIPTION: Illustrates binding a single model (`User`) to a database using `Model.bind` and `Model.bind_ctx`. Shows how related models are also bound by default and how to prevent this using `bind_backrefs=False` with `bind_ctx`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_31

LANGUAGE: python
CODE:
```
# Bind the user model to the sqlite db. By default, Peewee will also
# bind any models that are related to User via foreign-key as well.
User.bind(sqlite_db)

assert User._meta.database is sqlite_db
assert Tweet._meta.database is sqlite_db  # Related models bound too.

# Here we will temporarily bind *just* the User model to the postgres db.
with User.bind_ctx(postgres_db, bind_backrefs=False):
    assert User._meta.database is postgres_db
    assert Tweet._meta.database is sqlite_db  # Has not changed.

# And now User is back to being bound to the sqlite_db.
assert User._meta.database is sqlite_db
```

----------------------------------------

TITLE: Generated Peewee Models Example (Python)
DESCRIPTION: Shows the Python code output generated by `pwiz` for the `example.db` schema, including the `Database` definition, `BaseModel`, and the `User` and `Tweet` model classes with correct field types and relationships.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_126

LANGUAGE: python
CODE:
```
from peewee import *

database = SqliteDatabase('example.db', **{})

class UnknownField(object):
    def __init__(self, *_, **__): pass

class BaseModel(Model):
    class Meta:
        database = database

class User(BaseModel):
    username = TextField(unique=True)

    class Meta:
        table_name = 'user'

class Tweet(BaseModel):
    content = TextField()
    timestamp = DateTimeField()
    user = ForeignKeyField(column_name='user_id', field='id', model=User)

    class Meta:
        table_name = 'tweet'
```

----------------------------------------

TITLE: Using Single Window Definition with Multiple Functions Peewee Python
DESCRIPTION: Demonstrates applying multiple window functions (`LEAD`, `LAG`, `SUM`) over a single, predefined window (`win`) in a Peewee select query. The window definition is included using the `.window()` method, and the results are iterated and printed.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_85

LANGUAGE: python
CODE:
```
query = Sample.select(
    Sample.counter,
    Sample.value,
    fn.LEAD(Sample.value).over(win),
    fn.LAG(Sample.value).over(win),
    fn.SUM(Sample.value).over(win)
).window(win)  # Include our window definition in query.

for row in query.tuples():
    print(row)
```

----------------------------------------

TITLE: Default Select All Columns in Peewee Python
DESCRIPTION: Shows how calling `.select()` on a `Table` object where columns were explicitly defined will default to selecting all defined columns without needing to list them.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_22

LANGUAGE: python
CODE:
```
User = Table('users', ('id', 'username'))

# Because columns were defined on the Table, we will default to
# selecting both of the User table's columns.
# Evaluates to SELECT id, username FROM users
query = User.select()
```

----------------------------------------

TITLE: Accessing JSON Array Elements with peewee JSONPath in Python
DESCRIPTION: This example shows how to use the `JSONPath` object's `__getitem__` method to access elements within a JSON array stored in a peewee `JSONField`. It demonstrates accessing the first element of a 'tags' array and using the resulting `JSONPath` object in a select query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_25

LANGUAGE: python
CODE:
```
# If metadata contains {"tags": ["list", "of", "tags"]}, we can
# extract the first tag in this way:
first_tag = Post.metadata['tags'][0]
query = (Post
         .select(Post, first_tag.alias('first_tag'))
         .order_by(first_tag))
```

----------------------------------------

TITLE: Classify Facilities by Value (Peewee)
DESCRIPTION: This Python code uses Peewee to replicate the SQL NTILE classification, calculating cost, applying NTILE(3) to group facilities, and using a Case expression to label the classes.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_56

LANGUAGE: python
CODE:
```
cost = fn.SUM(Case(None, (
    (Booking.member == 0, Booking.slots * Facility.guestcost),
), (Booking.slots * Facility.membercost)))
subq = (Facility
        .select(Facility.name,
                fn.NTILE(3).over(order_by=[cost.desc()]).alias('klass'))
        .join(Booking)
        .group_by(Facility.name))

klass_case = Case(subq.c.klass, [(1, 'high'), (2, 'average')], 'low')
query = (Select(columns=[subq.c.name, klass_case])
         .from_(subq)
         .order_by(subq.c.klass, subq.c.name)
         .bind(db))
```

----------------------------------------

TITLE: Atomically Updating Peewee HStoreField
DESCRIPTION: This example shows how to perform an atomic update on an HStoreField using the `update` operation. It updates existing keys or adds new ones based on the provided dictionary, then executes the update query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_19

LANGUAGE: python
CODE:
```
new_features = House.features.update({'bath': '2.5 bath', 'sqft': '1100'})
query = House.update(features=new_features)
query.where(House.id == h.id).execute()
h = House.get(House.id == h.id)
print(h.features)
```

----------------------------------------

TITLE: Initialize SQLCipher Database with User Passphrase (Peewee Python)
DESCRIPTION: Demonstrates initializing a Peewee SqlCipherDatabase instance by prompting the user for a passphrase. It attempts to connect and perform a simple query to validate the passphrase, resetting the connection if incorrect.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_10

LANGUAGE: python
CODE:
```
db = SqlCipherDatabase(None)

class BaseModel(Model):
    """Parent for all app's models"""
    class Meta:
        # We won't have a valid db until user enters passhrase.
        database = db

    # Derive our model subclasses
class Person(BaseModel):
    name = TextField(primary_key=True)

right_passphrase = False
while not right_passphrase:
    db.init(
        'testsqlcipher.db',
        passphrase=get_passphrase_from_user())

    try:  # Actually execute a query against the db to test passphrase.
        db.get_tables()
    except DatabaseError as exc:
        # This error indicates the password was wrong.
        if exc.args[0] == 'file is encrypted or is not a database':
            tell_user_the_passphrase_was_wrong()
            db.init(None)  # Reset the db.
        else:
            raise exc
    else:
        # The password was correct.
        right_passphrase = True
```

----------------------------------------

TITLE: Connecting to CockroachDB with Peewee
DESCRIPTION: Initializes a Peewee CockroachDatabase instance using individual connection parameters like database name, user, and host. Requires the `playhouse.cockroachdb` module.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/crdb.rst#_snippet_0

LANGUAGE: python
CODE:
```
from playhouse.cockroachdb import CockroachDatabase

db = CockroachDatabase('my_app', user='root', host='10.1.0.8')
```

----------------------------------------

TITLE: Query for Due Tasks (Peewee)
DESCRIPTION: Sets up a Peewee query to select `Task` objects that are due to run. It joins `Task` with `Schedule` and filters where the current time (`now`) is greater than or equal to the calculated `next_occurrence`. Shows how to represent the current time.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_19

LANGUAGE: python
CODE:
```
next_occurrence = something  # ??? how do we define this ???

# We can express the current time as a Python datetime value, or we could
# alternatively use the appropriate SQL function/name.
now = Value(datetime.datetime.now())  # Or SQL('current_timestamp'), e.g.

query = (Task
         .select(Task, Schedule)
         .join(Schedule)
         .where(now >= next_occurrence))
```

----------------------------------------

TITLE: Querying with IS NULL and IN using Field Methods (Peewee, Python)
DESCRIPTION: Illustrates using the explicit `.is_null(True)` method for `IS NULL` and the `.in_(list)` method for `IN` when constructing Peewee queries, providing an alternative to operator overloads.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_3

LANGUAGE: python
CODE:
```
# Get all User objects whose last login is NULL.
User.select().where(User.last_login.is_null(True))
```

LANGUAGE: python
CODE:
```
# Get users whose username is in the given list.
usernames = ['charlie', 'huey', 'mickey']
User.select().where(User.username.in_(usernames))
```

----------------------------------------

TITLE: Performing Peewee Full-Text Search with Match (Python)
DESCRIPTION: Demonstrates using the Peewee `Match` function for simple full-text search queries. This function automatically handles the conversion of text and search terms to `tsvector` and `tsquery` respectively.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_31

LANGUAGE: Python
CODE:
```
def blog_search(search_term):
    return Blog.select().where(
        (Blog.status == Blog.STATUS_PUBLISHED) &
        Match(Blog.content, search_term))
```

----------------------------------------

TITLE: Querying JSON Data with contains_any (Peewee Python)
DESCRIPTION: Illustrates the use of the `contains_any` method to check if a JSON document contains at least one of the specified top-level keys or items within a nested list/dictionary. Examples cover searching at the top level and within a sub-key.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_58

LANGUAGE: python
CODE:
```
APIResponse.select().where(
    APIResponse.data.contains_any('foo', 'baz', 'nugget'))
```

LANGUAGE: python
CODE:
```
APIResponse.select().where(
    APIResponse.data['foo']['bar'].contains_any('i2', 'ix'))
```

----------------------------------------

TITLE: Peewee Database Initialization with Deferred Init (Python)
DESCRIPTION: Shows how to initialize a Peewee database by first creating an instance with `None` and then calling the `init` method later with the database details and parameters.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_27

LANGUAGE: python
CODE:
```
db = SqliteDatabase(None)
...
db.init(db_filename, pragmas={'journal_mode': 'wal'})
```

----------------------------------------

TITLE: Counting Total Members Per Row (SQL/Peewee)
DESCRIPTION: Lists member names and includes the total count of all members in each row using a window function. Results are ordered by join date. This example utilizes PostgreSQL-specific window functions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_49

LANGUAGE: sql
CODE:
```
SELECT COUNT(*) OVER(), firstname, surname
FROM members ORDER BY joindate
```

LANGUAGE: python
CODE:
```
query = (Member
             .select(fn.COUNT(Member.memid).over(), Member.firstname,
                     Member.surname)
             .order_by(Member.joindate))
```

----------------------------------------

TITLE: Clearing All Related Objects with ManyToManyField (Peewee Python)
DESCRIPTION: Shows how to remove all associated objects from an instance linked via a ManyToManyField using the `clear` method.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_92

LANGUAGE: python
CODE:
```
# English 101 is canceled this semester, so remove all
# the enrollments.
english_101 = Course.get(Course.name == 'English 101')
english_101.students.clear()
```

----------------------------------------

TITLE: Querying using Hybrid Method in Peewee Python
DESCRIPTION: Demonstrates using a hybrid method (`Interval.contains`) directly in a Peewee query's `where` clause, allowing the method's logic to be executed as a SQL expression for filtering.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_92

LANGUAGE: python
CODE:
```
query = Interval.select().where(Interval.contains(2))
```

----------------------------------------

TITLE: Using Sqlite User-Defined Function in Query - Peewee - Python
DESCRIPTION: Shows how to use the `fn` object in Peewee to call a previously registered Sqlite UDF, such as `hostname`, within a SELECT query. The example queries a `Link` model to find the most common hosts from URLs using `fn.hostname` for grouping and ordering.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_3

LANGUAGE: python
CODE:
```
# Assume we have a model, Link, that contains lots of arbitrary URLs.
# We want to discover the most common hosts that have been linked.
query = (Link
         .select(fn.hostname(Link.url).alias('host'), fn.COUNT(Link.id))
         .group_by(fn.hostname(Link.url))
         .order_by(fn.COUNT(Link.id).desc())
         .tuples())

# Print the hostname along with number of links associated with it.
for host, count in query:
    print('%s: %s' % (host, count))
```

----------------------------------------

TITLE: Querying JSONField Keys (Peewee/Postgres) - Python
DESCRIPTION: Demonstrates how to use the `keys()` method on a `JSONField` to retrieve a list of keys for a specific column in a Peewee query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_44

LANGUAGE: python
CODE:
```
>>> for h in House.select(House.address, House.features.keys().alias('keys')):
...     print(h.address, h.keys)

123 Main St [u'bath', u'garage']
```

----------------------------------------

TITLE: Querying Peewee JSONField by Key Value
DESCRIPTION: Shows how to query records in the `KV` model by accessing a specific key within the `JSONField` using dictionary-like syntax directly in the query condition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_13

LANGUAGE: python
CODE:
```
>>> KV.get(KV.value['k1'] == 'v1').key
'a'
```

----------------------------------------

TITLE: Using Window.RANGE Frame Type Peewee Python
DESCRIPTION: Illustrates how to specify the `Window.RANGE` frame type for a window function (`SUM`) in a Peewee query. It shows how this frame type handles rows with identical values in the `order_by` clause by including all such rows in the frame, potentially leading to unexpected results when duplicates exist.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_89

LANGUAGE: python
CODE:
```
query = Sample.select(
    Sample.counter,
    Sample.value,
    fn.SUM(Sample.value).over(
        order_by=[Sample.counter, Sample.value],
        frame_type=Window.RANGE).alias('rsum'))

for sample in query.order_by(Sample.counter, Sample.value):
    print(sample.counter, sample.value, sample.rsum)
```

----------------------------------------

TITLE: Querying FTS4 Model with BM25 Score in Peewee Python
DESCRIPTION: Demonstrates how to construct a Peewee query for an FTS4 model (`DocumentIndex`) to select results, calculate the BM25 score using `DocumentIndex.bm25().alias('score')`, filter by a search term using `match('search phrase')`, and order the results by the calculated BM25 score. It then iterates through the results, printing the title and score. This method is suitable for FTS4.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_41

LANGUAGE: python
CODE:
```
query = (DocumentIndex
 .select(
 DocumentIndex,
 DocumentIndex.bm25().alias('score'))
 .where(DocumentIndex.match('search phrase'))
 .order_by(DocumentIndex.bm25()))

for search_result in query:
 print(search_result.title, search_result.score)
```

----------------------------------------

TITLE: Altering Column Nullability with Peewee Migrator - Python
DESCRIPTION: Uses `migrator.drop_not_null` and `migrator.add_not_null` operations within the `migrate` function to modify the nullability constraint on specified columns in a table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_135

LANGUAGE: python
CODE:
```
# Note that when making a field not null that field must not have any
# NULL values present.
migrate(
    # Make `pub_date` allow NULL values.
    migrator.drop_not_null('story', 'pub_date'),

    # Prevent `modified_date` from containing NULL values.
    migrator.add_not_null('story', 'modified_date'),
)
```

----------------------------------------

TITLE: Calculating Total Facility Revenue (SQL/Peewee)
DESCRIPTION: Calculates the total revenue for each facility by summing slots multiplied by the appropriate cost (guest or member). The results are joined with the facilities table, grouped by facility name, and sorted by the calculated revenue.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_43

LANGUAGE: sql
CODE:
```
SELECT f.name, SUM(b.slots * (
    CASE WHEN b.memid = 0 THEN f.guestcost ELSE f.membercost END)) AS revenue
FROM bookings AS b
INNER JOIN facilities AS f ON b.facid = f.facid
GROUP BY f.name
ORDER BY revenue;
```

LANGUAGE: python
CODE:
```
revenue = fn.SUM(Booking.slots * Case(None, (
        (Booking.member == 0, Facility.guestcost),
    ), Facility.membercost))

    query = (Facility
             .select(Facility.name, revenue.alias('revenue'))
             .join(Booking)
             .group_by(Facility.name)
             .order_by(SQL('revenue')))
```

----------------------------------------

TITLE: Searching FTS Index and Joining Documents with Peewee (Python)
DESCRIPTION: Implements a `search` function that queries the `DocumentIndex` using the `match` operator for a given phrase. It then joins the results with the original `Document` table using the `rowid` link and orders the results by relevance using the `bm25` algorithm.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_35

LANGUAGE: python
CODE:
```
def search(phrase):
    # Query the search index and join the corresponding Document
    # object on each search result.
    return (Document
            .select()
            .join(
                DocumentIndex,
                on=(Document.id == DocumentIndex.rowid))
            .where(DocumentIndex.match(phrase))
            .order_by(DocumentIndex.bm25()))
```

----------------------------------------

TITLE: Defining a Self-Referencing Model in Peewee Python
DESCRIPTION: Defines a Peewee `Model` called `Category` with a self-referencing `ForeignKeyField` named `parent`, allowing categories to have parent-child relationships within the same table.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_27

LANGUAGE: python
CODE:
```
class Category(Model):
 name = CharField()
 parent = ForeignKeyField('self', backref='children')
```

----------------------------------------

TITLE: Printing Peewee Model as SQL CREATE TABLE
DESCRIPTION: Demonstrates using `print_table_sql` to generate and print the SQL `CREATE TABLE` statement that corresponds to the structure of the introspected 'event' model, useful for verifying the schema definition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/interactive.rst#_snippet_4

LANGUAGE: pycon
CODE:
```
>>> print_table_sql(event)
CREATE TABLE IF NOT EXISTS "event" (
  "id" INTEGER NOT NULL PRIMARY KEY,
  "key" TEXT NOT NULL,
  "timestamp" DATETIME NOT NULL,
  "metadata" TEXT NOT NULL)
```

----------------------------------------

TITLE: Querying JSONField Children using Peewee (Python)
DESCRIPTION: This snippet demonstrates how to define a Peewee model with a JSONField, create instances with nested JSON data, and then query the top-level keys and values within the JSON data using the `children()` method, which corresponds to SQLite's `json_each` table-valued function.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_23

LANGUAGE: python
CODE:
```
class KeyData(Model):
    key = TextField()
    data = JSONField()

KeyData.create(key='a', data={'k1': 'v1', 'x1': {'y1': 'z1'}})
KeyData.create(key='b', data={'x1': {'y1': 'z1', 'y2': 'z2'}})

# We will query the KeyData model for the key and all the
# top-level keys and values in it's data field.
kd = KeyData.data.children().alias('children')
query = (KeyData
         .select(kd.c.key, kd.c.value, kd.c.fullkey)
         .from_(KeyData, kd)
         .order_by(kd.c.key)
         .tuples())
print(query[:])

# PRINTS:
[('a', 'k1', 'v1',                    '$.k1'),
 ('a', 'x1', '{"y1":"z1"}',           '$.x1'),
 ('b', 'x1', '{"y1":"z1","y2":"z2"}', '$.x1')]
```

----------------------------------------

TITLE: Defining Single Multi-Column Index in Peewee Meta Class (Trailing Comma)
DESCRIPTION: Provides an example of defining a single multi-column index within the `Meta` class `indexes` tuple, specifically highlighting the necessary trailing comma after the single index tuple.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_46

LANGUAGE: python
CODE:
```
class Meta:
    indexes = (
        (('first_name', 'last_name'), True),  # Note the trailing comma!
    )
```

----------------------------------------

TITLE: SQL Equivalent for Tags with Minimum Photo Count
DESCRIPTION: Provides the raw SQL query that is equivalent to the preceding Peewee query. It demonstrates the use of INNER JOIN, GROUP BY, and HAVING clauses to filter tags based on the count of associated photos.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_72

LANGUAGE: sql
CODE:
```
SELECT t1."id", t1."name"
FROM "tag" AS t1
INNER JOIN "phototag" AS t2 ON t1."id" = t2."tag_id"
INNER JOIN "photo" AS t3 ON t2."photo_id" = t3."id"
GROUP BY t1."id", t1."name"
HAVING Count(t3."id") > 5
```

----------------------------------------

TITLE: SQL Join with Subquery Example
DESCRIPTION: Provides a SQL example demonstrating how to join a table (`tweet`) with a subquery (`latest_query`) to find the latest tweet for each user. Requires a `tweet` table with `user_id` and `timestamp` columns.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_15

LANGUAGE: sql
CODE:
```
SELECT tweet.*, user.*
FROM tweet
INNER JOIN (
        SELECT latest.user_id, MAX(latest.timestamp) AS max_ts
        FROM tweet AS latest
        GROUP BY latest.user_id) AS latest_query
ON ((tweet.user_id = latest_query.user_id) AND (tweet.timestamp = latest_query.max_ts))
INNER JOIN user ON (tweet.user_id = user.id)
```

----------------------------------------

TITLE: Execute Peewee Query and Get Multiple Scalar Values as Tuple - Python
DESCRIPTION: Shows how to use the `scalar()` method with `as_tuple=True` to retrieve multiple scalar values from the first row of a Peewee query as a Python tuple.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_44

LANGUAGE: python
CODE:
```
query = Note.select(fn.MAX(Note.timestamp), fn.COUNT(Note.id))
max_ts, n_notes = query.scalar(db, as_tuple=True)
```

----------------------------------------

TITLE: Basic SQL INNER JOIN
DESCRIPTION: Shows a standard SQL query to join the `tweet` and `user` tables to retrieve tweet content and username.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/relationships.rst#_snippet_7

LANGUAGE: sql
CODE:
```
SELECT tweet.content, user.username
FROM tweet
INNER JOIN user ON tweet.user_id = user.id;
```

----------------------------------------

TITLE: Incorrect Atomic Update Approach in Peewee (Python)
DESCRIPTION: This snippet demonstrates a naive and incorrect approach to performing atomic updates by iterating through records and saving them individually. It highlights that this method is slow and vulnerable to race conditions in concurrent environments. **Note: This approach is explicitly discouraged.**
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_21

LANGUAGE: pycon
CODE:
```
>>> for stat in Stat.select().where(Stat.url == request.url):
...     stat.counter += 1
...     stat.save()
```

----------------------------------------

TITLE: Get Primary Keys Peewee Python
DESCRIPTION: Demonstrates how to retrieve the primary key column names for a specified table using the `get_primary_keys` method on a Peewee database object. The example shows calling the method with the table name 'entry' and printing the result, which is a list of column names.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_8

LANGUAGE: python
CODE:
```
print(db.get_primary_keys('entry'))
['id']
```

----------------------------------------

TITLE: Connecting Peewee Signal Handler (Python)
DESCRIPTION: Demonstrates using the `@post_save` decorator with the `name` parameter to connect a function as a signal receiver. The handler `cache_bust_handler` is called after a model instance is saved, typically used for cache invalidation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_117

LANGUAGE: python
CODE:
```
from playhouse.signals import connect, post_save

@post_save(name='project.cache_buster')
def cache_bust_handler(sender, instance, *args, **kwargs):
    # bust the cache for this instance
    cache.delete(cache_key_for(instance))
```

----------------------------------------

TITLE: Setting Scalar Value in Peewee JSONField Key
DESCRIPTION: Demonstrates using the `set` method on a specific key within a `JSONField` instance to update its scalar value directly within a Peewee update query.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_16

LANGUAGE: python
CODE:
```
>>> KV.update(value=KV.value['k1'].set('v1')).execute()
1
>>> KV.get(KV.key == 'a').value
{'k1': 'v1', 'k2': 'v2'}
```

----------------------------------------

TITLE: Querying Single SearchField with Peewee FTS (Python)
DESCRIPTION: Demonstrates how to perform a full-text search restricted to a single SearchField column (e.g., 'title') in a Peewee FTSModel. The query selects the model and the BM25 score, filters results using the column's match method, and orders by relevance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_28

LANGUAGE: python
CODE:
```
class SearchIndex(FTSModel):
    title = SearchField()
    body = SearchField()

# Search *only* the title field and return results ordered by
# relevance, using bm25.
query = (SearchIndex
         .select(SearchIndex, SearchIndex.bm25().alias('score'))
         .where(SearchIndex.title.match('python'))
         .order_by(SearchIndex.bm25()))
```

----------------------------------------

TITLE: Starting a Peewee Update Query (Python)
DESCRIPTION: This snippet shows the beginning of a Peewee update query targeting the `User` model to set the `is_active` field to `False`. This is presented as part of an example demonstrating the use of the `RETURNING` clause in PostgreSQL.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/querying.rst#_snippet_95

LANGUAGE: python
CODE:
```
query = (User
             .update(is_active=False))
```

----------------------------------------

TITLE: Querying with Full-Text Search (Peewee/Python)
DESCRIPTION: Demonstrates performing a full-text search query using Peewee's `match` operator on a `TSVectorField` (implied by context) with specific search terms.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_36

LANGUAGE: python
CODE:
```
terms = 'python & (sqlite | postgres)'
results = Blog.select().where(Blog.search_content.match(terms))
```

----------------------------------------

TITLE: Creating Foreign Key Constraint After Table Creation (Peewee Python)
DESCRIPTION: This snippet demonstrates how to create tables first and then add a foreign key constraint separately using the `_schema.create_foreign_key` method. This approach is necessary for databases like SQLite which have limited support for adding foreign keys via `ALTER TABLE` after creation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_72

LANGUAGE: python
CODE:
```
# Will create the User and Tweet tables, but does *not* create a\n# foreign-key constraint on User.favorite_tweet.\ndb.create_tables([User, Tweet])\n\n# Create the foreign-key constraint:\nUser._schema.create_foreign_key(User.favorite_tweet)
```

----------------------------------------

TITLE: Querying with Hybrid Property (Peewee Python)
DESCRIPTION: Demonstrates how to use a hybrid property (`Interval.radius`) in a Peewee query's `where` clause. When used at the class level, the hybrid property generates the appropriate SQL expression.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_96

LANGUAGE: python
CODE:
```
query = Interval.select().where(Interval.radius < 3)
```

----------------------------------------

TITLE: Getting JSON Value Type in Peewee
DESCRIPTION: This example shows how to determine the data type of values at specified JSON paths within a field using the `json_type()` method. It queries the type of the root object and a specific key.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_19

LANGUAGE: pycon
CODE:
```
>>> KV.select(KV.value.json_type(), KV.value['k1'].json_type()).tuples()[:]
[('object', 'text')]
```

----------------------------------------

TITLE: Peewee: Use BitField Flags on Model Instance
DESCRIPTION: Demonstrates setting and accessing the boolean properties defined using `.flag()` on a `BitField`. Setting a flag updates the underlying integer value, and accessing a flag returns its boolean state.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_20

LANGUAGE: python
CODE:
```
>>> p = Post()
>>> p.is_sticky = True
>>> p.is_minimized = True
>>> print(p.flags)  # Prints 4 | 2 --> "6"
6
>>> p.is_favorite
False
>>> p.is_sticky
True
```

----------------------------------------

TITLE: Configuring SqliteDatabase with Custom Field Types (Peewee, Python)
DESCRIPTION: Demonstrates how to configure a SqliteDatabase instance in Peewee to map a custom field type, such as 'uuid', to a native database type like 'text', since Sqlite lacks a built-in UUID type.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_29

LANGUAGE: python
CODE:
```
db = SqliteDatabase('my_db', field_types={'uuid': 'text'})
```

----------------------------------------

TITLE: Atomically Deleting Multiple Keys from Peewee HStoreField
DESCRIPTION: This example shows how to atomically delete multiple keys from an HStoreField simultaneously by passing multiple arguments to the `delete` operation.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_21

LANGUAGE: python
CODE:
```
query = House.update(features=House.features.delete('garage', 'sqft'))
```

----------------------------------------

TITLE: Storing Data in Peewee JSONField
DESCRIPTION: Demonstrates creating a record in the `KV` model where the `value` field, a `JSONField`, is populated with a Python dictionary. Peewee automatically handles the serialization to JSON.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_12

LANGUAGE: python
CODE:
```
>>> KV.create(key='a', value={'k1': 'v1'})
<KV: 1>
>>> KV.get(KV.key == 'a').value
{'k1': 'v1'}
```

----------------------------------------

TITLE: Basic Usage of Peewee KeyValue Store (Python)
DESCRIPTION: Provides fundamental examples of using the `playhouse.kv.KeyValue` class. It covers creating a store, setting/updating single and multiple key-value pairs, retrieving values, iterating with expressions, and updating with expressions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_104

LANGUAGE: python
CODE:
```
# Create a key/value store, which uses an in-memory SQLite database
# for data storage.
KV = KeyValue()

# Set (or overwrite) the value for "k1".
KV['k1'] = 'v1'

# Set (or update) multiple keys at once (uses an efficient upsert).
KV.update(k2='v2', k3='v3')

# Getting values works as you'd expect.
assert KV['k2'] == 'v2'

# We can also do this:
for value in KV[KV.key > 'k1']:
    print(value)

# 'v2'
# 'v3'

# Update multiple values at once using expression:
KV[KV.key > 'k1'] = 'vx'

# What's stored in the KV?
```

----------------------------------------

TITLE: Emulating Peewee Transaction with Manual Commit (Python)
DESCRIPTION: Demonstrates how to manually manage database transactions using Peewee's `manual_commit` context manager, explicitly calling `begin`, `commit`, and `rollback` within a try/except/else block. This is an alternative to the default `autocommit` or the `atomic` context manager.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_71

LANGUAGE: python
CODE:
```
with db.manual_commit():
    db.begin()  # Have to begin transaction explicitly.
    try:
        user.delete_instance(recursive=True)
    except:
        db.rollback()  # Rollback! An error occurred.
        raise
    else:
        try:
            db.commit()  # Commit changes.
        except:
            db.rollback()
            raise
```

----------------------------------------

TITLE: Peewee: Using row values with subqueries (Python)
DESCRIPTION: Provides an example demonstrating how to define Peewee models and then use `Tuple` to compare multiple columns (`EventLog.event_type`, `EventLog.source`) against the results of a subquery (`incidents`) using the `.in_()` operator.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_operators.rst#_snippet_16

LANGUAGE: python
CODE:
```
class EventLog(Model):
    event_type = TextField()
    source = TextField()
    data = TextField()
    timestamp = TimestampField()

class IncidentLog(Model):
    incident_type = TextField()
    source = TextField()
    traceback = TextField()
    timestamp = TimestampField()

# Get a list of all the incident types and sources that have occured today.
incidents = (IncidentLog
             .select(IncidentLog.incident_type, IncidentLog.source)
             .where(IncidentLog.timestamp >= datetime.date.today()))

# Find all events that correlate with the type and source of the
# incidents that occured today.
events = (EventLog
          .select()
          .where(Tuple(EventLog.event_type, EventLog.source).in_(incidents))
          .order_by(EventLog.timestamp))
```

----------------------------------------

TITLE: Importing Data from JSON with DataSet in Python
DESCRIPTION: Shows how to import data from a JSON file into a table using the `table.thaw()` method. New columns are created by default for encountered attributes.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_75

LANGUAGE: python
CODE:
```
# Load data from a JSON file containing a list of objects.
table = dataset['stock_prices']
table.thaw(filename='stocks.json', format='json')
table.all()[:3]

# Might print...
#[{'id': 1, 'ticker': 'GOOG', 'price': 703},
# {'id': 2, 'ticker': 'AAPL', 'price': 109},
# {'id': 3, 'ticker': 'AMZN', 'price': 300}]
```

----------------------------------------

TITLE: Working with Blobs - Peewee Python
DESCRIPTION: Demonstrates storing and accessing binary data using `BlobField` and `ZeroBlob`. It shows how to use `db.blob_open` to get a file-like object for efficient reading and writing to a blob column.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_7

LANGUAGE: python
CODE:
```
class Image(Model):
    filename = TextField()
    data = BlobField()

buf_size = 1024 * 1024 * 8  # Allocate 8MB for storing file.
rowid = Image.insert({Image.filename: 'thefile.jpg',
                      Image.data: ZeroBlob(buf_size)}).execute()

# Open the blob, returning a file-like object.
blob = db.blob_open('image', 'data', rowid)

# Write some data to the blob.
blob.write(image_data)
img_size = blob.tell()

# Read the data back out of the blob.
blob.seek(0)
image_data = blob.read(img_size)
```

----------------------------------------

TITLE: Querying with find in Peewee Python
DESCRIPTION: Demonstrates using the `find` method on a table object (`db['users']`) to retrieve multiple rows matching specific equality conditions (`favorite_orm='peewee'`).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_85

LANGUAGE: python
CODE:
```
peewee_users = db['users'].find(favorite_orm='peewee')
```

----------------------------------------

TITLE: Querying Top N per Group with Self-Join and HAVING (Peewee, Python)
DESCRIPTION: Uses a Peewee query with a self-join on the Tweet model to count newer tweets for the same user. The results are grouped by tweet, and the `HAVING` clause filters for groups where the count of newer tweets is less than or equal to N (3), identifying the top N tweets per user.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_11

LANGUAGE: python
CODE:
```
TweetAlias = Tweet.alias()

# Use a self-join and join predicates to count the number of
# newer tweets.
query = (Tweet
             .select(Tweet.id, Tweet.message, Tweet.user, User.username)
             .join(User)
             .switch(Tweet)
             .join(TweetAlias, on=(
                 (TweetAlias.user == Tweet.user) &
                 (TweetAlias.created_date >= Tweet.created_date)))
             .group_by(Tweet.id, Tweet.content, Tweet.user, User.username)
             .having(fn.COUNT(Tweet.id) <= 3))
```

----------------------------------------

TITLE: Starting Example for CRDB run_transaction Helper
DESCRIPTION: Begins an example demonstrating the `db.run_transaction()` helper method for CockroachDB. This method is designed to handle client-side transaction retries automatically by executing a provided callable.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/crdb.rst#_snippet_6

LANGUAGE: python
CODE:
```
def create_user(email):
```

----------------------------------------

TITLE: Deleting specific rows with delete in Peewee Python
DESCRIPTION: Illustrates using the `delete` method on a table object (`db['users']`) to remove rows that satisfy the specified equality condition (`favorite_orm='Django'`).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_87

LANGUAGE: python
CODE:
```
# Adios, Django!
db['users'].delete(favorite_orm='Django')
```

----------------------------------------

TITLE: Peewee transaction Explicit Rollback and Implicit Commit
DESCRIPTION: Another example of explicit rollback within a `db.transaction()` block. Shows that after a rollback, subsequent operations within the same block are part of a new transaction that will be implicitly committed upon exiting the block.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_69

LANGUAGE: python
CODE:
```
with db.transaction() as txn:
    User.create(username='whiskers')
    # Roll back changes, which removes "whiskers".
    txn.rollback()

    # Create a new row for "mr. whiskers" which will be implicitly committed
    # at the end of the `with` block.
    User.create(username='mr. whiskers')
```

----------------------------------------

TITLE: Use Bind Context Manager Peewee Python
DESCRIPTION: Provides an example of using the `bind_ctx` context manager to temporarily associate a list of models with a test database within a specific block of code. This pattern is useful for setting up and tearing down database state for tests, ensuring models are correctly bound before operations like table creation and dropping.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_11

LANGUAGE: python
CODE:
```
MODELS = (User, Account, Note)

# Bind the given models to the db for the duration of wrapped block.
def use_test_database(fn):
    @wraps(fn)
    def inner(self):
        with test_db.bind_ctx(MODELS):
            test_db.create_tables(MODELS)
            try:
                fn(self)
            finally:
                test_db.drop_tables(MODELS)
    return inner


class TestSomething(TestCase):
    @use_test_database
    def test_something(self):
        # ... models are bound to test database ...
        pass
```

----------------------------------------

TITLE: Searching Peewee FTS Model (Simple) - Python
DESCRIPTION: Demonstrates a basic full-text search using the `search` class method on a `DocumentIndex` model. It retrieves results matching 'search term' and iterates through them, printing the title of each result.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_38

LANGUAGE: python
CODE:
```
# Simple search.
docs = DocumentIndex.search('search term')
for result in docs:
    print(result.title)
```

----------------------------------------

TITLE: Passing Vendor-Specific Parameters to MySQL Database - Python
DESCRIPTION: Demonstrates passing a driver-specific parameter, such as the `charset` parameter for the pymysql driver, when initializing a `MySQLDatabase` instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_3

LANGUAGE: python
CODE:
```
db = MySQLDatabase('database_name', user='www-data', charset='utf8mb4')
```

----------------------------------------

TITLE: Incorrect Access of Peewee Model Meta Class (Python Console)
DESCRIPTION: Shows an example of attempting to access the inner `Meta` class directly from the model class (`Person.Meta`), which is incorrect and results in an `AttributeError` because the `Meta` class is processed by Peewee during model definition.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_34

LANGUAGE: pycon
CODE:
```
>>> Person.Meta
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: type object 'Person' has no attribute 'Meta'
```

----------------------------------------

TITLE: Querying JSON Data with contained_by (Peewee Python)
DESCRIPTION: Explains and demonstrates the `contained_by` method, which checks if the JSON document stored in the field is a subset of a given JSON document. This method is the inverse of `contains`.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_60

LANGUAGE: python
CODE:
```
big_doc = {
    'foo': {
        'bar': ['i1', 'i2', 'i3'],
        'baz': {
            'huey': 'mickey',
            'peewee': 'nugget',
        }
    },
    'other_key': ['nugget', 'bear', 'kitten'],
}
APIResponse.select().where(
    APIResponse.data.contained_by(big_doc))
```

----------------------------------------

TITLE: Querying Top N per Group with COUNT (Peewee, Python)
DESCRIPTION: Creates a Peewee query using a correlated subquery with `fn.COUNT()` to count tweets with a newer timestamp for the same user. The outer query then filters results where this count is less than or equal to N (3), effectively finding the top N tweets per user.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_10

LANGUAGE: python
CODE:
```
TweetAlias = Tweet.alias()

# Create a correlated subquery that calculates the number of
# tweets with a higher (newer) timestamp than the tweet we're
# looking at in the outer query.
subquery = (TweetAlias
                .select(fn.COUNT(TweetAlias.id))
                .where(
                    (TweetAlias.created_date >= Tweet.created_date) &
                    (TweetAlias.user == Tweet.user)))

# Wrap the subquery and filter on the count.
query = (Tweet
             .select(Tweet, User)
             .join(User)
             .where(subquery <= 3))
```

----------------------------------------

TITLE: SQL Equivalent of Hybrid Property Query
DESCRIPTION: Provides the SQL query generated by Peewee when a hybrid property (`Interval.length`) is used in a `WHERE` clause, showing how the property's logic is translated into a SQL expression (`"t1"."end" - "t1"."start"`).
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_91

LANGUAGE: sql
CODE:
```
SELECT "t1"."id", "t1"."start", "t1"."end"
FROM "interval" AS t1
WHERE (("t1"."end" - "t1"."start") > 5)
```

----------------------------------------

TITLE: Inserting Rows into a Table with DataSet in Python
DESCRIPTION: Illustrates inserting new rows into a table using the `table.insert()` method. Columns are automatically created if they do not already exist.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_73

LANGUAGE: python
CODE:
```
table.insert(name='Huey', age=3, color='white')
table.insert(name='Mickey', age=5, gender='male')
```

----------------------------------------

TITLE: ArrayField Contains All Items (Peewee/Python)
DESCRIPTION: Demonstrates using the `contains` method on a Peewee `ArrayField` to filter rows where the array contains all of the specified items.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_41

LANGUAGE: python
CODE:
```
Blog.select().where(Blog.tags.contains('python', 'django'))
```

----------------------------------------

TITLE: Defining and Using Peewee BitField Flags (Python)
DESCRIPTION: Demonstrates how to define boolean flags on a Peewee Model using the BitField class and how to set and access these flags on model instances. Each flag is associated with a power of 2 value.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_65

LANGUAGE: python
CODE:
```
class Post(Model):
    content = TextField()
    flags = BitField()

    is_favorite = flags.flag(1)
    is_sticky = flags.flag(2)
    is_minimized = flags.flag(4)
    is_deleted = flags.flag(8)

>>> p = Post()
>>> p.is_sticky = True
>>> p.is_minimized = True
>>> print(p.flags)  # Prints 4 | 2 --> "6"
6
>>> p.is_favorite
False
>>> p.is_sticky
True
```

----------------------------------------

TITLE: Creating and Querying Model with Explicit Primary Key
DESCRIPTION: Example demonstrating the creation of an instance for a model with an explicit primary key and subsequently querying it, showing that the assigned ID is preserved.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_63

LANGUAGE: python
CODE:
```
u = User.create(id=999, username='somebody')
print(u.id)
print(User.get(User.username == 'somebody').id)
```

----------------------------------------

TITLE: Printing Peewee Model Definition (Python)
DESCRIPTION: Shows how to use `playhouse.reflection.print_model` to display a user-friendly representation of a Peewee model class, including its table name, fields, data types, and indexes. Useful for debugging or interactive exploration. Requires a Peewee Model class.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_145

LANGUAGE: python
CODE:
```
>>> from playhouse.reflection import print_model
>>> print_model(User)
user
  id AUTO PK
  email TEXT
  name TEXT
  dob DATE

index(es)
  email UNIQUE

>>> print_model(Tweet)
tweet
  id AUTO PK
  user INT FK: User.id
  title TEXT
  content TEXT
  timestamp DATETIME
```

----------------------------------------

TITLE: Example of Using Peewee FTS match Method (Python)
DESCRIPTION: Provides a concrete example demonstrating how to use the `match` class method on an `FTSModel` (`DocumentIndex`) within a Peewee query. It shows how to filter results based on a search phrase and order them by relevance using `bm25()`. Requires the `DocumentIndex` model defined previously.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/sqlite_ext.rst#_snippet_37

LANGUAGE: python
CODE:
```
# Search index for "search phrase" and return results ranked
# by relevancy using the BM25 algorithm.
query = (DocumentIndex
         .select()
         .where(DocumentIndex.match('search phrase'))
         .order_by(DocumentIndex.bm25()))
```

----------------------------------------

TITLE: Accessing Values by Key/Expression in Peewee KeyValue (Python)
DESCRIPTION: Illustrates how to retrieve values from the KeyValue store using square bracket notation (`[]`). Shows examples for retrieving a single value by key (raising `KeyError` if not found) and retrieving multiple values using an expression.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_106

LANGUAGE: pycon
CODE:
```
>>> KV = KeyValue()
>>> KV.update(k1='v1', k2='v2', k3='v3')

>>> KV['k1']
'v1'
>>> KV['kx']
KeyError: "kx" not found

>>> KV[KV.key > 'k1']
['v2', 'v3']
>>> KV[KV.key < 'k1']
[]
```

----------------------------------------

TITLE: Patching psycopg2 for Gevent Async - Python
DESCRIPTION: Provides functions to patch the psycopg2 library after monkey-patching socket (etc.) with gevent, enabling asynchronous database operations by registering a wait callback that uses gevent's `wait_read` and `wait_write`. This allows psycopg2 to yield control to the gevent event loop during database operations.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_45

LANGUAGE: python
CODE:
```
from gevent.socket import wait_read, wait_write
from psycopg2 import extensions

# Call this function after monkey-patching socket (etc).
def patch_psycopg2():
    extensions.set_wait_callback(_psycopg2_gevent_callback)

def _psycopg2_gevent_callback(conn, timeout=None):
    while True:
        state = conn.poll()
        if state == extensions.POLL_OK:
            break
        elif state == extensions.POLL_READ:
            wait_read(conn.fileno(), timeout=timeout)
        elif state == extensions.POLL_WRITE:
            wait_write(conn.fileno(), timeout=timeout)
        else:
            raise ValueError('poll() returned unexpected result')
```

----------------------------------------

TITLE: Subclassing PostgresqlDatabase to Set Isolation Level (Python)
DESCRIPTION: Illustrates how to create a custom database class by subclassing `PostgresqlDatabase` and implementing the `_initialize_connection` hook to automatically set the desired isolation level for every new connection established by this database instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/database.rst#_snippet_8

LANGUAGE: python
CODE:
```
class SerializedPostgresqlDatabase(PostgresqlDatabase):
            def _initialize_connection(self, conn):
                conn.set_isolation_level(ISOLATION_LEVEL_SERIALIZABLE)
```

----------------------------------------

TITLE: Bulk Update Peewee BitField using Bitwise Operators - Python
DESCRIPTION: Demonstrates how to perform bulk updates on a Peewee BitField using standard Python bitwise operators like OR (|) to set bits and AND (&) with NOT (~) to clear bits. Requires a Peewee Model with a BitField.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_22

LANGUAGE: python
CODE:
```
# Set the 4th bit on all Post objects.
Post.update(flags=Post.flags | 8).execute()

# Clear the 1st and 3rd bits on all Post objects.
Post.update(flags=Post.flags & ~(1 | 4)).execute()
```

----------------------------------------

TITLE: Connecting post_save Signal with connect Method (Peewee Python)
DESCRIPTION: Illustrates connecting a function to the `post_save` signal using the `connect` method of the signal object. It shows how to specify a `sender` model to filter which model instances trigger the handler.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_114

LANGUAGE: python
CODE:
```
from playhouse.signals import *

def post_save_handler(sender, instance, created):
    print('%s was just saved' % instance)

# our handler will only be called when we save instances of SomeModel
post_save.connect(post_save_handler, sender=SomeModel)
```

----------------------------------------

TITLE: Adding Table-Level FOREIGN KEY Constraint in Peewee
DESCRIPTION: Illustrates how to define a table-level foreign key constraint on a model using the `constraints` attribute within the `Meta` class, referencing a composite primary key in another table via raw SQL wrapped in the `SQL` helper.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/models.rst#_snippet_49

LANGUAGE: python
CODE:
```
class Person(Model):
    first = CharField()
    last = CharField()

    class Meta:
        primary_key = CompositeKey('first', 'last')

class Pet(Model):
    owner_first = CharField()
    owner_last = CharField()
    pet_name = CharField()

    class Meta:
        constraints = [SQL('FOREIGN KEY(owner_first, owner_last) '
                           'REFERENCES person(first, last)')]
```

----------------------------------------

TITLE: Numbering Members by Join Date (SQL/Peewee)
DESCRIPTION: Generates a sequential numbered list of members based on their join date using a window function. Results are ordered by join date. This example utilizes PostgreSQL-specific window functions.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_examples.rst#_snippet_50

LANGUAGE: sql
CODE:
```
SELECT row_number() OVER (ORDER BY joindate), firstname, surname
FROM members ORDER BY joindate;
```

LANGUAGE: python
CODE:
```
query = (Member
             .select(fn.row_number().over(order_by=[Member.joindate]),
                     Member.firstname, Member.surname)
             .order_by(Member.joindate))
```

----------------------------------------

TITLE: Saving Generated Peewee Models to File (Console)
DESCRIPTION: Demonstrates redirecting the standard output of the `pwiz` command to a Python file (`mymodels.py`) for later use, followed by starting an interactive Python shell.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_119

LANGUAGE: console
CODE:
```
python -m pwiz -e postgresql my_postgres_db > mymodels.py
python # <-- fire up an interactive shell
```

----------------------------------------

TITLE: Converting Comma-Separated IDs with python_value (Peewee, Python)
DESCRIPTION: Shows how to use the `python_value` method on a Peewee function call (`fn.GROUP_CONCAT`) to apply a custom Python function (`convert_ids`) to the database result before it's returned. This example converts a comma-separated string of tweet IDs into a list of integers and then queries users along with their tweet IDs.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_30

LANGUAGE: python
CODE:
```
convert_ids = lambda s: [int(i) for i in (s or '').split(',') if i]
tweet_ids = (fn
             .GROUP_CONCAT(Tweet.id)
             .python_value(convert_ids))

query = (User
         .select(User.username, tweet_ids.alias('tweet_ids'))
         .join(Tweet)
         .group_by(User.username))

for user in query:
    print(user.username, user.tweet_ids)

# e.g.,
# huey [1, 4, 5, 7]
# mickey [2, 3, 6]
# zaizee []
```

----------------------------------------

TITLE: Querying using Hybrid Property in Peewee Python
DESCRIPTION: Shows how to use a hybrid property (`Interval.length`) directly in a Peewee query's `where` clause, allowing the calculated value to be used for filtering at the database level.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_90

LANGUAGE: python
CODE:
```
query = Interval.select().where(Interval.length > 5)
```

----------------------------------------

TITLE: Querying with .c Attribute in Peewee (Python)
DESCRIPTION: Demonstrates selecting data using the .c attribute to reference columns in tables that may not have explicit column definitions, joining tables, filtering by a date range, and ordering results. It shows how to iterate over the results and access data by dictionary keys.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/query_builder.rst#_snippet_7

LANGUAGE: python
CODE:
```
today = datetime.date.today()
tomorrow = today + datetime.timedelta(days=1)

query = (Reminder
         .select(Reminder.c.alarm, Note.content)
         .join(Note, on=(Reminder.c.note_id == Note.id))
         .where(Reminder.c.alarm.between(today, tomorrow))
         .order_by(Reminder.c.alarm))
for row in query:
    print(row['alarm'], row['content'])
```

----------------------------------------

TITLE: Querying Top N Tweets per User with Lateral Join (Peewee Python - User Perspective)
DESCRIPTION: This Peewee Python snippet implements the lateral join technique to find the top 3 most recent tweets per user, querying from the perspective of the User model. It defines a subquery that selects tweet details for a given user and limits the results, then joins the main User query with this subquery using JOIN.LEFT_LATERAL. The result provides User instances augmented with tweet data.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/hacks.rst#_snippet_6

LANGUAGE: python
CODE:
```
subq = (Tweet
            .select(Tweet.message, Tweet.created_date)
            .where(Tweet.user == User.id)
            .order_by(Tweet.created_date.desc())
            .limit(3))

query = (User
             .select(User, subq.c.content, subq.c.created_date)
             .join(subq, JOIN.LEFT_LATERAL)
             .order_by(User.username, subq.c.created_date.desc()))

# We queried from the "perspective" of user, so the rows are User instances
# with the addition of a "content" and "created_date" attribute for each of
# the (up-to) 3 most-recent tweets for each user.
for row in query:
    print(row.username, row.content, row.created_date)
```

----------------------------------------

TITLE: Generating Peewee Models from Database (Python)
DESCRIPTION: Demonstrates how to use `playhouse.reflection.generate_models` to introspect an existing database and create Peewee model classes dynamically. It shows how to access the generated models and use them for querying data. Requires a Peewee Database instance.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_144

LANGUAGE: python
CODE:
```
>>> from peewee import *
>>> from playhouse.reflection import generate_models
>>> db = PostgresqlDatabase('my_app')
>>> models = generate_models(db)
>>> list(models.keys())
['account', 'customer', 'order', 'orderitem', 'product']

>>> globals().update(models)  # Inject models into namespace.
>>> for cust in customer.select():  # Query using generated model.
...     print(cust.name)
...

Huey Kitty
Mickey Dog
```

----------------------------------------

TITLE: Connecting Peewee using MariaDBConnectorDatabase (Python)
DESCRIPTION: Shows how to initialize a Peewee database connection using the `MariaDBConnectorDatabase` class from `playhouse.mysql_ext`. This class utilizes the `mariadb-connector` driver. Requires importing the class and providing connection parameters.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/playhouse.rst#_snippet_66

LANGUAGE: python
CODE:
```
from playhouse.mysql_ext import MariaDBConnectorDatabase

# MySQL database implementation that utilizes mariadb-connector driver.
db = MariaDBConnectorDatabase('my_database', host='1.2.3.4', user='mysql')
```

----------------------------------------

TITLE: Using Peewee Case without a Predicate (Searched Case)
DESCRIPTION: Illustrates how to use the Peewee Case function without a predicate column, allowing for more complex conditional logic using expressions in the WHEN clauses, and shows the corresponding SQL output.
SOURCE: https://github.com/coleifer/peewee/blob/master/docs/peewee/api.rst#_snippet_34

LANGUAGE: Python
CODE:
```
Number = Table('numbers', ('val',))

num_as_str = Case(None, (
    (Number.val == 1, 'one'),
    (Number.val == 2, 'two'),
    (Number.val == 3, 'three')), 'a lot')
query = Number.select(Number.val, num_as_str.alias('num_str'))
```

LANGUAGE: SQL
CODE:
```
SELECT "val",
  CASE
      WHEN "val" = 1 THEN 'one'
      WHEN "val" = 2 THEN 'two'
      WHEN "val" = 3 THEN 'three'
      ELSE 'a lot' END AS "num_str"
FROM "numbers"
```